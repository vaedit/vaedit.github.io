<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AWS-EC2在线磁盘扩容</title>
    <url>/b97f48ac.html</url>
    <content><![CDATA[<ol>
<li><p>首先先给需要扩容的磁盘卷制作快照</p>
</li>
<li><p>在控制台修改对应的的磁盘卷，把容量扩大，等待扩容进程走完成</p>
</li>
<li><p>查看文件系统</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">file -s /dev/nvme?n* <span class="comment">#查看文件系统</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>根据卷是否有分区，来决定是否需要执行扩展分区</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsblk <span class="comment">#查看磁盘</span></span><br><span class="line">NAME          MAJ:MIN RM SIZE RO TYPE MOUNTPOINT</span><br><span class="line">nvme1n1       259:0    0  30G  0 disk /data</span><br><span class="line">nvme0n1       259:1    0  16G  0 disk</span><br><span class="line">└─nvme0n1p1   259:2    0   8G  0 part /</span><br><span class="line">└─nvme0n1p128 259:3    0   1M  0 part</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#nvme1n1  没有分区，nvme0n1上有两个分区，有分区的卷需要执行扩展分区扩容</span></span><br><span class="line">growpart /dev/nvme0n1 1 <span class="comment">#请注意，设备名称和分区编号之间有空格</span></span><br></pre></td></tr></table></figure>

 <a id="more"></a>
</li>
<li><p>扩展文件系统</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#扩展 ext2、ext3 或 ext4 文件系统</span></span><br><span class="line">df -h</span><br><span class="line">resize2fs /dev/xvda1</span><br><span class="line"></span><br><span class="line"><span class="comment">#扩展 XFS 文件系统</span></span><br><span class="line"><span class="comment">#要扩展 XFS 文件系统，请按以下方式安装 XFS 工具（如果尚未安装）。</span></span><br><span class="line">sudo yum install xfsprogs</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用 xfs_growfs 命令扩展每个卷上的文件系统。在此示例中，/ 和 /data 是 df -h 的输出中显示的卷挂载点。</span></span><br><span class="line">sudo xfs_growfs -d /</span><br><span class="line">sudo xfs_growfs -d /data</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>AWS服务</category>
      </categories>
      <tags>
        <tag>磁盘扩容</tag>
      </tags>
  </entry>
  <entry>
    <title>AWS-RDS慢查询日志查看导出</title>
    <url>/5ed6ea01.html</url>
    <content><![CDATA[<p>如果要分析 slow log，第一步就是先要获取到 slow log 文件，由于 RDS MySQL 是托管数据库，我们无法登录到 MySQL 所在服务器，那么应该如何来获取 slow log 文件呢？</p>
<p>根据 MySQL slow log 的相关配置，我们知道 slow log 的存在形式一共有两种： table 或 file ，由 log_output 参数进行控制：</p>
<ul>
<li>TABLE (默认) – 将一般查询写入 general_log 表，将慢速查询写入 mysql.slow_log 表；</li>
<li>FILE – 将一般查询日志和慢速查询日志写入文件系统；</li>
<li>NONE – 禁用日志记录；</li>
</ul>
<p>针对不同形式的 slow log，我们有不同的方法将其下载到本地：</p>
<ul>
<li>TABLE ：由于这是将慢查询记录存放在 MySQL 的数据表里，这里我们可以使用 sql 命令将其输出到本地的一个文件；</li>
<li>FILE ：慢查询日志存放在 RDS MySQL 托管主机上，我们可以利用 awscli 提供的 RDS API download-db-log-file-portion 将 slow log 下载到本地；</li>
</ul>
<p>具体实现形式请参加后续对应部分的内容。</p>
<a id="more"></a>

<h3 id="使用-sql-脚本获取-slow-log"><a href="#使用-sql-脚本获取-slow-log" class="headerlink" title="使用 sql 脚本获取 slow log"></a>使用 sql 脚本获取 slow log</h3><p>查看慢查询日志记录方式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">show variables like <span class="string">&#x27;log_output&#x27;</span>;</span><br></pre></td></tr></table></figure>



<p>导出当前全部慢查询日志</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -uxxx -pxxxx -h xxx -D mysql -s -r -e <span class="string">&quot;SELECT CONCAT( &#x27;# Time: &#x27;, DATE_FORMAT(start_time, &#x27;%y%m%d %H%i%s&#x27;), &#x27;\n&#x27;, &#x27;# User@Host: &#x27;, user_host, &#x27;\n&#x27;, &#x27;# Query_time: &#x27;, TIME_TO_SEC(query_time),  &#x27;  Lock_time: &#x27;, TIME_TO_SEC(lock_time), &#x27;  Rows_sent: &#x27;, rows_sent, &#x27;  Rows_examined: &#x27;, rows_examined, &#x27;\n&#x27;, sql_text, &#x27;;&#x27; ) FROM mysql.slow_log&quot;</span> &gt; /data/mysql_slow_log.log</span><br></pre></td></tr></table></figure>

<p>按时间导出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -h mysql.xxxxxxxxxxxx.rds.cn-northwest-1.amazonaws.com.cn -u root -p -P13306 -D mysql -s -r -e <span class="string">&quot;SELECT CONCAT( &#x27;# Time: &#x27;, DATE_FORMAT(start_time, &#x27;%y%m%d %H%i%s&#x27;), &#x27;\n&#x27;, &#x27;# User@Host: &#x27;, user_host, &#x27;\n&#x27;, &#x27;# Query_time: &#x27;, TIME_TO_SEC(query_time),  &#x27;  Lock_time: &#x27;, TIME_TO_SEC(lock_time), &#x27;  Rows_sent: &#x27;, rows_sent, &#x27;  Rows_examined: &#x27;, rows_examined, &#x27;\n&#x27;, sql_text, &#x27;;&#x27; ) FROM mysql.slow_log where DATE_FORMAT(start_time, &#x27;%Y%m%d %H:%i:%s&#x27;) between &#x27;20190328 10:00:00&#x27; and &#x27;20190328 11:00:00&#x27; &quot;</span> &gt; /tmp/slow.log.10-11.log</span><br></pre></td></tr></table></figure>

<h3 id="使用-awscli-获取-MySQL-slow-log"><a href="#使用-awscli-获取-MySQL-slow-log" class="headerlink" title="使用 awscli 获取 MySQL slow log"></a>使用 awscli 获取 MySQL slow log</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">show variables like <span class="string">&#x27;%output%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">show variables like <span class="string">&#x27;%slow%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">aws rds download-db-log-file-portion --db-instance-identifier mysql --log-file-name slowquery/mysql-slowquery.log --starting-token 0 --output text&gt; mysql-slowquery.log</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>AWS服务</category>
      </categories>
      <tags>
        <tag>AWS慢查询日志</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Django2.2-DateTimeField去掉微秒</title>
    <url>/2488942.html</url>
    <content><![CDATA[<h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><ul>
<li>Django 2.2</li>
<li>Mysql 5.7</li>
</ul>
<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>不管如何设置时间格式，数据库字段保存都有微秒(我的需求是去掉微秒)，如下图</p>
<p><img src="https://vaedit-images.oss-cn-beijing.aliyuncs.com/img/image-20200923171022616.png" alt="image-20200923171022616"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#models中定义字段</span></span><br><span class="line">exetime = models.DateTimeField(auto_now_add=<span class="literal">True</span>,verbose_name=<span class="string">&#x27;执行时间&#x27;</span>)</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>期间尝试了修改setings.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATETIME_FORMAT=<span class="string">&quot;%Y-%m-%d%H:%M:%S&quot;</span></span><br><span class="line">L10N=<span class="literal">False</span></span><br><span class="line">USE_TZ=<span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p>还尝试了直接修改model</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#这个应该在mysql5.6以下可用</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">exetime = models.DateTimeField(auto_now_add=datetime.datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d %H:%I:%S&#x27;</span>),verbose_name=<span class="string">&#x27;执行时间&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>以上种种皆不可行</p>
<h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><blockquote>
<p>最终发现，由于django默认对mysql5.7创建datetime字段时为datetime(6)，数据库保存的就一定包含微秒，所以想到两种方式，第一种改源码，把默认映射改为datetime，第二种手动更改对应数据库字段</p>
</blockquote>
<p>我使用第二种手动更改数据库字段为datetime后满足需求</p>
<p><img src="https://vaedit-images.oss-cn-beijing.aliyuncs.com/img/image-20200923172512462.png" alt="image-20200923172512462"></p>
<p>如果使用第一种可以参考查看这个文件:django\db\backends\mysql\base.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DatabaseWrapper</span>(<span class="params">BaseDatabaseWrapper</span>):</span></span><br><span class="line">    vendor = <span class="string">&#x27;mysql&#x27;</span></span><br><span class="line">    display_name = <span class="string">&#x27;MySQL&#x27;</span></span><br><span class="line">    <span class="comment"># This dictionary maps Field objects to their associated MySQL column</span></span><br><span class="line">    <span class="comment"># types, as strings. Column-type strings can contain format strings; they&#x27;ll</span></span><br><span class="line">    <span class="comment"># be interpolated against the values of Field.__dict__ before being output.</span></span><br><span class="line">    <span class="comment"># If a column type is set to None, it won&#x27;t be included in the output.</span></span><br><span class="line">    data_types = &#123;</span><br><span class="line">        <span class="string">&#x27;AutoField&#x27;</span>: <span class="string">&#x27;integer AUTO_INCREMENT&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;BigAutoField&#x27;</span>: <span class="string">&#x27;bigint AUTO_INCREMENT&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;BinaryField&#x27;</span>: <span class="string">&#x27;longblob&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;BooleanField&#x27;</span>: <span class="string">&#x27;bool&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;CharField&#x27;</span>: <span class="string">&#x27;varchar(%(max_length)s)&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;DateField&#x27;</span>: <span class="string">&#x27;date&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;DateTimeField&#x27;</span>: <span class="string">&#x27;datetime(6)&#x27;</span>, <span class="comment">#默认为6</span></span><br><span class="line">        <span class="string">&#x27;DecimalField&#x27;</span>: <span class="string">&#x27;numeric(%(max_digits)s, %(decimal_places)s)&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;DurationField&#x27;</span>: <span class="string">&#x27;bigint&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;FileField&#x27;</span>: <span class="string">&#x27;varchar(%(max_length)s)&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;FilePathField&#x27;</span>: <span class="string">&#x27;varchar(%(max_length)s)&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;FloatField&#x27;</span>: <span class="string">&#x27;double precision&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;IntegerField&#x27;</span>: <span class="string">&#x27;integer&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;BigIntegerField&#x27;</span>: <span class="string">&#x27;bigint&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;IPAddressField&#x27;</span>: <span class="string">&#x27;char(15)&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;GenericIPAddressField&#x27;</span>: <span class="string">&#x27;char(39)&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NullBooleanField&#x27;</span>: <span class="string">&#x27;bool&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;OneToOneField&#x27;</span>: <span class="string">&#x27;integer&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PositiveIntegerField&#x27;</span>: <span class="string">&#x27;integer UNSIGNED&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PositiveSmallIntegerField&#x27;</span>: <span class="string">&#x27;smallint UNSIGNED&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;SlugField&#x27;</span>: <span class="string">&#x27;varchar(%(max_length)s)&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;SmallIntegerField&#x27;</span>: <span class="string">&#x27;smallint&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;TextField&#x27;</span>: <span class="string">&#x27;longtext&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;TimeField&#x27;</span>: <span class="string">&#x27;time(6)&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;UUIDField&#x27;</span>: <span class="string">&#x27;char(32)&#x27;</span>,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python运维</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Iptables端口转发</title>
    <url>/818ac74b.html</url>
    <content><![CDATA[<blockquote>
<p>Linux下iptables不仅可以用来做防火墙还可以用来做端口转发</p>
</blockquote>
<h2 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h2><p><strong>将本机的8080端口转发至其他主机，主机IP：192.168.1.12，目标主机IP和端口：192.168.1.13:8088，规则如下</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -t nat -A PREROUTING -p tcp -m tcp --dport 8080 -j DNAT --to-destination 192.168.1.13:8088</span><br><span class="line">iptables -t nat -A POSTROUTING -p tcp -m tcp --dport 8088 -j SNAT --to-source 192.168.1.12</span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/ip_forward <span class="comment">#开启iptables forward转发功能。</span></span><br></pre></td></tr></table></figure>

<p><strong>tcp范围端口映射</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -t nat -A PREROUTING -p tcp --dport 2000:2500 -j DNAT --to 192.168.66.2:2000-2500</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p><strong>远程转发</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -A FORWARD -p tcp --dport 80 -j ACCEPT</span><br><span class="line">iptables -A FORWARD -p tcp --sport 80 -j ACCEPT</span><br><span class="line"><span class="comment">#把访问192.168.0.12的80端口转发到192.168.0.13的80端口</span></span><br><span class="line">iptables -t nat -A PREROUTING -p tcp -i eth0 -d 192.168.0.12 --dport 80 -j DNAT --to-destination 192.168.0.13:80</span><br><span class="line"><span class="comment">#配置地址伪装 </span></span><br><span class="line">iptables -t nat -A POSTROUTING -p tcp -m tcp --dport 80 -j MASQUERADE</span><br></pre></td></tr></table></figure>

<p><strong>本地转发</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#访问本机的8080端口转发到本地的80端口</span></span><br><span class="line">iptables -t nat -A PREROUTING -p tcp --dport 8080 -j REDIRECT --to-ports 80</span><br></pre></td></tr></table></figure>

<p><strong>清空转发规则（nat表）</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -F -t nat</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux基础服务</category>
      </categories>
      <tags>
        <tag>iptables</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-ssh隧道详解</title>
    <url>/d517a7ab.html</url>
    <content><![CDATA[<h4 id="隧道原理"><a href="#隧道原理" class="headerlink" title="隧道原理"></a>隧道原理</h4><p>隧道是一种把一种网络协议封装进另外一种网络协议进行传输的技术。这里我们研究ssh隧道，所以所有的网络通讯都是加密的。又被称作端口转发，因为ssh隧道通常会绑定一个本地端口，所有发向这个端口端口的数据包，都会被加密并透明地传输到远端系统。</p>
<h4 id="隧道的类型"><a href="#隧道的类型" class="headerlink" title="隧道的类型"></a>隧道的类型</h4><h5 id="ssh隧道有3种类型："><a href="#ssh隧道有3种类型：" class="headerlink" title="ssh隧道有3种类型："></a>ssh隧道有3种类型：</h5><ul>
<li>动态端口转发（Socks 代理）</li>
<li>本地端口转发</li>
<li>远端端口转发</li>
</ul>
<a id="more"></a>

<h4 id="ssh端口转发常用选项"><a href="#ssh端口转发常用选项" class="headerlink" title="ssh端口转发常用选项"></a>ssh端口转发常用选项</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-N <span class="comment">#告诉SSH客户端，这个连接不需要执行任何命令。仅仅做端口转发</span></span><br><span class="line">-f <span class="comment">#告诉SSH客户端在后台运行</span></span><br><span class="line">-L <span class="comment">#本地转发</span></span><br><span class="line">-R <span class="comment">#远程转发</span></span><br><span class="line">-D <span class="comment">#动态转发</span></span><br><span class="line">-C <span class="comment">#数据压缩</span></span><br></pre></td></tr></table></figure>

<h4 id="动态端口转发"><a href="#动态端口转发" class="headerlink" title="动态端口转发"></a>动态端口转发</h4><table>
<thead>
<tr>
<th>主机名</th>
<th>IP地址</th>
</tr>
</thead>
<tbody><tr>
<td>A</td>
<td>111.111.111.111</td>
</tr>
<tr>
<td>B</td>
<td>111.111.111.112</td>
</tr>
<tr>
<td>C</td>
<td>192.168.0.4，91.85.113.211</td>
</tr>
<tr>
<td>D</td>
<td>102.168.0.1/24</td>
</tr>
</tbody></table>
<p>假设A只能访问B，B只能访问C，C能访问所有，那么我们要从A访问C和D就只需要在B和C之间做一个动态转发，就可以把B作为代理来用，这样只要能访问B的机器都可以用B来设置代理。如果只想B本机本地使用代理，则本地地址绑定只需要设置为127.0.0.1</p>
<p><strong>在B机器上执行如下代码开启动态转发</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -f -N -D 0.0.0.0:1080 vaedit@91.85.113.211 <span class="comment">#如果配置了秘钥则无需输入，如果没秘钥则需要输入密码验证</span></span><br><span class="line"><span class="comment">#本地代理</span></span><br><span class="line">ssh -f -N -D localhost:1080 vaedit@91.85.113.211</span><br></pre></td></tr></table></figure>
<p><strong>注意点</strong></p>
<pre><code>如果主机C的ssh默认端口不是22,那我们需要在代理机上的.ssh/config目录中设置port=4521来实现设置默认连接端口
保持长时间连接：
有些路由器会把长时间没有通信的连接断开。SSH客户端的TCPKeepAlive选项可以避免这个问题的发生， 默认情况下它是被开启的。
如果它被关闭了，可以在ssh的命令上加上-o TCPKeepAlive=yes来开启。</code></pre>
<h4 id="本地端口转发"><a href="#本地端口转发" class="headerlink" title="本地端口转发"></a>本地端口转发</h4><h5 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h5><pre><code>假设X网络（192.168.18.0/24）有主机A（192.168.18.100）,
Y网络（192.168.2.0/24）有主机B（192.168.2.100）和主机C（192.168.2.101），
已知主机A可以连接主机B，但无法连接主机C。A主机需要访问C主机的VNC服务（5900端口）
在A主机上建立本地转发端口5901  
ssh -L 5901:192.168.2.101:5900 root@192.168.2.100 
然后本地vnc客户端通过5901端口打开c主机的vnc服务 
open vnc://localhost:5901</code></pre>
<blockquote>
<p>通过SSH隧道，将一个远端机器能够访问到的地址和端口，映射为一个本地的端口。</p>
</blockquote>
<p>命令格式: </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -L 本地端口:远程主机地址:远程主机开放端口 中转主机地址</span><br></pre></td></tr></table></figure>

<p><strong>示例：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -L 1314:192.168.4.113:80 192.168.4.101 -Nf</span><br><span class="line"><span class="comment">#当访问本机的1314的端口时，被加密后转发到192.168.4.101的ssh服务，再解密被转发到192.168.4.113:80</span></span><br></pre></td></tr></table></figure>

<p><strong>优点：无需设置代理</strong></p>
<p><strong>缺点：每个服务都需要配置不同的端口转发</strong></p>
<p><strong>注意点</strong></p>
<blockquote>
<p>共享这个本地端口转发需要加上-g参数,或者在sshd_config中添加GatewayPorts yes并重启sshd服务</p>
</blockquote>
<hr>
<h4 id="远程转发"><a href="#远程转发" class="headerlink" title="远程转发"></a>远程转发</h4><p><strong>使用场景</strong></p>
<table>
<thead>
<tr>
<th>主机名</th>
<th>ip地址</th>
</tr>
</thead>
<tbody><tr>
<td>A</td>
<td>192.168.0.17</td>
</tr>
<tr>
<td>B</td>
<td>95.169.18.91</td>
</tr>
<tr>
<td>C</td>
<td>98.142.141.59</td>
</tr>
</tbody></table>
<p><strong>注意点</strong><br>A机器处于在层层NAT之下的内网;B机器拥有公网IP(称为IpB),可以被任意机器直接访问;A机器希望将本地端口PortA映射到B机器的端口PortB上,使得任何人访问B机器PortB端口等效于访问A机器的PortA端口。配置方法B机器配置要求B机器能够运行sshd之类的可以进行ssh登录的软件。ssh的配置要添加:GatewayPorts=yes,AllowTcpForwarding=yes然后清理掉所有ssh的会话进程,重启ssh服务。如果不是用的root用户建立隧道，那么在B机器上只能监听本地127.0.0.1端口。</p>
<p><strong>需求说明</strong></p>
<p>A机器处于在层层NAT之下的内网;B机器拥有公网IP(称为IpB),可以被任意机器直接访问;A机器希望将本地端口PortA映射到B机器的端口PortB上,使得任何人访问B机器PortB端口等效于访问A机器的PortA端口。</p>
<p><strong><em>配置方法</em></strong> </p>
<p>B机器配置:</p>
<blockquote>
<p>要求B机器能够运行sshd之类的可以进行ssh登录的软件。ssh的配置要添加:<br>GatewayPorts yes,AllowTcpForwarding yes.然后清理掉所有ssh的会话进程,重启ssh服务</p>
</blockquote>
<p>这样使得B机器可以启用0.0.0.0的监听地址,否则B机器只能监听来自127.0.0.1的地址。</p>
<p><strong><em>A机器配置</em></strong></p>
<blockquote>
<p>ssh的命令参数如下。也在-R前可以添加-C -f -N -g,使得ssh程序在后台运行。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -R 0.0.0.0:PortB:127.0.0.1:PortA root@IpB</span><br><span class="line"><span class="comment">#具体案例：</span></span><br><span class="line">ssh -fN -g -R 0.0.0.0:1027:127.0.0.1:22  root@95.169.18.91</span><br></pre></td></tr></table></figure>
<p>然后在B机器上运行如下命令,即可检验是否生效。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -lnp | grep PortB</span><br></pre></td></tr></table></figure>

<p>这样就实现了需求的功能,即访问PortB等效于访问PortA，在C上执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh root@95.169.18.91 -p 1027 <span class="comment">#即可连接到A机器的22端口，即实现了A端口22到B端口1027的映射</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux基础服务</category>
      </categories>
      <tags>
        <tag>ssh隧道</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下制作RPM包工具fpm</title>
    <url>/dbf9115.html</url>
    <content><![CDATA[<h2 id="fpm工具安装"><a href="#fpm工具安装" class="headerlink" title="fpm工具安装"></a>fpm工具安装</h2><h3 id="CentOS-6-x下安装"><a href="#CentOS-6-x下安装" class="headerlink" title="CentOS 6.x下安装"></a>CentOS 6.x下安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#centos6 由于自带yum源中的ruby版本太低，需要如下安装：</span></span><br><span class="line">yum -y install rpm-build</span><br><span class="line">yum update nss</span><br><span class="line">gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB</span><br><span class="line">curl -sSL https://get.rvm.io | bash -s stable </span><br><span class="line"><span class="built_in">source</span> /etc/profile.d/rvm.sh</span><br><span class="line">rvm install 1.9.3</span><br><span class="line">gem install fpm</span><br><span class="line">rvm use 1.9.3 --default <span class="comment">#选择ruby版本</span></span><br></pre></td></tr></table></figure>

<h3 id="CentOS-7-x下安装"><a href="#CentOS-7-x下安装" class="headerlink" title="CentOS 7.x下安装"></a>CentOS 7.x下安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装ruby：</span></span><br><span class="line">yum -y install ruby rubygems ruby-devel rpm-build</span><br><span class="line">gem install fpm</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="FPM常用参数"><a href="#FPM常用参数" class="headerlink" title="FPM常用参数"></a>FPM常用参数</h2><ul>
<li><p>-f :强制覆盖[覆盖同名rpm包] </p>
</li>
<li><p>-n :指定的rpm包名</p>
</li>
<li><p>-p :指定的rpm包文件放置位置 </p>
</li>
<li><p>-v :指定的rpm包版本 </p>
</li>
<li><p>-d :指定依赖的软件   ( [-d ‘name’] or [-d ‘name &gt; version’] 例子: -d ‘libstdc++ &gt;= 4.4.3’)</p>
</li>
<li><p>-a :指定系统架构,如果是noarch则为’-a all’ 或者 ‘-a native’ [x86_64] 当软件不区分64位或32位的时候可以 noarch</p>
</li>
<li><p>-s :指定INPUT的数据类型 ([“-s dir”] 省略数据类型) </p>
</li>
<li><p>-m :指定打包人员[Packager]  ([ -m ‘user’])</p>
</li>
<li><p>-C :指定打包的相对路径,类似于buildroot. 譬如-C /tmp/apr/ 而打包机器的数据包路径是/tmp/apr/{opt,usr,etc} 那安装这个rpm包后,在本地的数据就是/opt/,/usr/,/etc/</p>
</li>
<li><p>-t :指定需要制作成什么包,可选项有(deb,rpm,solaris,etc)</p>
<ul>
<li><p>支持的源类型:</p>
<pre><code>  &quot;dir&quot; &quot;rpm&quot; &quot;gem&quot; &quot;python&quot; &quot;empty&quot; &quot;tar&quot; &quot;deb&quot; &quot;cpan&quot; &quot;npm&quot; &quot;osxpkg&quot; &quot;pear&quot; &quot;pkgin&quot; &quot;virtualenv&quot; &quot;zip&quot;</code></pre>
</li>
<li><p>支持的目标类型:</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;rpm&quot; &quot;deb&quot; &quot;solaris&quot; &quot;puppet&quot; &quot;dir&quot; &quot;osxpkg&quot; &quot;p5p&quot; &quot;puppet&quot; &quot;sh&quot; &quot;solaris&quot; &quot;tar&quot; &quot;zip&quot; </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>–description         :软件包描述 </p>
</li>
<li><p>–conflicts         :指定冲突软件 </p>
</li>
<li><p>–url                 :指定站点[惯例都是添加软件的官网 例如: –url  “<a href="http://www.cnblog.com/roach57&quot;">http://www.cnblog.com/roach57&quot;</a> ] </p>
</li>
<li><p>–verbose             :安装过程详细打印 </p>
</li>
<li><p>–after-install     :包安装之后执行的脚本 也可写作 –post-install FILE </p>
</li>
<li><p>–before-install     :包安装之前执行的脚本  </p>
</li>
<li><p>–after-remove         :包卸载之后执行的脚本 </p>
</li>
<li><p>–before-remove     :包卸载之前执行的脚本 </p>
</li>
<li><p>–after-upgrade     :包更新之后执行的脚本[仅支持 deb 和 rpm 这两种包] </p>
</li>
<li><p>–before-upgrade     :包更新之前执行的脚本 </p>
</li>
<li><p>–pre-install     rpm包安装前执行的脚本 </p>
</li>
<li><p>–post-install     rpm包安装后执行的脚本 </p>
</li>
<li><p>–pre-uninstall     rpm包卸载前执行的脚本 </p>
</li>
<li><p>–post-uninstall     rpm包卸载后执行的脚本 </p>
</li>
<li><p>–iteration         :发布序号[就是rpm包里面的release] </p>
</li>
<li><p>–epoch             :纪元  [不知道干嘛用的] </p>
</li>
<li><p>–no-rpm-sign        :不使用rpm签名   Signature </p>
</li>
<li><p>–license             :证书许可 [可选项有 ‘BSD(开源软件)’ ‘GPLv2(自由软件)’ ‘MIT’ ‘Public Domain(公共域)’ ‘Distributable(贡献)’ ‘commercial(商业)’ ‘Share(共享)等’,一般的开发都写’BSD’或’GPL’]</p>
</li>
<li><p>–vendor             :供应商名称 [ –vendor ‘roach57@163.com’] </p>
</li>
<li><p>–no-depends         :代表没有任何依赖包,和-d是对立的,不能共用 </p>
</li>
<li><p>–config-files         :指定配置文件,可以指定目录[递归] </p>
</li>
<li><p>–directories         :指定包目录 </p>
</li>
<li><p>–category             :软件所属的类别[这是个什么软件]下面有个对应的表格:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[参考这个文件 &#x2F;usr&#x2F;share&#x2F;doc&#x2F;rpm-x.x.x&#x2F;GROUPS ]</span><br><span class="line">Amusements&#x2F;Games [娱乐&#x2F;游戏]</span><br><span class="line">Amusements&#x2F;Graphics [娱乐&#x2F;图形]</span><br><span class="line">Applications&#x2F;Archiving [应用&#x2F;文档]</span><br><span class="line">Applications&#x2F;Communications [应用&#x2F;通讯]</span><br><span class="line">Applications&#x2F;Databases [应用&#x2F;数据库]</span><br><span class="line">Applications&#x2F;Editors [应用&#x2F;编辑器]</span><br><span class="line">Applications&#x2F;Emulators [应用&#x2F;仿真器]</span><br><span class="line">Applications&#x2F;Engineering [应用&#x2F;工程]</span><br><span class="line">Applications&#x2F;File [应用&#x2F;文件]</span><br><span class="line">Applications&#x2F;Internet [应用&#x2F;因特网]</span><br><span class="line">Applications&#x2F;Multimedia [应用&#x2F;多媒体]</span><br><span class="line">Applications&#x2F;Productivity [应用&#x2F;产品]</span><br><span class="line">Applications&#x2F;Publishing [应用&#x2F;印刷]</span><br><span class="line">Applications&#x2F;System [应用&#x2F;系统]</span><br><span class="line">Applications&#x2F;Text [应用&#x2F;文本]</span><br><span class="line">Development&#x2F;Debuggers [开发&#x2F;调试器]</span><br><span class="line">Development&#x2F;Languages [开发&#x2F;语言]</span><br><span class="line">Development&#x2F;Libraries [开发&#x2F;函数库]</span><br><span class="line">Development&#x2F;System [开发&#x2F;系统]</span><br><span class="line">Development&#x2F;Tools [开发&#x2F;工具]</span><br><span class="line">Documentation [文档]</span><br><span class="line">System Environment&#x2F;Base [系统环境&#x2F;基础]</span><br><span class="line">System Environment&#x2F;Daemons [系统环境&#x2F;守护]</span><br><span class="line">System Environment&#x2F;Kernel [系统环境&#x2F;内核]</span><br><span class="line">System Environment&#x2F;Libraries [系统环境&#x2F;函数库]</span><br><span class="line">System Environment&#x2F;Shells [系统环境&#x2F;接口]</span><br><span class="line">User Interface&#x2F;Desktops [用户界面&#x2F;桌面]</span><br><span class="line">User Interface&#x2F;X [用户界面&#x2F;X窗口]</span><br><span class="line">User Interface&#x2F;X Hardware Support [用户界面&#x2F;X硬件支持]</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fpm -f -s dir -t rpm -n moxopenssl --epoch 0 -v 1.0.1g --iteration 1.el6 -C /rpms/openssl/ -d <span class="string">&#x27;gcc zlib zlib-devel make&#x27;</span> -p /root --verbose --category <span class="string">&#x27;Applications/System&#x27;</span> --description <span class="string">&#x27;openssl&#x27;</span> --url <span class="string">&#x27;openssl.org&#x27;</span> --license <span class="string">&#x27;BSD&#x27;</span> -m <span class="string">&#x27;vaedit&#x27;</span> --no-rpm-sign --after-install /rpms/openssl/after_install_openssl.sh --after-remove /rpms/openssl/after_remove_openssl.sh</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fpm -f -s dir -t rpm -n moxlibiconv --epoch 0 -v 1.14 --iteration 1.el6 -C /rpms/libiconv/ -d <span class="string">&#x27;gcc libtool make&#x27;</span> -p /root --verbose --category <span class="string">&#x27;Development/Libraries&#x27;</span> --description <span class="string">&#x27;libiconv&#x27;</span> --url <span class="string">&#x27;libiconv.org&#x27;</span> --license <span class="string">&#x27;BSD&#x27;</span> -m <span class="string">&#x27;vaedit&#x27;</span> --no-rpm-sign</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fpm -f -s dir -t rpm -n moxcmake --epoch 0 -v 2.8.8 --iteration 1.el6 -C /rpms/cmake/ -d <span class="string">&#x27;gcc make&#x27;</span> -p /root --verbose --category <span class="string">&#x27;Development/Tools&#x27;</span> --description <span class="string">&#x27;cmake&#x27;</span> --url <span class="string">&#x27;cmake.org&#x27;</span> --license <span class="string">&#x27;BSD&#x27;</span> -m <span class="string">&#x27;vaedit&#x27;</span> --no-rpm-sign</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fpm -f -s dir -t rpm -n moxnginx --epoch 0 -v 1.4.4 --iteration 1.el6 -C /rpms/nginx/ -d <span class="string">&#x27;gcc pcre pcre-devel openssl openssl-devel httpd-devel make&#x27;</span> -p /root --verbose --category <span class="string">&#x27;Applications/System&#x27;</span> --description <span class="string">&#x27;nginx&#x27;</span> --url <span class="string">&#x27;nginx.org&#x27;</span> --license <span class="string">&#x27;BSD&#x27;</span> -m <span class="string">&#x27;vaedit&#x27;</span> --no-rpm-sign --after-install /rpms/script/after_install_nginx.sh --after-remove /rpms/script/after_remove_nginx.sh --before-install /rpms/script/before_install_nginx.sh</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fpm -f -s dir -t rpm -n moxjava --epoch 0 -v 1.7 --iteration 1.el6 -C /rpms/java/ -d <span class="string">&#x27;gcc&#x27;</span> -p /root --verbose --category <span class="string">&#x27;Applications/System&#x27;</span> --description <span class="string">&#x27;java&#x27;</span> --url <span class="string">&#x27;java.org&#x27;</span> --license <span class="string">&#x27;BSD&#x27;</span> -m <span class="string">&#x27;vaedit&#x27;</span> --no-rpm-sign --after-install /rpms/java/after_install_java.sh --after-remove /rpms/java/after_remove_java.sh</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fpm -f -s dir -t rpm -n moxzabbix --epoch 0 -v 3.0.15 --iteration 1.el6 -C /rpms/zabbix/ -d <span class="string">&#x27;gcc make&#x27;</span> -p /root --verbose --category <span class="string">&#x27;Applications/System&#x27;</span> --description <span class="string">&#x27;zabbix&#x27;</span> --url <span class="string">&#x27;https://www.zabbix.com&#x27;</span> --license <span class="string">&#x27;BSD&#x27;</span> -m <span class="string">&#x27;vaedit&#x27;</span> --no-rpm-sign --after-remove /rpms/script/after_remove_zabbix.sh</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fpm -f -s dir -t rpm -n moxmysql --epoch 0 -v 5.6.39 --iteration 1.el6 -C /rpms/mysql56/ -d <span class="string">&#x27;gcc make ncurses ncurses-devel autoconf bison bison-devel perl perl-DBI perl-DBD-MySQL libtool zlib-devel&#x27;</span> -p /root --verbose --category <span class="string">&#x27;Applications/Databases&#x27;</span> --description <span class="string">&#x27;mysql&#x27;</span> --url <span class="string">&#x27;mysql.org&#x27;</span> --license <span class="string">&#x27;BSD&#x27;</span> -m <span class="string">&#x27;vaedit&#x27;</span> --no-rpm-sign --after-install /rpms/script/after_install_mysql.sh --after-remove /rpms/script/after_remove_mysql.sh --before-install /rpms/script/before_install_mysql.sh</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fpm -f -s dir -t rpm -n moxmysql --epoch 0 -v 5.5.25 --iteration 1.el6 -C /rpms/mysql/ -d <span class="string">&#x27;gcc molongcmake make ncurses ncurses-devel autoconf bison bison-devel perl perl-DBI perl-DBD-MySQL libtool zlib-devel&#x27;</span> -p /root --verbose --category <span class="string">&#x27;Applications/Databases&#x27;</span> --description <span class="string">&#x27;mysql&#x27;</span> --url <span class="string">&#x27;mysql.org&#x27;</span> --license <span class="string">&#x27;BSD&#x27;</span> -m <span class="string">&#x27;vaedit&#x27;</span> --no-rpm-sign --after-install /rpms/script/after_install_mysql.sh --after-remove /rpms/script/after_remove_mysql.sh --before-install /rpms/script/before_install_mysql.sh</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#打包python模块需要安装以下依赖</span></span><br><span class="line">yum install python-devel python-setuptools -y</span><br><span class="line">fpm -s python -t rpm --before-install=/root/before_install_pyiptables.sh setup.py </span><br><span class="line">fpm -f -s python -t rpm -p /root/ setup.py</span><br><span class="line"><span class="comment">#经过测试发现打包的模块包安装后有问题，或者安装无效，有点坑，后用python官方自带的模块打包成功</span></span><br></pre></td></tr></table></figure>

<h3 id="查看rpm包具体信息"><a href="#查看rpm包具体信息" class="headerlink" title="查看rpm包具体信息"></a>查看rpm包具体信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -qpiR --scripts openssl-1.0.1g-1.el6.x86_64.rpm</span><br></pre></td></tr></table></figure>

<h3 id="指定安装根目录，也就是说该目录当成安装时的根目录，模拟安装，用来制作rpm时使用非常方便"><a href="#指定安装根目录，也就是说该目录当成安装时的根目录，模拟安装，用来制作rpm时使用非常方便" class="headerlink" title="指定安装根目录，也就是说该目录当成安装时的根目录，模拟安装，用来制作rpm时使用非常方便"></a>指定安装根目录，也就是说该目录当成安装时的根目录，模拟安装，用来制作rpm时使用非常方便</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make install DESTDIR=/whereto</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux基础服务</category>
      </categories>
      <tags>
        <tag>rpm包制作</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux内核调优</title>
    <url>/763b0dcd.html</url>
    <content><![CDATA[<h2 id="文件描述符和最大进程数"><a href="#文件描述符和最大进程数" class="headerlink" title="文件描述符和最大进程数"></a>文件描述符和最大进程数</h2><h3 id="ulimit的使用"><a href="#ulimit的使用" class="headerlink" title="ulimit的使用"></a>ulimit的使用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ulimit</span> </span><br><span class="line"><span class="comment">#-a 列出所有当前资源极限</span></span><br><span class="line"><span class="comment">#-n 每个进程可以同时打开的最大文件数</span></span><br><span class="line"><span class="comment">#-u 可以运行的最大并发进程数</span></span><br><span class="line"><span class="comment">#-S 设置软限制</span></span><br><span class="line"><span class="comment">#-H 设置硬限制</span></span><br><span class="line">在命令行直接执行该命令只会在当前shell生效，退出或者新开一个shell都会无效，所以可以加入到全局设置中：</span><br><span class="line">/bin/<span class="built_in">echo</span> <span class="string">&quot;ulimit -SHn 65535&quot;</span> &gt;&gt; /etc/profile</span><br><span class="line"></span><br><span class="line">有时候为了方便起见，也可以将用户资源的限制统一由一个文件来配置</span><br><span class="line">这个文件就是/etc/security/limits.conf，该文件不但能对指定用户的资源进行限制，还能对指定组的资源进行限制。</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;* hard nofile 65535&quot;</span> &gt;&gt;/etc/security/limits.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;* soft nofile 65535&quot;</span> &gt;&gt;/etc/security/limits.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;* soft nproc 65535&quot;</span> &gt;&gt;/etc/security/limits.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;* hard nproc 65535&quot;</span> &gt;&gt;/etc/security/limits.conf</span><br><span class="line"></span><br><span class="line">需要注意的是，在centos系统中，除了/etc/security/limits.conf文件外，还有一个文件/etc/security/limits.d/20-nproc.conf（centos7.x系统），</span><br><span class="line">/etc/security/limits.d/90-nproc.conf（centos6.x系统），这个文件中，对nproc设置了一个默认值，</span><br><span class="line">并且是针对所有系统用户设置的。而如果在/etc/security/limits.conf文件中也设置了nproc值的话，</span><br><span class="line">则会被覆盖，也就是说/etc/security/limits.d/里面的文件的配置会覆盖/etc/security/limits.conf的配置。</span><br><span class="line">所以最好是删除该文件或者修改或者屏蔽该文件内容：</span><br><span class="line">/bin/sed -i <span class="string">&#x27;s/1024/65535/g&#x27;</span>  /etc/security/limits.d/90-nproc.conf</span><br><span class="line">或者：</span><br><span class="line">rm -f /etc/security/limits.d/90-nproc.conf</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="TCP-IP协议"><a href="#TCP-IP协议" class="headerlink" title="TCP/IP协议"></a>TCP/IP协议</h2><p>七层网络模型<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/85434e952e604f6dbcfbae0b6284bd2b~tplv-k3u1fbpfcp-zoom-1.image"></p>
<h3 id="3次握手4次挥手"><a href="#3次握手4次挥手" class="headerlink" title="3次握手4次挥手"></a>3次握手4次挥手</h3><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7ab1ce48e60a4593ab9d30d993c93f24~tplv-k3u1fbpfcp-zoom-1.image"></p>
<h4 id="3次握手原理："><a href="#3次握手原理：" class="headerlink" title="3次握手原理："></a>3次握手原理：</h4><p><strong>第一次握手</strong>：建立连接。客户端发送连接请求报文段，将SYN位置为1，Sequence Number为x；然后客户端进入SYN_SENT状态，等待服务器的确认；</p>
<p><strong>第二次握手</strong>：服务器收到SYN报文段。服务器收到客户端的SYN报文段，需要对这个SYN报文段进行确认，设置Acknowledgment Number为x+1(Sequence Number+1)；<br>同时，自己自己还要发送SYN请求信息，将SYN位置为1，Sequence Number为y；服务器端将上述所有信息放到一个报文段（即SYN+ACK报文段）中，一并发送给客户端，此时服务器进入SYN_RECV状态；</p>
<p><strong>第三次握手</strong>：客户端收到服务器的SYN+ACK报文段。然后将Acknowledgment Number设置为y+1，向服务器发送ACK报文段，这个报文段发送完毕以后，客户端和服务器端都进入ESTABLISHED状态，完成TCP三次握手。</p>
<h4 id="4次挥手原理："><a href="#4次挥手原理：" class="headerlink" title="4次挥手原理："></a>4次挥手原理：</h4><p><strong>第一次挥手</strong>: 主机A（可以使客户端，可以是服务器端），设置Sequence Number和Acknowledgment Number，向主机B发送一个FIN报文段；<br>此时，主机A进入FIN_WAIT_1状态；这表示主机A没有数据要发送给主机B；</p>
<p><strong>第二次挥手</strong>：主机B收到了主机A发送的FIN报文段，向主机A回一个ACK报文段，Acknowledgment Number为Sequence Number加1；<br>主机A进入FIN_WAIT_2状态；主机B告诉主机A，我“同意”你的关闭请求；</p>
<p><strong>第三次挥手</strong>：主机B向主机A发送FIN报文段，请求关闭连接，同时主机B进入LAST_ACK状态；</p>
<p><strong>第四次挥手</strong>：主机A收到主机B发送的FIN报文段，向主机B发送ACK报文段，然后主机A进入TIME_WAIT状态；<br>主机B收到主机A的ACK报文段以后，就关闭连接；此时，主机A等待2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，主机A也可以关闭连接。</p>
<h2 id="Linux内核参数优化"><a href="#Linux内核参数优化" class="headerlink" title="Linux内核参数优化"></a>Linux内核参数优化</h2><p>Linux /proc/sys目录下存放着多数内核的参数，并且可以在系统运行时进行更改，一般重新启动机器就会失效。而/etc/sysctl.conf是一个允许改变正在运行中的Linux系统的接口，它包含一些TCP/IP堆栈和虚拟内存系统的高级选项，修改内核参数永久生效。<br>/proc/sys下内核文件与配置文件sysctl.conf中变量存在着对应关系，即修改sysct.conf配置文件，其实是修改/proc/sys相关参数，所以对Linux内核优化只需修改/etc/sysctl.conf文件即可</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="BAT生产环境-etc-sysctl-conf内核参数"><a href="#BAT生产环境-etc-sysctl-conf内核参数" class="headerlink" title="BAT生产环境/etc/sysctl.conf内核参数"></a>BAT生产环境/etc/sysctl.conf内核参数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net.ipv4.ip_forward &#x3D; 0</span><br><span class="line">net.ipv4.conf.default.rp_filter &#x3D; 1</span><br><span class="line">net.ipv4.conf.default.accept_source_route &#x3D; 0</span><br><span class="line">kernel.sysrq &#x3D; 0</span><br><span class="line">kernel.core_uses_pid &#x3D; 1</span><br><span class="line">net.ipv4.tcp_syncookies &#x3D; 1</span><br><span class="line">kernel.msgmnb &#x3D; 65536</span><br><span class="line">kernel.msgmax &#x3D; 65536</span><br><span class="line">kernel.shmmax &#x3D; 68719476736</span><br><span class="line">kernel.shmall &#x3D; 4294967296</span><br><span class="line">net.ipv4.tcp_max_tw_buckets &#x3D; 10000</span><br><span class="line">net.ipv4.tcp_sack &#x3D; 1</span><br><span class="line">net.ipv4.tcp_window_scaling &#x3D; 1</span><br><span class="line">net.ipv4.tcp_rmem &#x3D; 4096 87380 4194304</span><br><span class="line">net.ipv4.tcp_wmem &#x3D; 4096 16384 4194304</span><br><span class="line">net.core.wmem_default &#x3D; 8388608</span><br><span class="line">net.core.rmem_default &#x3D; 8388608</span><br><span class="line">net.core.rmem_max &#x3D; 16777216</span><br><span class="line">net.core.wmem_max &#x3D; 16777216</span><br><span class="line">net.core.netdev_max_backlog &#x3D; 262144</span><br><span class="line">net.core.somaxconn &#x3D; 262144</span><br><span class="line">net.ipv4.tcp_max_orphans &#x3D; 3276800</span><br><span class="line">net.ipv4.tcp_max_syn_backlog &#x3D; 262144</span><br><span class="line">net.ipv4.tcp_timestamps &#x3D; 0</span><br><span class="line">net.ipv4.tcp_synack_retries &#x3D; 1</span><br><span class="line">net.ipv4.tcp_syn_retries &#x3D; 1</span><br><span class="line">net.ipv4.tcp_tw_recycle &#x3D; 1</span><br><span class="line">net.ipv4.tcp_tw_reuse &#x3D; 1</span><br><span class="line">net.ipv4.tcp_mem &#x3D; 94500000 915000000 927000000</span><br><span class="line">net.ipv4.tcp_fin_timeout &#x3D; 1</span><br><span class="line">net.ipv4.tcp_keepalive_time &#x3D; 30</span><br><span class="line">net.ipv4.ip_local_port_range &#x3D; 1024 65535</span><br></pre></td></tr></table></figure>

<h3 id="参数详解："><a href="#参数详解：" class="headerlink" title="参数详解："></a>参数详解：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">net.ipv4.ip_forward = 0 <span class="comment"># 是否开启内核转发1开启</span></span><br><span class="line">net.ipv4.conf.default.rp_filter = 1</span><br><span class="line">net.ipv4.conf.default.accept_source_route = 0</span><br><span class="line"><span class="comment">#是否接受含有源路由信息的ip包。参数值为布尔值，1表示接受，0表示不接受。</span></span><br><span class="line"><span class="comment">#在充当网关的linux主机上缺省值为1，在一般的linux主机上缺省值为0。</span></span><br><span class="line"><span class="comment">#从安全性角度出发，建议你关闭该功能。</span></span><br><span class="line">kernel.sysrq = 0 <span class="comment"># 关闭sysrq魔术组合键，具体可以上网查看这个的功能，一般用不到</span></span><br><span class="line">kernel.core_uses_pid = 1 <span class="comment">#在生成的core文件名中加入进程id，core主要用于应用程序奔溃或者异常是产生，用于分析，默认参数与应用文件同目录下</span></span><br><span class="line">net.ipv4.tcp_syncookies = 1 <span class="comment">#防洪水攻击</span></span><br><span class="line">kernel.msgmnb = 65536 <span class="comment">#每个消息队列的最大字节限制。该文件指定一个消息队列的最大长度（bytes）。</span></span><br><span class="line">kernel.msgmax = 65536 <span class="comment">#该文件指定了从一个进程发送到另一个进程的消息最大长度。进程间的消息传递是在内核的内存中进行的。不会交换到硬盘上。所以如果增加该值，则将增加操作系统所使用的内存数量。</span></span><br><span class="line">kernel.shmmax = 68719476736 <span class="comment">#该参数定义了共享内存段的最大尺寸（以字节为单位）。默认是32M。</span></span><br><span class="line">kernel.shmall = 4294967296 <span class="comment">#该参数表示统一一次可以使用的共享内存总量（以页为单位）。默认是2097152，通常不需要修改。</span></span><br><span class="line">net.ipv4.tcp_max_tw_buckets = 10000</span><br><span class="line"><span class="comment">#系统同时保持TIME_WAIT套接字的最大数量，如果超过这个数字，TIME_WAIT套接字将立刻被清除并打印警告信息；</span></span><br><span class="line"><span class="comment">#默认为180000，设为较小数值此项参数可以控制TIME_WAIT套接字的最大数量，避免服务器被大量的TIME_WAIT套接字拖死；</span></span><br><span class="line">net.ipv4.tcp_sack = 1 <span class="comment">#选择性应答(SACK)是 TCP 的一项可选特性,可以提高某些网络中所有可用带宽的使用效率；</span></span><br><span class="line">net.ipv4.tcp_window_scaling = 1 <span class="comment">#启用RFC 1323定义的window scaling，要支持超过64KB的TCP窗口，必须启用该值（1表示启用），TCP窗口最大至1GB，TCP连接双方都启用时才生效。</span></span><br><span class="line">net.ipv4.tcp_rmem = 4096 87380 4194304</span><br><span class="line">net.ipv4.tcp_wmem = 4096 16384 4194304</span><br><span class="line"><span class="comment">#为每个TCP连接分配的读、写缓冲区内存大小，单位是Byte</span></span><br><span class="line"><span class="comment">#第一个数字表示，为TCP连接分配的最小内存</span></span><br><span class="line"><span class="comment">#第二个数字表示，为TCP连接分配的缺省内存</span></span><br><span class="line"><span class="comment">#第三个数字表示，为TCP连接分配的最大内存</span></span><br><span class="line"><span class="comment">#一般按照缺省值分配</span></span><br><span class="line">net.core.wmem_default = 8388608 <span class="comment">#该参数指定了发送套接字缓冲区大小的缺省值(以字节为单位)</span></span><br><span class="line">net.core.rmem_default = 8388608 <span class="comment">#指定了接收套接字缓冲区大小的缺省值（以字节为单位）。</span></span><br><span class="line">net.core.rmem_max = 16777216  <span class="comment">#指定了接收套接字缓冲区大小的最大值（以字节为单位）。</span></span><br><span class="line">net.core.wmem_max = 16777216 <span class="comment">#该参数指定了发送套接字缓冲区大小的最大值(以字节为单位)  </span></span><br><span class="line">net.core.netdev_max_backlog = 262144 <span class="comment">#该参数决定了，网络设备接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目。</span></span><br><span class="line">net.core.somaxconn = 262144 <span class="comment">#Linux kernel参数，表示socket监听的backlog(监听队列)上限</span></span><br><span class="line">net.ipv4.tcp_max_orphans = 3276800 <span class="comment">#系统所能处理不属于任何进程的TCP sockets最大数量(孤儿套接字)；</span></span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 262144 <span class="comment">#表示SYN队列长度，默认1024，改成8192，可以容纳更多等待连接的网络连接数。</span></span><br><span class="line">net.ipv4.tcp_timestamps = 0 <span class="comment">#该参数控制RFC 1323 时间戳与窗口缩放选项；时间戳可以避免序列号的卷绕。一个1Gbps的链路肯定会遇到以前用过的序列号。时间戳能够让内核接受这种&quot;异常&quot;的数据包。这里需要将其关掉。</span></span><br><span class="line">net.ipv4.tcp_synack_retries = 1 <span class="comment">#tcp_synack_retries显示或设定Linux在回应SYN要求时尝试多少次重新发送初始SYN,ACK封包后才决定放弃；</span></span><br><span class="line">net.ipv4.tcp_syn_retries = 1 <span class="comment">#对于一个新建连接，内核要发送多少个SYN 连接请求才决定放弃；</span></span><br><span class="line">net.ipv4.tcp_tw_recycle = 1 <span class="comment">#表示开启TCP连接中TIME-WAIT sockets的快速回收，默认为0，表示关闭</span></span><br><span class="line">net.ipv4.tcp_tw_reuse = 1 <span class="comment">#表示开启重用，允许将TIME-WAIT sockets重新用于新的TCP连接；</span></span><br><span class="line">net.ipv4.tcp_mem = 94500000 915000000 927000000</span><br><span class="line"><span class="comment">#内核分配给TCP连接的内存，单位是Page，1 Page = 4096 Bytes，可用命令查看：</span></span><br><span class="line">getconf PAGESIZE</span><br><span class="line">4096</span><br><span class="line"><span class="comment">#第一个数字表示，低于此值,TCP没有内存压力</span></span><br><span class="line"><span class="comment">#第二个数字表示，在此值下,进入内存压力阶段；kernel 会进入 “memory pressure” 压力模式</span></span><br><span class="line"><span class="comment">#第三个数字表示，高于此值,TCP拒绝分配socket；就会报：Out of socket memory</span></span><br><span class="line">net.ipv4.tcp_fin_timeout = 1 <span class="comment">#表示如果套接字由本端要求关闭，这个参数决定了它保持在 FIN-WAIT-2状态的时间；</span></span><br><span class="line"><span class="comment">#对端可以出错并永远不关闭连接，甚至意外当机。缺省值是60秒。</span></span><br><span class="line"><span class="comment">#2.2 内核的通常值是180秒，你可以按这个设置，但要记住的是，即使你的机器是一个轻载的WEB服务器，也有因为大量的死套接字而内存溢出的风险，</span></span><br><span class="line"><span class="comment">#FIN- WAIT-2的危险性比FIN-WAIT-1要小，因为它最多只能吃掉1.5K内存，但是它们的生存期长些。</span></span><br><span class="line">net.ipv4.tcp_keepalive_time = 30 <span class="comment">#如果某个TCP连接在空闲30秒后,内核才发起probe(探查)；</span></span><br><span class="line">net.ipv4.tcp_keepalive_probes = 3</span><br><span class="line">net.ipv4.tcp_keepalive_intvl = 3 </span><br><span class="line"><span class="comment">#如果probe 3次(每次3秒既tcp_keepalive_intvl值)不成功,内核才彻底放弃,认为该连接已失效；</span></span><br><span class="line">net.ipv4.ip_local_port_range = 1024 65535 <span class="comment">#表示用于向外连接的端口范围；</span></span><br><span class="line">net.ipv4.icmp_echo_ignore_broadcasts = 1 <span class="comment"># 避免放大攻击</span></span><br><span class="line">net.ipv4.icmp_ignore_bogus_error_responses = 1 <span class="comment"># 开启恶意icmp错误消息保护</span></span><br><span class="line">net.ipv4.netfilter.ip_conntrack_max=655360 <span class="comment">#在内核内存中netfilter可以同时处理的“任务”（连接跟踪条目）；centos6:net.nf_conntrack_max = 655360</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注意使用该参数时需要事先加载该模块modprobe ip_conntrack</span></span><br><span class="line">net.ipv4.tcp_orphan_retries = 0 <span class="comment">#孤儿socket废弃前重试的次数，重负载web服务器建议调小</span></span><br><span class="line">net.ipv4.tcp_retries2 = 2 <span class="comment">#活动TCP连接重传次数，超过次数视为掉线，放弃连接。缺省值：15，建议设为 2或者3.</span></span><br><span class="line">net.ipv4.tcp_retries1 = 3 <span class="comment">#放弃回应一个TCP 连接请求前﹐需要进行多少次重试；</span></span><br><span class="line">net.ipv4.route.gc_timeout = 100 <span class="comment">#路由缓存刷新频率，当一个路由失败后多长时间跳到另一个路由，默认是300。</span></span><br></pre></td></tr></table></figure>

<h2 id="DDOS攻击"><a href="#DDOS攻击" class="headerlink" title="DDOS攻击"></a>DDOS攻击</h2><p>完整的TCP连接的三次握手，假设一个用户A向服务器发送了SYN报文后突然死机或掉线，那么服务器在发出SYN+ACK应答报文后是无法收到客户端的ACK报文的（第三次握手无法完成），这种情况下服务器端一般会重试（再次发送SYN+ACK给客户端）并等待一段时间后丢弃这个未完成的连接，这段时间的长度我们称为SYN Timeout，一般来说这个时间是分钟的数量级（大约为30秒-2分钟）。</p>
<p>一个用户出现异常导致服务器的一个线程等待1分钟并不是什么很大的问题，但如果有一个恶意的攻击者大量模拟这种情况，服务器端将为了维护一个非常大的半连接列表而消耗非常多的资源，数以万计的半连接，即使是简单的保存并遍历也会消耗非常多的CPU时间和内存，何况还要不断对这个列表中的IP进行SYN+ACK的重试。</p>
<p>实际上如果服务器的TCP/IP栈不够强大，最后的结果往往是堆栈溢出崩溃，即使服务器端的系统足够强大，服务器端也将忙于处理攻击者伪造的TCP连接请求而无暇理睬客户的正常请求（毕竟客户端的正常请求比率非常之小），此时从正常客户的角度看来，服务器失去响应，服务器拒绝提供服务，服务器受到了DDOS攻击，这里攻击的手段为DDOS中SYN Flood攻击（SYN洪水攻击）。</p>
<h3 id="查看系统TCP连接"><a href="#查看系统TCP连接" class="headerlink" title="查看系统TCP连接"></a>查看系统TCP连接</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -an | awk <span class="string">&#x27;/tcp/ &#123;s[$NF]++&#125; END &#123;for(a in s) &#123;print a,s[a]&#125;&#125;&#x27;</span></span><br><span class="line">netstat -an | awk <span class="string">&#x27;/tcp/ &#123;print $NF&#125;&#x27;</span> | sort | uniq -c</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果处于SYN_RECV 状态太多，就有可能是遭受syn洪水攻击</p>
</blockquote>
]]></content>
      <categories>
        <category>系统调优</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux历史命令调优</title>
    <url>/2b8a17fa.html</url>
    <content><![CDATA[<h4 id="合理使用shell历史记录功能"><a href="#合理使用shell历史记录功能" class="headerlink" title="合理使用shell历史记录功能"></a>合理使用shell历史记录功能</h4><p>默认shell命令是存在.bash_history中，且不够详细，通过把以下命令写入到/etc/profile中，可以隐蔽的保存历史命令记录并方便审计。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#history</span></span><br><span class="line">HISTDIR=/usr/share/.<span class="built_in">history</span></span><br><span class="line"><span class="built_in">export</span> HISTORY_FILE=<span class="variable">$&#123;HISTDIR&#125;</span>/`date <span class="string">&#x27;+%Y-%m-%d&#x27;</span>`.<span class="built_in">log</span></span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="variable">$HISTDIR</span> ];<span class="keyword">then</span></span><br><span class="line">mkdir -p <span class="variable">$HISTDIR</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ ! -f <span class="variable">$HISTORY_FILE</span> ];<span class="keyword">then</span></span><br><span class="line">    touch <span class="variable">$HISTORY_FILE</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">readonly</span> PROMPT_COMMAND=<span class="string">&#x27;&#123; date &quot;+%Y-%m-%d %T ##### $(who am i |awk -v user=$USER &quot;&#123;print user \&quot; \&quot;\$2\&quot; \&quot;\$5&#125;&quot;) #### $(pwd) #### $(history 1 | &#123; read x cmd; echo &quot;$cmd&quot;; &#125;)&quot;; &#125; &gt;&gt; $HISTORY_FILE&#x27;</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><ol>
<li>可以通过修改HISTDIR来调整保存目录</li>
<li>HISTORY_FILE文件必须有o+w权限，不然普通用户没法记录命令 </li>
<li>最安全再加一个特殊权限 chattr +a /usr/share/.history/2018-11-05.log</li>
</ol>
]]></content>
      <categories>
        <category>系统调优</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql二进制日志恢复</title>
    <url>/70b491cf.html</url>
    <content><![CDATA[<h3 id="二进制日志导出"><a href="#二进制日志导出" class="headerlink" title="二进制日志导出"></a>二进制日志导出</h3><ol>
<li>按时间节点导出</li>
</ol>
<blockquote>
<p> –no-defaults 用来对mysql5.5之前mysqlbinlog命令报错</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqlbinlog --no-defaults --start-date=<span class="string">&quot;2017-08-08 15:04:04&quot;</span> --stop-date=<span class="string">&quot;2017-08-08 15:12:00&quot;</span> /program/mysql1/mysql-bin.000001</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>按pos节点导出</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqlbinlog --no-defaults mysql-bin.000003 --start-position=<span class="string">&quot;622&quot;</span> --stop-position=<span class="string">&quot;712&quot;</span> &gt;xx.sql</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>按pos节点只导出某个库</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqlbinlog --no-defaults --database=库名 --start-position=4 --stop-position=98 mysql-bin.000001 &gt; test.sql</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>多个二进制日志导出</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqlbinlog --database=<span class="built_in">test</span> /opt/data/APP01bin.000001 /opt/data/APP01bin.000002 &gt;test.sql </span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="二进制日志类型"><a href="#二进制日志类型" class="headerlink" title="二进制日志类型"></a>二进制日志类型</h3><blockquote>
<p>mysql binlog的3种格式，row,mixed,statement.</p>
</blockquote>
<p>如果binlog是row模式，需要加上以下两个参数：</p>
<p>–base64-output=DECODE-ROWS： 会显示出row模式带来的sql变更。</p>
<p>-v ：显示statement模式带来的sql语句</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqlbinlog –no-defaults –v –v –base64-output=decode-rows mysql-bin.0000001 &gt;bin.sql</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>binlog恢复</tag>
      </tags>
  </entry>
  <entry>
    <title>NFS安装使用</title>
    <url>/aa512fbf.html</url>
    <content><![CDATA[<h4 id="NFS安装"><a href="#NFS安装" class="headerlink" title="NFS安装"></a>NFS安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install nfs* rpcbind -y</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;/ssf *(rw,no_root_squash,no_all_squash,sync)&quot;</span> &gt;&gt;/etc/exports</span><br><span class="line">service rpcbind start</span><br><span class="line">service nfs start </span><br><span class="line">chmod 766 /ssf</span><br></pre></td></tr></table></figure>

<h4 id="配置文件详解"><a href="#配置文件详解" class="headerlink" title="配置文件详解"></a>配置文件详解</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;exports </span><br><span class="line">&#x2F;data&#x2F;lys 192.168.2.0&#x2F;24(rw,no_root_squash,no_all_squash,sync)</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="常见的参数"><a href="#常见的参数" class="headerlink" title="常见的参数"></a>常见的参数</h4><ul>
<li><p>rw/ro 权限是读写或只读 (read-only)，但最终能不能读写，还是与文件系统的 rwx 及身份有关。</p>
</li>
<li><p>sync/async sync代表数据会同步写入到内存与硬盘中，async 则代表数据会先暂存于内存当中，而非直接写入硬盘！</p>
</li>
<li><p>no_root_squash/root_squash 客户端使用 NFS 文件系统的账号若为 root 时，系统该如何判断这个账号的身份？预设的情况下，客户端 root 的身份会由 root_squash 的设定压缩成 nfsnobody， 如此对服务器的系统会较有保障。但如果你想要开放客户端使用 root 身份来操作服务器的文件系统，那么这里就得要开 no_root_squash 才行！</p>
</li>
<li><p>all_squash 不论登入 NFS 的使用者身份为何， 他的身份都会被压缩成为匿名用户，通常也就是 nobody(nfsnobody) 啦！</p>
</li>
<li><p>anonuid　anongid  anon 意指 anonymous (匿名者) 前面关于 *_squash 提到的匿名用户的 UID 设定值，通常为 nobody(nfsnobody)，但是你可以自行设定这个 UID 的值！当然，这个 UID 必需要存在于你的 /etc/passwd 当中！ anonuid 指的是 UID 而 anongid 则是群组的 GID 啰。</p>
</li>
</ul>
<h4 id="客户端使用"><a href="#客户端使用" class="headerlink" title="客户端使用"></a>客户端使用</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install nfs-utils -y</span><br><span class="line">showmount -e ip地址 查看server共享的目录</span><br><span class="line">mount -t nfs 192.168.246.130:/ssf /mnt <span class="comment">#挂载nfs存储</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux基础服务</category>
      </categories>
      <tags>
        <tag>NFS</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell并发编程</title>
    <url>/ebb1f950.html</url>
    <content><![CDATA[<h4 id="案例1-通过文件描述符控制并发数"><a href="#案例1-通过文件描述符控制并发数" class="headerlink" title="案例1 通过文件描述符控制并发数"></a>案例1 通过文件描述符控制并发数</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#用fifo处理shell下多进程并发：</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#author : vaedit</span></span><br><span class="line"><span class="comment">#date : 2017-8-15</span></span><br><span class="line"><span class="comment">#需要执行的工作函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">mima</span></span>()&#123;</span><br><span class="line">  openssl rand -base64 40 &gt;&gt; ssf.txt</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#判断是否存在fifo文件</span></span><br><span class="line"><span class="keyword">if</span>  [ -e /tmp/$$.fifo ];<span class="keyword">then</span></span><br><span class="line">  rm -rf /tmp/$$.fifo</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment">#创建$$.fifo 主要是为了防止同名</span></span><br><span class="line">fifo_file=/tmp/$$.fifo</span><br><span class="line">mkfifo <span class="variable">$fifo_file</span></span><br><span class="line"><span class="comment">#把文件表述符fd6和fifo文件绑定</span></span><br><span class="line"><span class="built_in">exec</span> 6&lt;&gt;<span class="string">&quot;<span class="variable">$fifo_file</span>&quot;</span></span><br><span class="line">process_num=10</span><br><span class="line"><span class="comment">#向fd6中输入10个回车</span></span><br><span class="line"><span class="keyword">for</span> ((i=0;i&lt;<span class="variable">$process_num</span>;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> </span><br><span class="line"><span class="keyword">done</span> &gt;&amp;6</span><br><span class="line"><span class="comment">#处理业务</span></span><br><span class="line"><span class="keyword">for</span> ((a=0;a&lt;10;a++))  <span class="comment">#这里写10表示业务总条数，比如业务总共要执行100次，就填100</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">read</span> -u6 <span class="comment">##read -u6命令执行一次，相当于尝试从fd6中获取一行，如果获取不到，则阻塞#获取到了一行后，fd6就少了一行了，开始处理子进程，子进程放在后台执行</span></span><br><span class="line">  &#123;</span><br><span class="line">  mima</span><br><span class="line">  sleep 3  <span class="comment"># 暂停3秒，这里是关键点，其实引入管道模拟多线程的关键就是为了这个暂停的3秒（实际上是微大于3秒的），让系统有个缓冲的时间，起到限制所谓并发的进程数量。</span></span><br><span class="line">  <span class="built_in">echo</span> &gt;&amp;6  <span class="comment">#表示向fd6中输入一行，补充刚才消耗的</span></span><br><span class="line">  &#125; &amp;</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">wait</span> <span class="comment">#等待所有的后台子进程结束</span></span><br><span class="line"><span class="comment">#关闭fd6</span></span><br><span class="line"><span class="built_in">exec</span> 6&gt;&amp;-</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="案例2-通过xargs命令实现多线程并发"><a href="#案例2-通过xargs命令实现多线程并发" class="headerlink" title="案例2 通过xargs命令实现多线程并发"></a>案例2 通过xargs命令实现多线程并发</h4><h5 id="xargs命令解析"><a href="#xargs命令解析" class="headerlink" title="xargs命令解析"></a>xargs命令解析</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-0：如果输入的stdin含有特殊字符，例如反引号&#96;、反斜杠\、空格等字符时，xargs可以将它还原成一般字符。为xargs的默认选项。</span><br><span class="line">-e &lt;flag&gt;,-E &lt;flag&gt;,--eof&#x3D;&lt;eof-str&gt;：eof是end of file string的意思。flag可以是一个字符串或者是由空格分隔的多个字符串，当xargs分析到这个flag时，就会停止工作。</span><br><span class="line">-p：当每次执行一个argument的时候询问一次用户。</span><br><span class="line">-n &lt;num&gt;：表示命令在执行的时候一次使用的argument的个数，由num指定，默认是用所有的参数。</span><br><span class="line">-t：表示先打印命令，然后再执行。</span><br><span class="line">-a &lt;file&gt;:从文件中读入作为sdtin。</span><br><span class="line">-i,-I：其中-I某些Linux版本不支持。将xargs的输出每一项参数，单独赋值给后面的命令，参数需要用&#123;&#125;代替。</span><br><span class="line">-r:或者--no-run-if-empty,当xargs的输入为空的时候则停止xargs，不用再去执行后面的命令了，-r是xargs的默认选项。</span><br><span class="line">-s &lt;num&gt;:命令行的最大字符数，指的是xargs后面那个命令的最大命令行字符数,包括命令、空格和换行符。每个参数单独传入xargs后面的命令。</span><br><span class="line">-L &lt;line_num&gt;：设置标准输入中最大的行数作为命令每一次执行的参数。</span><br><span class="line">-d &lt;delim&gt;, --delimiter&#x3D;&lt;delim&gt;: xargs处理标准输入默认是按换行符和空格作为分隔符，输出arguments的分隔符是空格，这里修改xargs处理标准输入时的分隔符。</span><br><span class="line">-x：eXit的意思，主要是配合-s使用，当命令行字符数大于-s指定的数值时，退出xargs。</span><br><span class="line">-P：修改最大的进程数，默认是1，为0时候为as many as it can。</span><br></pre></td></tr></table></figure>

<h5 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#/bin/bash</span></span><br><span class="line">all_num=10</span><br><span class="line">thread_num=5</span><br><span class="line">a=$(date +%H%M%S)</span><br><span class="line">seq 1 <span class="variable">$&#123;all_num&#125;</span> | xargs -n 1 -I &#123;&#125; -P <span class="variable">$&#123;thread_num&#125;</span> sh -c <span class="string">&quot;sleep 1;echo &#123;&#125;&quot;</span></span><br><span class="line">b=$(date +%H%M%S)</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;startTime:\t<span class="variable">$a</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;endTime:\t<span class="variable">$b</span>&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#通过seq 1 20 组合出一组以换行或者空格组成的数据，从而来控制总共需要执行后面脚本的次数，工作中使用，可以预先把需要的数据格式处理好，如</span></span><br><span class="line">vim name.txt</span><br><span class="line">ssf 11</span><br><span class="line">vaedit 12</span><br><span class="line">zhangsan 13</span><br><span class="line"><span class="comment">#然后通过-n 来控制传递给sh test.sh 的参数个数，如上test.sh 执行一次需要用到2个参数，名字和年龄就需要指定-n 2, 示例：cat name.txt | xargs -n 2 -P 10 sh test.sh</span></span><br><span class="line"></span><br><span class="line">seq 1 20 |xargs -n 1 -P 10 sh test.sh</span><br><span class="line"></span><br><span class="line">cat test.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$1</span></span><br><span class="line">sleep 2</span><br></pre></td></tr></table></figure>

<h5 id="实例3"><a href="#实例3" class="headerlink" title="实例3"></a>实例3</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#该用法只适合只有一个参数需要传递给test.sh的情况下</span></span><br><span class="line">seq 1 20 |xargs -i -P 10 sh test.sh &#123;&#125;</span><br><span class="line">seq 1 20 |xargs -I &#123;&#125; -P 10 sh test.sh &#123;&#125; <span class="comment">#和上面意思一样，只是-i和-I的用法区别</span></span><br><span class="line"></span><br><span class="line">cat test.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$1</span></span><br><span class="line">sleep 2</span><br></pre></td></tr></table></figure>

<h4 id="案例3-使用GNU-parallel命令控制并发数"><a href="#案例3-使用GNU-parallel命令控制并发数" class="headerlink" title="案例3 使用GNU parallel命令控制并发数"></a>案例3 使用GNU parallel命令控制并发数</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装</span></span><br><span class="line">yum install epel-release -y</span><br><span class="line">yum install parallel -y</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;will cite\n&quot;</span> | parallel --bibtex</span><br><span class="line"></span><br><span class="line">parallel -j 5 <span class="string">&quot;sleep 1;echo &#123;&#125;&quot;</span> ::: `seq 1 10`</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例1</span></span><br><span class="line"><span class="comment">#用法和xargs很像</span></span><br><span class="line">find . -name <span class="string">&quot;*jpeg&quot;</span> | parallel -I% --max-args 1 convert % %.png</span><br><span class="line"></span><br><span class="line">这是两条命令的组合：find 命令，用于收集需要操作的对象；parallel 命令，用于对象排序并确保每个对象按需处理。</span><br><span class="line">find . -name <span class="string">&quot;*jpeg&quot;</span> 查找当前目录下以 jpeg 结尾的所有文件。</span><br><span class="line">parallel 调用 GNU Parallel。</span><br><span class="line">-I% 创建了一个占位符 %，代表 find 传递给 Parallel 的内容。如果不使用占位符，你需要对 find 命令的每一个结果手动编写一个命令，而这恰恰是你想要避免的。</span><br><span class="line">--max-args 1 给出 Parallel 从队列获取新对象的速率限制。考虑到 Parallel 运行的命令只需要一个文件输入，这里将速率限制设置为 1。假如你需要执行更复杂的命令，需要两个文件输入（例如 cat 001.txt 002.txt &gt; new.txt），你需要将速率限制设置为 2。</span><br><span class="line">convert % %.png 是你希望 Parallel 执行的命令。</span><br><span class="line">管道输出的每一行对应 parallel 的一个参数，所有参数构成参数行</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例2</span></span><br><span class="line">ls -1 | parallel --max-args=2 cat &#123;1&#125; &#123;2&#125; <span class="string">&quot;&gt;&quot;</span> &#123;1&#125;_&#123;2&#125;.person</span><br><span class="line"><span class="comment">#把当前目录下的第一个和第二个文件中得内容合并写入到新的文件中，其中&#123;1&#125;，&#123;2&#125; ，代表管道传入的第一个参数和第二个参数，参数已行分割</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#这里介绍下&#123;&#125;用法</span></span><br><span class="line">&#123;.&#125; 表示去掉文件.后缀</span><br><span class="line">&#123;\&#125; 表示去掉文件目录相当于basename</span><br><span class="line">&#123;\\&#125; 去掉第一层目录后，剩下的目录</span><br><span class="line">&#123;\.&#125; 表示去掉文件目录后，把文件名的.后缀去掉</span><br><span class="line">&#123;<span class="comment">#&#125; 表示并发进程的序列号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#常用参数</span></span><br><span class="line">--null 会把管道传入的每一行的参数通过空格合并到一行变成一个参数</span><br><span class="line">::: 后面表示要传入的参数，可以用这个替代管道符传入参数，还是按行分割</span><br><span class="line">-L 每次读取的参数行数</span><br><span class="line"><span class="comment">#示例3</span></span><br><span class="line"><span class="comment">#首先，需要创建一个文本文件，每行包含一个命令：</span></span><br><span class="line">cat jobs2run</span><br><span class="line">bzip2 oldstuff.tar</span><br><span class="line">oggenc music.flac</span><br><span class="line">opusenc ambiance.wav</span><br><span class="line">convert bigfile.tiff small.jpeg</span><br><span class="line">ffmepg -i foo.avi -v:b 12000k foo.mp4</span><br><span class="line">xsltproc --output build/tmp.fo style/dm.xsl src/tmp.xml</span><br><span class="line">bzip2 archive.tar</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行</span></span><br><span class="line">parallel --<span class="built_in">jobs</span> 6 &lt; jobs2run </span><br><span class="line"><span class="comment">#现在文件中对应的全部任务都在被 Parallel 执行。如果任务数量超过允许的数目（LCTT 译注：应该是 --jobs/-j 指定的数目或默认值,也就是并发数,如过不指定-j,就尽可能使用和cpu一样的并发数），Parallel 会创建并维护一个队列，直到任务全部完成。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#示例4</span></span><br><span class="line"><span class="comment">#现实使用中可以把参数按照行的形式先写入文本中如name.txt 然后在脚本中调用</span></span><br><span class="line">cat name.txt</span><br><span class="line">vaedit 11</span><br><span class="line">vaedit1 22</span><br><span class="line">vaedit2 33</span><br><span class="line">vaedit3 44</span><br><span class="line"></span><br><span class="line">cat name.txt |parallel -j 2 --max-args=1 sh test.sh &#123;1&#125; <span class="comment">#这里parallel还是把每行参数当成一个参数来执行，所以如果我们要识别名字（vaedit）和 年龄（11）,可以在test.sh中处理</span></span><br><span class="line"></span><br><span class="line">cat test.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">a=<span class="variable">$1</span></span><br><span class="line">a1=`<span class="built_in">echo</span> <span class="variable">$a</span>|awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>`</span><br><span class="line">a2=`<span class="built_in">echo</span> <span class="variable">$a</span>|awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;名字是 <span class="variable">$a1</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;年龄是 <span class="variable">$a2</span>&quot;</span></span><br><span class="line">sleep 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#案例4</span></span><br><span class="line">cat bigfile.txt | parallel --block 10M --pipe grep <span class="string">&#x27;pattern&#x27;</span> <span class="comment">#pipe意思是直接把输入当成后面命令的标准输入而不是参数</span></span><br><span class="line"><span class="comment"># --block 每个job，进程只读取的文件大小</span></span><br><span class="line"><span class="comment"># -L 每次读取的行数</span></span><br><span class="line"><span class="comment">#-N 每个job，也就是进程只读取多少行</span></span><br><span class="line"></span><br><span class="line">cat num1000000 | parallel --pipe --block 2M wc -l</span><br><span class="line">cat bigfile.txt | parallel  --pipe wc -l | awk <span class="string">&#x27;&#123;s+=$1&#125; END &#123;print s&#125;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Shell脚本</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Vsftpd服务</title>
    <url>/6900bf65.html</url>
    <content><![CDATA[<h3 id="安装vsftpd"><a href="#安装vsftpd" class="headerlink" title="安装vsftpd"></a>安装vsftpd</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install vsftpd -y</span><br></pre></td></tr></table></figure>

<h4 id="系统认证"><a href="#系统认证" class="headerlink" title="系统认证"></a>系统认证</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/vsftpd/vsftpd.conf</span><br><span class="line">[root@localhost pub]<span class="comment"># egrep -v &quot;#|^$&quot; /etc/vsftpd/vsftpd.conf </span></span><br><span class="line">anonymous_enable=NO</span><br><span class="line">local_enable=YES</span><br><span class="line">write_enable=YES</span><br><span class="line">local_umask=022</span><br><span class="line">dirmessage_enable=YES</span><br><span class="line">xferlog_enable=YES</span><br><span class="line">connect_from_port_20=YES</span><br><span class="line">xferlog_file=/var/<span class="built_in">log</span>/xferlog</span><br><span class="line">xferlog_std_format=YES</span><br><span class="line">chroot_list_enable=YES</span><br><span class="line">chroot_list_file=/etc/vsftpd/chroot_list</span><br><span class="line">listen=YES</span><br><span class="line">pam_service_name=vsftpd</span><br><span class="line">userlist_enable=YES</span><br><span class="line">tcp_wrappers=YES</span><br><span class="line"><span class="comment">#启动服务</span></span><br><span class="line">service vsftpd start</span><br><span class="line"><span class="comment">#创建用户 </span></span><br><span class="line">useradd -s /sbin/nologin backup</span><br><span class="line">passwd backup <span class="comment">#设置密码</span></span><br><span class="line">touch /etc/vsftpd/chroot_list</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="虚拟用户"><a href="#虚拟用户" class="headerlink" title="虚拟用户"></a>虚拟用户</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install db4 db4-utils <span class="comment">#进行认证首先，安装Berkeley DB工具，很多人找不到db_load的问题就是没有安装这个包</span></span><br><span class="line"><span class="comment">#更改配置文件</span></span><br><span class="line">vi /etc/vsftpd/vsftpd.conf</span><br><span class="line">anonymous_enable=NO</span><br><span class="line">local_enable=YES</span><br><span class="line">write_enable=YES</span><br><span class="line">local_umask=022</span><br><span class="line">dirmessage_enable=YES</span><br><span class="line">xferlog_enable=YES</span><br><span class="line">connect_from_port_20=YES</span><br><span class="line">xferlog_file=/var/<span class="built_in">log</span>/xferlog</span><br><span class="line">xferlog_std_format=YES</span><br><span class="line">ascii_upload_enable=YES</span><br><span class="line">ascii_download_enable=YES</span><br><span class="line">chroot_list_enable=YES  <span class="comment">#开启限制在家目录内</span></span><br><span class="line">chroot_list_file=/etc/vsftpd/chroot_list <span class="comment">#限制名单文件路径</span></span><br><span class="line">listen=YES <span class="comment"># 开启监听</span></span><br><span class="line">pam_service_name=vsftpd  <span class="comment"># 使用pam认证模块</span></span><br><span class="line">userlist_enable=YES  <span class="comment"># 禁止用户登录名单</span></span><br><span class="line">tcp_wrappers=YES</span><br><span class="line">guest_enable=YES   <span class="comment">#开启虚拟用户</span></span><br><span class="line">guest_username=ftp  <span class="comment">#指定虚拟用户映射到本地的用户//指定虚拟用户的宿主用户，CentOS中已经有内置的ftp用户了 这里的用户也可以用//useradd vsftpuser -s /sbin/nologin -M自行创建</span></span><br><span class="line">user_config_dir=/etc/vsftpd/vuser_conf  <span class="comment">#指定虚拟用户自定义配置文件路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建用户密码本</span></span><br><span class="line">vim /etc/vsftpd/vuser_passwd.txt</span><br><span class="line">backup <span class="comment">#user</span></span><br><span class="line">123456 <span class="comment">#passwd</span></span><br><span class="line"><span class="comment">#生成虚拟用户认证的db文件</span></span><br><span class="line">db_load -T -t <span class="built_in">hash</span> -f /etc/vsftpd/vuser_passwd.txt /etc/vsftpd/vuser_passwd.db</span><br><span class="line"></span><br><span class="line">vim /etc/pam.d/vsftpd</span><br><span class="line"><span class="comment">#全部注释，添加以下两行</span></span><br><span class="line">auth required /lib64/security/pam_userdb.so db=/etc/vsftpd/vuser_passwd</span><br><span class="line">account required /lib64/security/pam_userdb.so db=/etc/vsftpd/vuser_passwd</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建虚拟用户配置文件</span></span><br><span class="line">mkdir /etc/vsftpd/vuser_conf <span class="comment">#vsftpd.conf 里面指定的路径</span></span><br><span class="line">vim /etc/vsftpd/vuser_conf/backup  <span class="comment">#这里文件名必须要和之前创建的vuser_passwd.txt中虚拟用户名一一对应</span></span><br><span class="line">local_root=/databak/data   <span class="comment">#指定他的主目录</span></span><br><span class="line">write_enable=YES   <span class="comment">#开启写</span></span><br><span class="line">anon_umask=022   <span class="comment">#匿名umask码</span></span><br><span class="line">anon_world_readable_only=NO</span><br><span class="line">anon_upload_enable=YES</span><br><span class="line">anon_mkdir_write_enable=YES</span><br><span class="line">anon_other_write_enable=YES</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建虚拟用户的指定用户主目录（上传目录）</span></span><br><span class="line">mkdir /databak/data -p</span><br><span class="line">chmod 755 /databak  <span class="comment">#最新的vsftpd要求对主目录不能有写的权限所以ftp为755，主目录下面的子目录再设置757权限</span></span><br><span class="line">chmod 757 /databak/data</span><br><span class="line"></span><br><span class="line">service vsftpd restart</span><br></pre></td></tr></table></figure>

<h4 id="服务端脚本安装"><a href="#服务端脚本安装" class="headerlink" title="服务端脚本安装"></a>服务端脚本安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#author:vaedit</span></span><br><span class="line"><span class="comment">#date:2017/11/14</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输出用户名&quot;</span> name</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;请输入密码&quot;</span> password</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&#x27;\033[32;40;1m开始安装\033[0m&#x27;</span></span><br><span class="line">yum install vsftpd db4 db4-utils -y</span><br><span class="line">useradd -s /sbin/nologin  ftpuser</span><br><span class="line">mv /etc/vsftpd/vsftpd.conf&#123;,.bak&#125;</span><br><span class="line"><span class="comment">#创建配置文件</span></span><br><span class="line">cat&gt;/etc/vsftpd/vsftpd.conf &lt;&lt;EOF</span><br><span class="line">anonymous_enable=NO</span><br><span class="line">local_enable=YES</span><br><span class="line">write_enable=YES</span><br><span class="line">local_umask=022</span><br><span class="line">dirmessage_enable=YES</span><br><span class="line">xferlog_enable=YES</span><br><span class="line">connect_from_port_20=YES</span><br><span class="line">xferlog_file=/var/<span class="built_in">log</span>/xferlog</span><br><span class="line">xferlog_std_format=YES</span><br><span class="line">userlist_enable=YES</span><br><span class="line">chroot_list_enable=YES</span><br><span class="line">chroot_local_user=YES</span><br><span class="line">chroot_list_file=/etc/vsftpd/chroot_list</span><br><span class="line">listen=YES</span><br><span class="line">pam_service_name=vsftpd</span><br><span class="line">tcp_wrappers=YES</span><br><span class="line">guest_enable=YES</span><br><span class="line">guest_username=ftpuser</span><br><span class="line">user_config_dir=/etc/vsftpd/vuser_conf</span><br><span class="line">virtual_use_local_privs=YES</span><br><span class="line">EOF</span><br><span class="line">touch /etc/vsftpd/chroot_list</span><br><span class="line"><span class="comment">#创建账户密码文件</span></span><br><span class="line">cat&gt;/etc/vsftpd/vuser_passwd.txt&lt;&lt;EOF</span><br><span class="line"><span class="variable">$name</span></span><br><span class="line"><span class="variable">$password</span></span><br><span class="line">EOF</span><br><span class="line">db_load -T -t <span class="built_in">hash</span> -f /etc/vsftpd/vuser_passwd.txt /etc/vsftpd/vuser_passwd.db</span><br><span class="line">chmod 700 /etc/vsftpd/vuser_passwd.db</span><br><span class="line">cat&gt;/etc/pam.d/vsftpd&lt;&lt;EOF</span><br><span class="line">auth required /lib64/security/pam_userdb.so db=/etc/vsftpd/vuser_passwd</span><br><span class="line">account required /lib64/security/pam_userdb.so db=/etc/vsftpd/vuser_passwd</span><br><span class="line">EOF</span><br><span class="line"><span class="comment">#创建虚拟用户配置文件</span></span><br><span class="line">mkdir /etc/vsftpd/vuser_conf -p</span><br><span class="line">cat&gt;/etc/vsftpd/vuser_conf/<span class="variable">$name</span>&lt;&lt;EOF</span><br><span class="line">local_root=/data/ftp_<span class="variable">$name</span></span><br><span class="line">write_enable=YES</span><br><span class="line">anon_world_readable_only=YES</span><br><span class="line">anon_upload_enable=YES</span><br><span class="line">anon_mkdir_write_enable=YES</span><br><span class="line">anon_other_write_enable=YES</span><br><span class="line">EOF</span><br><span class="line">mkdir /data/ftp_<span class="variable">$name</span> -p</span><br><span class="line">chown ftpuser.ftpuser /data/ftp_<span class="variable">$name</span> -R</span><br><span class="line">setenforce 0</span><br><span class="line">service vsftpd start</span><br><span class="line">ps -ef|grep vsftpd</span><br><span class="line">netstat -ntulp|grep <span class="string">&quot;:21&quot;</span></span><br></pre></td></tr></table></figure>


<h4 id="配置文件注意点"><a href="#配置文件注意点" class="headerlink" title="配置文件注意点"></a>配置文件注意点</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#chroot控制</span><br><span class="line">1）当chroot_list_enable&#x3D;YES，chroot_local_user&#x3D;YES时，在&#x2F;etc&#x2F;vsftpd&#x2F;chroot_list文件中列出的用户，可以切换到上级目录；未在文件中列出的用户，不能切换到站点根目录的上级目录。</span><br><span class="line">2）当chroot_list_enable&#x3D;YES，chroot_local_user&#x3D;NO时，在&#x2F;etc&#x2F;vsftpd&#x2F;chroot_list文件中列出的用户，不能切换到站点根目录的上级目录；未在文件中列出的用户，可以切换到上级目录。</span><br><span class="line">3）当chroot_list_enable&#x3D;NO，chroot_local_user&#x3D;YES时，所有用户均不能切换到上级目录。</span><br><span class="line">4）当chroot_list_enable&#x3D;NO，chroot_local_user&#x3D;NO时，所有用户均可以切换到上级目录。</span><br><span class="line">#访问控制</span><br><span class="line">对用户的访问控制由&#x2F;etc&#x2F;vsftpd&#x2F;user_list和&#x2F;etc&#x2F;vsftpd&#x2F;ftpusers文件来控制实现。相关配置命令如下：</span><br><span class="line">userlist_enable&#x3D;YES</span><br><span class="line">&#x2F;&#x2F; 决定&#x2F;etc&#x2F;vsftpd&#x2F;user_list文件是否启用生效。YES则生效，NO不生效。</span><br><span class="line">userlist_deny&#x3D;YES</span><br><span class="line">&#x2F;&#x2F; 决定&#x2F;etc&#x2F;vsftpd&#x2F;user_list文件中的用户是允许访问还是不允许访问。若设置为YES，则&#x2F;etc&#x2F;vsftpd&#x2F;user_list 文件中的用户将不允许访问FTP服务器；若设置为NO，则只有vsftpd.user_list文件中的用户，才能访问FTP服务器。</span><br></pre></td></tr></table></figure>

<h4 id="客户端好用的命令行工具ncftp安装使用"><a href="#客户端好用的命令行工具ncftp安装使用" class="headerlink" title="客户端好用的命令行工具ncftp安装使用"></a>客户端好用的命令行工具ncftp安装使用</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install ncftp -y</span><br><span class="line"><span class="comment">#源码安装：</span></span><br><span class="line">tar zxvf ncftp-3.2.3-src.tar.gz </span><br><span class="line"><span class="built_in">cd</span> ncftp-3.2.3/ </span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/ncftp </span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"><span class="comment">#参数</span></span><br><span class="line">-u：指定登录FTP服务器时使用的用户名； </span><br><span class="line">-p：指定登录FTP服务器时使用的密码； </span><br><span class="line">-P：如果FTP服务器没有使用默认的TCP协议的21端口，则使用此选项指定FTP服务器的端口号。 </span><br><span class="line">-m：在传之前尝试在目录位置创建目录(用于传目录的情况) </span><br><span class="line">-E: 使用主动模式</span><br><span class="line">-R：递规传子目录</span><br><span class="line"><span class="comment">#用法</span></span><br><span class="line"><span class="comment">#将本地/root/ssf 文件拷贝到远程ftp的根目录</span></span><br><span class="line">ncftpput -u backup -p 123456 192.168.246.128 . /root/ssf</span><br><span class="line"></span><br><span class="line"><span class="comment">#常用操作命令</span></span><br><span class="line">lls: 列出本地当前目录文件； </span><br><span class="line">lmkdir : 本地建立目录； </span><br><span class="line">lrename: 本地文件改名； </span><br><span class="line">lpwd: 显示当前本地路径；</span><br><span class="line">lchmod: 改变本地文件权限； </span><br><span class="line">lpage: 显示本地文件内容； </span><br><span class="line">lrm: 删除本地文件； </span><br><span class="line">lrmdir: 删除本地目录。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux基础服务</category>
      </categories>
      <tags>
        <tag>ftp</tag>
      </tags>
  </entry>
  <entry>
    <title>Xtrabackup</title>
    <url>/a9809da0.html</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote>
<p>官方文档地址：<a href="https://www.percona.com/doc/percona-xtrabackup/2.4/">https://www.percona.com/doc/percona-xtrabackup/2.4/</a></p>
</blockquote>
<h3 id="yum源安装"><a href="#yum源安装" class="headerlink" title="yum源安装"></a>yum源安装</h3><ol>
<li>安装Percona源</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install https://repo.percona.com/yum/percona-release-latest.noarch.rpm -y</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>安装包</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install epel-release -y</span><br><span class="line">yum install percona-xtrabackup-24 -y</span><br><span class="line">yum install qpress -y <span class="comment">#压缩备份需要</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="源码编译安装"><a href="#源码编译安装" class="headerlink" title="源码编译安装"></a>源码编译安装</h3><ol>
<li>从github获取源码</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/percona/percona-xtrabackup.git </span><br><span class="line"><span class="built_in">cd</span> percona-xtrabackup </span><br><span class="line">git checkout 2.4</span><br></pre></td></tr></table></figure>

<p>然后，您应该有一个以您分支的版本命名的目录，例如 <code>percona-xtrabackup</code>。</p>
<ol start="2">
<li>编译安装</li>
</ol>
<ul>
<li>先安装依赖</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install cmake gcc gcc-c++ libaio libaio-devel automake autoconf \ </span><br><span class="line">bison libtool ncurses-devel libgcrypt-devel libev-devel libcurl-devel \ </span><br><span class="line">vim-common</span><br></pre></td></tr></table></figure>

<ul>
<li>编译安装</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmake -DBUILD_CONFIG = xtrabackup_release -DWITH_MAN_PAGES=OFF &amp;&amp; make -j4</span><br><span class="line">make install <span class="comment">#默认安装/usr/local/xtrabackup</span></span><br></pre></td></tr></table></figure>

<h3 id="二进制包安装"><a href="#二进制包安装" class="headerlink" title="二进制包安装"></a>二进制包安装</h3><p>1.下载2进制包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://www.percona.com/downloads/Percona-XtraBackup-2.4/Percona-XtraBackup-2.4.9/binary/tarball/percona-xtrabackup-2.4.9-Linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure>

<p>2.安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install numactl -y</span><br><span class="line">tar xf percona-xtrabackup-2.4.9-Linux-x86_64.tar.gz -C /usr/<span class="built_in">local</span>/</span><br><span class="line">mv /usr/<span class="built_in">local</span>/percona-xtrabackup-2.4.9-Linux-x86_64/ /usr/<span class="built_in">local</span>/xtrabackup</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=$PATH:/usr/local/xtrabackup/bin&#x27;</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>



<h2 id="创建备份用户"><a href="#创建备份用户" class="headerlink" title="创建备份用户"></a>创建备份用户</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create user &#39;bak&#39;@&#39;localhost&#39; identified by &#39;bak&#39;;</span><br><span class="line">grant reload,lock tables,replication client,process,super on *.* to &#39;bak&#39;@&#39;localhost&#39;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<h2 id="配置Xtrabackup"><a href="#配置Xtrabackup" class="headerlink" title="配置Xtrabackup"></a>配置Xtrabackup</h2><p>xtrabackup读取配置文件信息在my.cnf的[mysqld]和[xtrabackup]中，如果需要配置xtrabackup的配置只需要在</p>
<p>[xtrabackup]下配置，例如配置默认target_dir</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[xtrabackup]</span><br><span class="line">target_dir &#x3D; &#x2F;data&#x2F;backups&#x2F;mysql&#x2F;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="备份与恢复"><a href="#备份与恢复" class="headerlink" title="备份与恢复"></a>备份与恢复</h2><h3 id="完全备份"><a href="#完全备份" class="headerlink" title="完全备份"></a>完全备份</h3><h4 id="创建一次全备"><a href="#创建一次全备" class="headerlink" title="创建一次全备"></a>创建一次全备</h4><blockquote>
<p>2.4之后版本innobackpex将被弃用，所以后续都用xtrabackup</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup -H 127.0.0.1 -ubak -pbak -P 3306 --backup --target-dir=/data/backups/</span><br></pre></td></tr></table></figure>

<h4 id="准备备份文件"><a href="#准备备份文件" class="headerlink" title="准备备份文件"></a>准备备份文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup --prepare --target-dir=/data/backups/</span><br></pre></td></tr></table></figure>

<h4 id="恢复备份到datadir"><a href="#恢复备份到datadir" class="headerlink" title="恢复备份到datadir"></a>恢复备份到datadir</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup --copy-back --target-dir=/data/backups/</span><br></pre></td></tr></table></figure>

<p>如果你不想保存备份，可以使用–move-back</p>
<blockquote>
<p>在恢复备份之前，datadir必须为空。另外需要注意的是，在执行恢复之前需要关闭MySQL服务器。您无法还原到正在运行的mysqld实例的datadir（导入部分备份时除外）。</p>
</blockquote>
<p>还可以直接拷贝或者通过rsync来还原备份</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rsync -avrP /data/backup/ /var/lib/mysql/</span><br><span class="line">chown -R mysql:mysql /var/lib/mysql</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="增量备份"><a href="#增量备份" class="headerlink" title="增量备份"></a>增量备份</h3><h4 id="创建一次全备-1"><a href="#创建一次全备-1" class="headerlink" title="创建一次全备"></a>创建一次全备</h4><blockquote>
<p>备份目录上一级目录必须存在，佛则报错</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup -H 127.0.0.1 -ubak -pbak -P 3306 --backup --target-dir=/data/backups/base</span><br></pre></td></tr></table></figure>

<p>备份会在xtrabackup_checkpoints文件中记录LSN和备份方式信息</p>
<h4 id="基于全备的第一次增量备份"><a href="#基于全备的第一次增量备份" class="headerlink" title="基于全备的第一次增量备份"></a>基于全备的第一次增量备份</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup -H 127.0.0.1 -ubak -pbak -P 3306 --backup --target-dir=/data/backups/inc1 \</span><br><span class="line">--incremental-basedir=/data/backups/base</span><br></pre></td></tr></table></figure>

<h4 id="基于全备的第二次增量备份"><a href="#基于全备的第二次增量备份" class="headerlink" title="基于全备的第二次增量备份"></a>基于全备的第二次增量备份</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup -H 127.0.0.1 -ubak -pbak -P 3306 --backup --target-dir=/data/backups/inc2 \</span><br><span class="line">--incremental-basedir=/data/backups/inc1</span><br></pre></td></tr></table></figure>

<h4 id="准备备份文件-1"><a href="#准备备份文件-1" class="headerlink" title="准备备份文件"></a>准备备份文件</h4><ol>
<li>先对全备做只提交不回滚</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup --prepare --apply-log-only --target-dir=/data/backups/base</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>把第一次增量备份应用于全备</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup --prepare --apply-log-only --target-dir=/data/backups/base \</span><br><span class="line">--incremental-dir=/data/backups/inc1</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>把第二次增量备份应用于已修改的全备（包含第一次增量备份数据）</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup --prepare --target-dir=/data/backups/base \</span><br><span class="line">--incremental-dir=/data/backups/inc2</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：除了最后一次增量备份应用于全备的操作，其余都需要加–apply-log-only,只提交，不回滚。</p>
</blockquote>
<ol start="4">
<li>再对全备做一次–prepare</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup --prepare --target-dir=/data/backups/base</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>恢复全备</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup --copy-back --target-dir=/data/backups/base</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="压缩备份"><a href="#压缩备份" class="headerlink" title="压缩备份"></a>压缩备份</h3><blockquote>
<p>要进行压缩备份，您需要使用 选项：–compress</p>
</blockquote>
<h4 id="创建压缩备份"><a href="#创建压缩备份" class="headerlink" title="创建压缩备份"></a>创建压缩备份</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup -H 127.0.0.1 -ubak -pbak -P 3306 --backup --compress --target-dir=/data/compressed/</span><br></pre></td></tr></table></figure>

<p>采用并行压缩加速压缩备份,采用4个压缩线程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup -H 127.0.0.1 -ubak -pbak -P 3306 --backup --compress --compress-threads=4 \</span><br><span class="line">--target-dir=/data/compressed/</span><br></pre></td></tr></table></figure>

<h4 id="准备备份文件-2"><a href="#准备备份文件-2" class="headerlink" title="准备备份文件"></a>准备备份文件</h4><p>在准备备份之前，您需要解压缩所有文件。 <em>Percona XtraBackup</em>实现了可用于解压缩备份的选项。xtrabackup –decompress</p>
<blockquote>
<p><em>Percona XtraBackup</em>不会自动删除压缩文件。要清理备份目录，您应该使用 选项。即使它们没有被删除，如果使用–copy-back,–rmove-back，这些文件也不会被复制/移动到datadir 。 –remove-original</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup --decompress --target-dir=/data/compressed/</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在继续之前，您需要确保已安装<a href="http://www.quicklz.com/">qpress</a>。它可从 Percona Software存储库获得 yum install qpress -y</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup --prepare --target-dir=/data/compressed/</span><br></pre></td></tr></table></figure>

<h4 id="恢复备份"><a href="#恢复备份" class="headerlink" title="恢复备份"></a>恢复备份</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup --copy-back --target-dir=/data/compressed/</span><br><span class="line">chown -R mysql:mysql /var/lib/mysql</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="加密备份"><a href="#加密备份" class="headerlink" title="加密备份"></a>加密备份</h3><blockquote>
<p><em>Percona XtraBackup</em>已实现对加密备份的支持。它可用于使用<a href="https://www.percona.com/doc/percona-xtrabackup/2.4/glossary.html#term-xbstream">xbstream</a>选项加密/解密本地或流式备份（不支持流式tar备份），以便为备份添加另一层保护。加密是通过<code>libgcrypt</code>库完成的。</p>
</blockquote>
<p>要进行加密备份，需要指定选项（选项 并且 是互斥的，即只需要提供其中一个）： </p>
<p>–encrypt-key</p>
<p>–encrypt-key-file</p>
<blockquote>
<ul>
<li><code>--encrypt=ALGORITHM</code>-目前支持的算法是： <code>AES128</code>，<code>AES192</code>和<code>AES256</code></li>
<li><code>--encrypt-key=ENCRYPTION_KEY</code> - 使用适当长度的加密密钥。如果命令行无法控制访问机器，则不建议使用此选项，因此可以将密钥视为流程信息的一部分。</li>
<li><code>--encrypt-key-file=KEYFILE</code> - 可以读取适当长度的原始密钥的文件的名称。该文件必须是一个简单的二进制（或文本）文件，其中包含要使用的密钥。</li>
</ul>
</blockquote>
<p>这两个选项， 可用于指定加密密钥:</p>
<p> –encrypt-key</p>
<p> –encrypt-key-file</p>
<p>可以使用以下命令生成加密密钥：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl rand -base64 24</span><br></pre></td></tr></table></figure>

<p>该命令的示例输出应如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GCHFLrDFVx6UAsRb88uLVbAVWbK+Yzfs</span><br></pre></td></tr></table></figure>

<p>然后，该值可用作加密密钥</p>
<p><strong>使用–encrypt-key选项</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup -H 127.0.0.1 -ubak -pbak -P 3306 --backup --target-dir=/data/backups --encrypt=AES256 \</span><br><span class="line">--encrypt-key=<span class="string">&quot;GCHFLrDFVx6UAsRb88uLVbAVWbK+Yzfs&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>使用–encrypt-key-file选项</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup -H 127.0.0.1 -ubak -pbak -P 3306 --backup --target-dir=/data/backups/ --encrypt=AES256 \</span><br><span class="line">--encrypt-key-file=/data/backups/keyfile</span><br></pre></td></tr></table></figure>

<h4 id="优化加密备份"><a href="#优化加密备份" class="headerlink" title="优化加密备份"></a>优化加密备份</h4><p>加密备份引入了两个选项，可用于加速加密过程</p>
<p> –encrypt-threads 指定多个线程并行地用于加密</p>
<p> –encrypt-chunk-size  用于指定每个加密线程的工作加密缓冲区的大小（以字节为单位）（默认为64K）</p>
<h4 id="解密加密备份"><a href="#解密加密备份" class="headerlink" title="解密加密备份"></a>解密加密备份</h4><blockquote>
<p>可用于解密备份： –decrypt</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup --decrypt=AES256 --encrypt-key=<span class="string">&quot;GCHFLrDFVx6UAsRb88uLVbAVWbK+Yzfs&quot;</span> \</span><br><span class="line">--target-dir=/data/backups/</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup --decrypt=AES256 --encrypt-key=<span class="string">&quot;GCHFLrDFVx6UAsRb88uLVbAVWbK+Yzfs&quot;</span> \</span><br><span class="line">--target-dir=/data/backups/ --remove-original</span><br></pre></td></tr></table></figure>

<h4 id="准备加密备份"><a href="#准备加密备份" class="headerlink" title="准备加密备份"></a>准备加密备份</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup --prepare --target-dir=/data/backups/</span><br></pre></td></tr></table></figure>

<h4 id="恢复加密备份"><a href="#恢复加密备份" class="headerlink" title="恢复加密备份"></a>恢复加密备份</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup --copy-back --target-dir=/data/backups/</span><br></pre></td></tr></table></figure>

<h3 id="部分备份"><a href="#部分备份" class="headerlink" title="部分备份"></a>部分备份</h3><blockquote>
<p><strong>xtrabackup</strong>支持在启用独立表空间innodb_file_per_table选项时进行部分备份 ，有三种方法</p>
<ol>
<li>将表名与正则表达式匹配</li>
<li>提供文件中的表名列表</li>
<li>提供数据库列表</li>
<li>该表必须是在开启独立表空间后创建的</li>
</ol>
</blockquote>
<h4 id="–tables"><a href="#–tables" class="headerlink" title="–tables"></a>–tables</h4><p>正则匹配所有开头test的库下的所有表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup -H 127.0.0.1 -ubak -pbak -P 3306 --backup --datadir=/var/lib/mysql --target-dir=/data/backups/ --tables=<span class="string">&quot;^test[.].*&quot;</span></span><br></pre></td></tr></table></figure>

<p>正则匹配开头是test的库下的t1表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup -H 127.0.0.1 -ubak -pbak -P 3306 --backup --datadir=/var/lib/mysql --target-dir=/data/backups/ --tables=<span class="string">&quot;^test[.]t1&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="–tables-file"><a href="#–tables-file" class="headerlink" title="–tables-file"></a>–tables-file</h4><p>以库名.表名格式写入文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;mydatabase.mytable&quot;</span> &gt; /tmp/tables.txt</span><br><span class="line">xtrabackup -H 127.0.0.1 -ubak -pbak -P 3306 --backup --tables-file=/tmp/tables.txt</span><br></pre></td></tr></table></figure>

<h4 id="–databases"><a href="#–databases" class="headerlink" title="–databases"></a>–databases</h4><p>多个库空格分隔</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#多库备份中，最好同时备份mysql，sys库，这样方便恢复时用户账号信息也存在</span></span><br><span class="line">xtrabackup -H 127.0.0.1 -ubak -pbak -P 3306 --backup --databases=<span class="string">&#x27;mysql sys performance_schema ...&#x27;</span> --target-dir=/data/backups/</span><br></pre></td></tr></table></figure>

<h4 id="部分备份恢复"><a href="#部分备份恢复" class="headerlink" title="部分备份恢复"></a>部分备份恢复</h4><blockquote>
<p>部分备份有2种方式恢复</p>
<p>1 常规备份恢复</p>
<p>2 –export 单表恢复</p>
</blockquote>
<ol>
<li>常规恢复</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup --prepare --target-dir=/data/backups/</span><br></pre></td></tr></table></figure>

<p>关闭数据库,拷贝数据库目录或者对应的表文件到datadir对应的库或者表,如果直接恢复到一个新实例也可以直接用copy-back.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chown mysql.mysql datadir -R</span><br><span class="line">service mysqld start</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>–export 单表恢复</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup --prepare --<span class="built_in">export</span> --target-dir=/data/backups/</span><br></pre></td></tr></table></figure>

<p>然后你能在备份目录中看到.exp文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find /data/backups/ -name export_test.*</span><br><span class="line">/data/backups/<span class="built_in">test</span>/export_test.exp </span><br><span class="line">/data/backups/<span class="built_in">test</span>/export_test.ibd </span><br><span class="line">/data/backups/<span class="built_in">test</span>/export_test.cfg</span><br></pre></td></tr></table></figure>

<blockquote>
<p>目标实例必须是mysql5.6版本以上才支持导入单表</p>
</blockquote>
<p>要将表导入其他服务器，首先要创建一个新表，其结构与将在该服务器上导入的表相同：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE mytable (...) ENGINE=InnoDB;</span><br></pre></td></tr></table></figure>

<p>然后丢弃它的表空间：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE mydatabase.mytable DISCARD TABLESPACE;</span><br></pre></td></tr></table></figure>

<p>复制<code>mytable.ibd</code>和<code>mytable.exp</code>文件到数据库的主页，并导入其表空间：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE mydatabase.mytable IMPORT TABLESPACE;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ANALYZE</span> <span class="keyword">TABLE</span> mydatabase.mytable;</span><br></pre></td></tr></table></figure>

<p>运行此命令后，导入表中的数据将可用。</p>
<h3 id="限制备份"><a href="#限制备份" class="headerlink" title="限制备份"></a>限制备份</h3><blockquote>
<p>虽然<strong>xtrabackup</strong>不会阻止数据库的操作，但任何备份都可<strong>以为</strong>正在备份的系统增加负载。在没有太多备用I / O容量的系统上，限制<strong>xtrabackup</strong>读取和写入数据的速率可能会有所帮助。您可以使用该 选项执行此操作。此选项限制每秒复制的块数。块大小为<em>10 MB</em>。</p>
</blockquote>
<p>–throttle=</p>
<p>默认情况下，没有限制，<strong>xtrabackup</strong>尽可能快地读取和写入数据。如果您对IOPS设置了太严格的限制，则备份可能会非常慢，以至于它永远无法跟上InnoDB正在编写的事务日志，因此备份可能永远不会完成。</p>
<h3 id="二进制日志"><a href="#二进制日志" class="headerlink" title="二进制日志"></a>二进制日志</h3><p>默认有两个文件会记录2进制日志信息</p>
<ol>
<li>在只使用XtraDB或InnoDB引擎的情况下，可以在xtrabackup_binlog_pos_innodb中查看</li>
<li>如果有包含其他存储引擎的库（MyisAM），则通过查看xtrabackup_binlog_info </li>
</ol>
<blockquote>
<p>通常情况下只有innodb两个文件2进制一样，如果有其他引擎，则通常xtrabackup_binlog_info 中所示的 position 应该会比 xtrabackup_binlog_pos_innodb 所示的数值大</p>
</blockquote>
<h2 id="常见选项"><a href="#常见选项" class="headerlink" title="常见选项"></a>常见选项</h2><ul>
<li><p>–apply-log-only</p>
<p>此选项仅在准备备份时执行重做阶段。这对增量备份非常重要。</p>
</li>
<li><p>–backup 进行备份并将其放入。</p>
</li>
<li><p>–compress </p>
<p>此选项告诉<strong>xtrabackup</strong>使用指定的压缩算法压缩所有输出数据，包括事务日志文件和元数据文件。目前唯一支持的算法是quicklz。生成的文件具有qpress存档格式，即*.qp，xtrabackup生成的每个文件本质上都是一个文件的qpress存档，可以通过qpress文件存档提取和解压缩。</p>
</li>
<li><p>–compress-chunk-size=# 压缩线程的工作缓冲区大小（以字节为单位）。默认值为64K。</p>
</li>
<li><p>–compress-threads=# </p>
<p>此选项指定<strong>xtrabackup</strong>用于并行数据压缩的工作线程数。此选项默认为<code>1</code>。并行压缩（：选项：xtrabackup -compress-threads）可以与并行文件复制（）一起使用。例如， 将创建4个I / O线程，这些线程将读取数据并将其传递给2个压缩线程。xtrabackup –parallel –parallel=4 –compress –compress-threads=2</p>
</li>
<li><p>–copy-back 将先前制作的备份中的所有文件从备份目录复制到其原始位置</p>
</li>
<li><p>–databases=#  此选项指定应备份的数据库和表的列表。该选项接受表单列表。`”databasename1[.table_name1] databasename2[.table_name2] . . .”</p>
</li>
<li><p>–datadir=DIRECTORY  备份的源目录。这应该与<em>MySQL</em>服务器的datadir相同，因此<code>my.cnf</code>如果存在则应该从中读取; 否则你必须在命令行上指定它</p>
</li>
<li><p>–decompress </p>
</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql备份</tag>
      </tags>
  </entry>
  <entry>
    <title>Zabbix实战-1</title>
    <url>/abff1330.html</url>
    <content><![CDATA[<blockquote>
<p>作者：Vaedit</p>
<p>官网文档地址：<a href="https://www.zabbix.com/cn/download?zabbix=4.0&amp;os_distribution=centos&amp;os_version=7&amp;db=mysql&amp;ws=apache">https://www.zabbix.com/cn/download?zabbix=4.0&amp;os_distribution=centos&amp;os_version=7&amp;db=mysql&amp;ws=apache</a></p>
</blockquote>
<p>实验环境</p>
<table>
<thead>
<tr>
<th>ip地址</th>
<th>组件</th>
<th>配置</th>
</tr>
</thead>
<tbody><tr>
<td>192.168.0.160</td>
<td>zabbix-server，php，mysql，zabbix-agent，zabbix-web，nginx等</td>
<td>2核2G</td>
</tr>
<tr>
<td>192.168.0.161</td>
<td>zabbix-agent，nginx</td>
<td>2核2G</td>
</tr>
</tbody></table>
<h4 id="安装zabbix-server环境"><a href="#安装zabbix-server环境" class="headerlink" title="安装zabbix-server环境"></a>安装zabbix-server环境</h4><h5 id="1-初始化环境"><a href="#1-初始化环境" class="headerlink" title="1 初始化环境"></a>1 初始化环境</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#192.168.0.160</span></span><br><span class="line">setenforce 0</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">enable</span> firewalld</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h5 id="2-安装Mysql"><a href="#2-安装Mysql" class="headerlink" title="2 安装Mysql"></a>2 安装Mysql</h5><p>部署Mysql 5.7版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install yum-utils </span><br><span class="line">rpm -ivh https://dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm</span><br><span class="line">yum-config-manager --<span class="built_in">disable</span> mysql80-community</span><br><span class="line">yum-config-manager --<span class="built_in">enable</span> mysql57-community</span><br><span class="line">yum install mysql-community-server mysql-community-devel</span><br><span class="line">systemctl start mysqld</span><br><span class="line">systemctl status mysqld</span><br><span class="line">systemctl <span class="built_in">enable</span> mysqld</span><br></pre></td></tr></table></figure>

<p>设置root密码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep <span class="string">&#x27;temporary password&#x27;</span> /var/<span class="built_in">log</span>/mysqld.log</span><br><span class="line">mysql -uroot -p</span><br><span class="line">mysql&gt; ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;Zabbix@2019&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>修改配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vi /etc/my.cnf</span></span><br><span class="line">[mysql]</span><br><span class="line">socket = /tmp/mysql.sock</span><br><span class="line">[mysqld]</span><br><span class="line">user = mysql</span><br><span class="line">port = 3306</span><br><span class="line">datadir = /var/lib/mysql</span><br><span class="line">socket = /tmp/mysql.sock</span><br><span class="line">bind-address = 0.0.0.0</span><br><span class="line">pid-file = /var/run/mysqld/mysqld.pid</span><br><span class="line">character-set-server = utf8</span><br><span class="line">collation-server = utf8_general_ci</span><br><span class="line">log-error = /var/<span class="built_in">log</span>/mysqld.log</span><br><span class="line"></span><br><span class="line">max_connections = 10240</span><br><span class="line">open_files_limit = 65535</span><br><span class="line">innodb_buffer_pool_size = 3G</span><br><span class="line">innodb_flush_log_at_trx_commit = 2</span><br><span class="line">innodb_log_file_size = 256M</span><br><span class="line"><span class="comment"># 修改完成后重启</span></span><br><span class="line"><span class="comment"># systemctl restart mysqld</span></span><br></pre></td></tr></table></figure>

<h5 id="3-安装Nginx"><a href="#3-安装Nginx" class="headerlink" title="3 安装Nginx"></a>3 安装Nginx</h5><p>源码编译安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-1.15.3.tar.gz</span><br><span class="line">yum install gcc pcre-devel openssl-devel –y</span><br><span class="line">useradd -M -s /sbin/nologin nginx</span><br><span class="line">tar zxvf nginx-1.15.3.tar.gz</span><br><span class="line"><span class="built_in">cd</span> nginx-1.15.3</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/nginx --user=nginx --group=nginx --with-http_ssl_module --with-http_stub_status_module</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<p>修改配置文件,修改pid位置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vi /usr/local/nginx/conf/nginx.conf</span></span><br><span class="line">pid        /var/run/nginx.pid;</span><br></pre></td></tr></table></figure>

<p>配置systemd管理服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vi /usr/lib/systemd/system/nginx.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=The NGINX HTTP and reverse proxy server</span><br><span class="line">After=syslog.target network.target remote-fs.target nss-lookup.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">PIDFile=/var/run/nginx.pid</span><br><span class="line">ExecStartPre=/usr/<span class="built_in">local</span>/nginx/sbin/nginx -t</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/nginx/sbin/nginx</span><br><span class="line">ExecReload=/usr/<span class="built_in">local</span>/nginx/sbin/nginx -s reload</span><br><span class="line">ExecStop=/bin/<span class="built_in">kill</span> -s QUIT <span class="variable">$MAINPID</span></span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<p>启动并开启自启：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start nginx</span><br><span class="line">systemctl <span class="built_in">enable</span> nginx</span><br></pre></td></tr></table></figure>

<h5 id="4-PHP部署"><a href="#4-PHP部署" class="headerlink" title="4 PHP部署"></a>4 PHP部署</h5><p>安装依赖：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install epel-release -y</span><br><span class="line">yum install -y gcc gcc-c++ make gd-devel libxml2-devel libcurl-devel libjpeg-devel libpng-devel openssl-devel libxslt-devel</span><br></pre></td></tr></table></figure>

<p>源码编译安装PHP</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://docs.php.net/distributions/php-5.6.36.tar.gz</span><br><span class="line">tar zxf php-5.6.36.tar.gz</span><br><span class="line"><span class="built_in">cd</span> php-5.6.36</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/php \</span><br><span class="line">--with-config-file-path=/usr/<span class="built_in">local</span>/php/etc \</span><br><span class="line">--enable-fpm --enable-opcache \</span><br><span class="line">--with-mysql --with-mysqli  \</span><br><span class="line">--enable-session --with-zlib --with-curl --with-gd \</span><br><span class="line">--with-jpeg-dir --with-png-dir --with-freetype-dir \</span><br><span class="line">--enable-mbstring --enable-xmlwriter --enable-xmlreader \</span><br><span class="line">--enable-xml --enable-sockets --enable-bcmath --with-gettext</span><br><span class="line">make -j 8 &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<p>拷贝配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp php.ini-production /usr/<span class="built_in">local</span>/php/etc/php.ini</span><br><span class="line">cp sapi/fpm/php-fpm.conf /usr/<span class="built_in">local</span>/php/etc/php-fpm.conf</span><br><span class="line">cp sapi/fpm/php-fpm.service /usr/lib/systemd/system/</span><br></pre></td></tr></table></figure>

<p>配置systemd管理服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vi /usr/lib/systemd/system/php-fpm.service </span></span><br><span class="line">[Unit]</span><br><span class="line">Description=The PHP FastCGI Process Manager</span><br><span class="line">After=syslog.target network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">PIDFile=/usr/<span class="built_in">local</span>/php/var/run/php-fpm.pid</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/php/sbin/php-fpm --nodaemonize --fpm-config /usr/<span class="built_in">local</span>/php/etc/php-fpm.conf</span><br><span class="line">ExecReload=/bin/<span class="built_in">kill</span> -USR2 <span class="variable">$MAINPID</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<p>启动并开机自启：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start php-fpm</span><br><span class="line">systemctl <span class="built_in">enable</span> php-fpm</span><br></pre></td></tr></table></figure>

<h5 id="5-部署Zabbix-server"><a href="#5-部署Zabbix-server" class="headerlink" title="5 部署Zabbix-server"></a>5 部署Zabbix-server</h5><p>安装依赖包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install libxml2-devel libcurl-devel libevent-devel net-snmp-devel mysql-community-devel -y</span><br></pre></td></tr></table></figure>

<p>源码编译安装zabbix：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxf zabbix-4.0.0.tar.gz</span><br><span class="line">groupadd zabbix</span><br><span class="line">useradd -g zabbix zabbix -s /sbin/nologin</span><br><span class="line"><span class="built_in">cd</span> zabbix-4.0.0</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/zabbix --enable-server --enable-agent --enable-java --with-mysql --enable-ipv6 --with-net-snmp --with-libcurl --with-libxml2</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<p>修改配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vi /usr/local/zabbix/etc/zabbix_server.conf</span></span><br><span class="line"><span class="comment"># egrep -v &quot;^#|^$&quot; /usr/local/zabbix/etc/zabbix_server.conf</span></span><br><span class="line">LogFile=/tmp/zabbix_server.log</span><br><span class="line">DBHost=localhost</span><br><span class="line">DBName=zabbix</span><br><span class="line">DBUser=root</span><br><span class="line">DBPassword=Zabbix@2019</span><br><span class="line">DBSocket= /tmp/mysql.sock</span><br><span class="line">Timeout=4</span><br><span class="line">AlertScriptsPath=/usr/<span class="built_in">local</span>/zabbix/alertscripts</span><br><span class="line">LogSlowQueries=3000</span><br></pre></td></tr></table></figure>

<p>配置systemd管理服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vi /usr/lib/systemd/system/zabbix_server.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Zabbix Server</span><br><span class="line">After=syslog.target</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Environment=<span class="string">&quot;CONFFILE=/usr/local/zabbix/etc/zabbix_server.conf&quot;</span></span><br><span class="line">EnvironmentFile=-/etc/sysconfig/zabbix-server</span><br><span class="line">Type=forking</span><br><span class="line">Restart=on-failure</span><br><span class="line">PIDFile=/tmp/zabbix_server.pid</span><br><span class="line">KillMode=control-group</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/zabbix/sbin/zabbix_server -c <span class="variable">$CONFFILE</span></span><br><span class="line">ExecStop=/bin/<span class="built_in">kill</span> -SIGTERM <span class="variable">$MAINPID</span></span><br><span class="line">RestartSec=10s</span><br><span class="line">TimeoutSec=0</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<p>导入表结构：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> zabbix-4.0.0/database/mysql</span><br><span class="line">mysql -uroot –pZabbix@2019</span><br><span class="line">create database zabbix default charset utf-8;</span><br><span class="line">mysql&gt; use zabbix;</span><br><span class="line">mysql&gt; <span class="built_in">source</span> schema.sql;</span><br><span class="line">mysql&gt; <span class="built_in">source</span> images.sql;</span><br><span class="line">mysql&gt; <span class="built_in">source</span> data.sql;</span><br><span class="line"></span><br><span class="line"><span class="comment">####单独设置zabbix用户</span></span><br><span class="line">mysql&gt; create database zabbix character <span class="built_in">set</span> utf8 collate utf8_bin;</span><br><span class="line">mysql&gt; create user zabbix@localhost identified by <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line">mysql&gt; grant all privileges on zabbix.* to zabbix@localhost;</span><br><span class="line">mysql&gt; quit; </span><br><span class="line"></span><br><span class="line"><span class="comment">#yum安装可以通过如下导入初始架构和数据，系统将提示您输入新创建的密码。</span></span><br><span class="line">zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz | mysql -uzabbix -p zabbix </span><br></pre></td></tr></table></figure>

<p>启动并加入开机启动：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start zabbix-server</span><br><span class="line">systemctl <span class="built_in">enable</span> zabbix-server</span><br></pre></td></tr></table></figure>

<p>启动Agent，也监控本机：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/zabbix/sbin/zabbix_agentd</span><br></pre></td></tr></table></figure>

<h5 id="6-部署Zabbix-WEB"><a href="#6-部署Zabbix-WEB" class="headerlink" title="6 部署Zabbix WEB"></a>6 部署Zabbix WEB</h5><blockquote>
<p>Zabbix前端使用PHP写的，所以必须运行在PHP支持的Web服务器上。只需要简单的从frontends/php路径下复制PHP文件到Web服务器的网站根目录，就可以访问页面了。</p>
</blockquote>
<p> 拷贝Zabbix前端程序到网站根目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp zabbix-4.0.0/frontends/php/* /usr/<span class="built_in">local</span>/nginx/html/ -rf</span><br></pre></td></tr></table></figure>

<p>修改配置参数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vi /usr/local/php/etc/php.ini</span></span><br><span class="line">max_execution_time = 300</span><br><span class="line">memory_limit = 128M</span><br><span class="line">post_max_size = 16M</span><br><span class="line">upload_max_filesize = 2M</span><br><span class="line">max_input_time = 300</span><br><span class="line">always_populate_raw_post_data = -1</span><br><span class="line">date.timezone = Asia/Shanghai</span><br></pre></td></tr></table></figure>

<p>重启php-fpm生效：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl restart php-fpm</span><br></pre></td></tr></table></figure>

<p>修改Nginx配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vi /usr/local/nginx/conf/nginx.conf  </span></span><br><span class="line">  server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        access_log  logs/zabbix.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.php index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ \.php$ &#123;</span><br><span class="line">            root           html;</span><br><span class="line">            fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">            fastcgi_index  index.php;</span><br><span class="line">            fastcgi_param  SCRIPT_FILENAME  <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">            include        fastcgi_params;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 重启Nginx</span></span><br><span class="line">systemctl restat nginx</span><br></pre></td></tr></table></figure>

<p>然后就可以通过访问网页开始初始化配置Zabbix，初始化默认账号密码：Admin,zabbix</p>
]]></content>
      <categories>
        <category>系统监控</category>
      </categories>
      <tags>
        <tag>Zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title>Zabbix实战-2</title>
    <url>/32f6428a.html</url>
    <content><![CDATA[<h4 id="安装Zabbix-agent环境"><a href="#安装Zabbix-agent环境" class="headerlink" title="安装Zabbix-agent环境"></a>安装Zabbix-agent环境</h4><h5 id="1-初始化环境"><a href="#1-初始化环境" class="headerlink" title="1 初始化环境"></a>1 初始化环境</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#192.168.0.161</span></span><br><span class="line">setenforce 0</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">enable</span> firewalld</span><br></pre></td></tr></table></figure>

<h5 id="2-部署-Zabbix-Agent"><a href="#2-部署-Zabbix-Agent" class="headerlink" title="2 部署 Zabbix Agent"></a>2 部署 Zabbix Agent</h5><p>CentOS7.x操作系统安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -Uvh https://repo.zabbix.com/zabbix/4.0/rhel/7/x86_64/zabbix-release-4.0-2.el7.noarch.rpm</span><br><span class="line">yum install zabbix-agent -y</span><br></pre></td></tr></table></figure>

<p>CentOS6.x操作系统安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -Uvh https://repo.zabbix.com/zabbix/4.0/rhel/6/x86_64/zabbix-release-4.0-2.el7.noarch.rpm</span><br><span class="line">yum install zabbix-agent -y</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>修改配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># egrep -v &quot;^#|^$&quot; /etc/zabbix/zabbix_agentd.conf </span></span><br><span class="line">PidFile=/var/run/zabbix/zabbix_agentd.pid</span><br><span class="line">LogFile=/var/<span class="built_in">log</span>/zabbix/zabbix_agentd.log</span><br><span class="line">LogFileSize=0</span><br><span class="line">DebugLevel=3</span><br><span class="line">Server=192.168.0.160</span><br><span class="line">ListenPort=10050</span><br><span class="line">ListenIP=192.168.0.161</span><br><span class="line">ServerActive=192.168.0.160</span><br><span class="line">Hostname=agent1</span><br><span class="line">HostMetadata=vaedit <span class="built_in">test</span></span><br><span class="line">Include=/etc/zabbix/zabbix_agentd.d/*.conf</span><br><span class="line">UnsafeUserParameters=1</span><br></pre></td></tr></table></figure>

<p>启动并加入开机启动：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start zabbix-agent</span><br><span class="line">systemctl <span class="built_in">enable</span> zabbix-agent</span><br></pre></td></tr></table></figure>

<h4 id="联通性测试"><a href="#联通性测试" class="headerlink" title="联通性测试"></a>联通性测试</h4><p>在Zabbix服务器执行以下命令，判断是否可以正常连接到Zabbix agent服务器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/zabbix/bin/zabbix_get -s 192.168.0.161 -p 10050 -k <span class="string">&quot;system.uptime&quot;</span></span><br><span class="line"></span><br><span class="line">774564</span><br></pre></td></tr></table></figure>

<p>返回数字说明连通正常。否则可能是被监控机防火墙阻断，无法连通，可以尝试在被监控机添加放行规则：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -I INPUT -s 192.168.0.160 -p tcp --dport 10050 -j ACCEPT</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>系统监控</category>
      </categories>
      <tags>
        <tag>Zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title>iredmail邮件服务器部署</title>
    <url>/9e9dd8.html</url>
    <content><![CDATA[<blockquote>
<p>作者：Vaedit</p>
</blockquote>
<h2 id="iredmail部署"><a href="#iredmail部署" class="headerlink" title="iredmail部署"></a>iredmail部署</h2><h4 id="一-服务器选型采购"><a href="#一-服务器选型采购" class="headerlink" title="一 服务器选型采购"></a>一 服务器选型采购</h4><p>由于国内云厂商默认都禁用smtp25端口，所以需要购买国外地区云服务器，低使用频率推荐至少内存2G以上。</p>
<table>
<thead>
<tr>
<th>云厂商</th>
<th>服务器型号</th>
<th>配置</th>
</tr>
</thead>
<tbody><tr>
<td>AWS</td>
<td>r4.large</td>
<td>2核16G</td>
</tr>
</tbody></table>
<h4 id="二-iredmail下载安装"><a href="#二-iredmail下载安装" class="headerlink" title="二 iredmail下载安装"></a>二 iredmail下载安装</h4><blockquote>
<p>该示例后续所有一级域名都需要按照实际使用域名来修改</p>
</blockquote>
<a id="more"></a>

<h5 id="2-1-初始化服务器"><a href="#2-1-初始化服务器" class="headerlink" title="2.1 初始化服务器"></a>2.1 初始化服务器</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#升级系统软件到最新，不然会有报错</span></span><br><span class="line">yum update -y</span><br><span class="line"><span class="comment">#修改主机名为mail.domain.com ,和邮件服务器地址一致</span></span><br><span class="line">hostname mail.domain.com</span><br><span class="line">/etc/hosts</span><br><span class="line">/etc/hostname</span><br><span class="line">hostname -f</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭selinux</span></span><br><span class="line">/etc/selinux/config</span><br><span class="line">setenforce 0</span><br><span class="line"><span class="comment">#下载最新稳定版，需要centos7版本</span></span><br><span class="line">wget -c https://codeload.github.com/iredmail/iRedMail/tar.gz/1.0</span><br><span class="line"><span class="comment">#解压安装</span></span><br><span class="line">tar xf iRedMail-1.0.tar.gz &amp;&amp; <span class="built_in">cd</span> iRedMail-1.0</span><br><span class="line">bash iRedMail.sh <span class="comment">#根据输出提示，输入mysql密码，管理员密码，域名，邮件存放地址等等信息完成配置文件生成，最后输入y确认安装,默认iredmail会配置mysql，iptables规则</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>官方安装文档：<a href="https://docs.iredmail.org/install.iredmail.on.rhel-zh_CN.html">https://docs.iredmail.org/install.iredmail.on.rhel-zh_CN.html</a></p>
</blockquote>
<h5 id="2-2-域名解析"><a href="#2-2-域名解析" class="headerlink" title="2.2 域名解析"></a>2.2 域名解析</h5><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2e22800a2a664b29bbca36b790618d0d~tplv-k3u1fbpfcp-zoom-1.image"></p>
<h5 id="2-3-安全组开放端口"><a href="#2-3-安全组开放端口" class="headerlink" title="2.3 安全组开放端口"></a>2.3 安全组开放端口</h5><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e27fc9e14f094502b2ed9f8f8c112573~tplv-k3u1fbpfcp-zoom-1.image"></p>
<h4 id="三-优化邮件服务器"><a href="#三-优化邮件服务器" class="headerlink" title="三 优化邮件服务器"></a>三 优化邮件服务器</h4><p>邮件服务器添加SPF，DKIM，DMARC，PTR,提高邮件送达率</p>
<h5 id="3-1-设置SPF"><a href="#3-1-设置SPF" class="headerlink" title="3.1 设置SPF"></a>3.1 设置SPF</h5><blockquote>
<p>SPF 记录是一种域名服务 (DNS) 记录，可确定允许哪些邮件服务器代表您的域来发送电子邮件。</p>
</blockquote>
<ol>
<li><p>a：所有该域名的A记录都为通过，a不指定的情况下为当前域名</p>
</li>
<li><p>ip4：指定通过的IP</p>
</li>
<li><p>mx：mx记录域名的A记录IP可以发邮件</p>
</li>
<li><p>all：结束标志，“-”表示只允许设置的记录为通过，“~”表示失败，通常用于测试，“+”表示忽略SPF</p>
<p>如图：<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bfc210908bb041349d3a4d5832392425~tplv-k3u1fbpfcp-zoom-1.image"></p>
</li>
</ol>
<h5 id="3-2-设置DKIM"><a href="#3-2-设置DKIM" class="headerlink" title="3.2 设置DKIM"></a>3.2 设置DKIM</h5><blockquote>
<p>DomainKeys Identified Mail的缩写，域名密钥识别邮件标准。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">amavisd showkeys <span class="comment">#如果报错制定配置文件</span></span><br><span class="line">amavisd -c /etc/amavisd/amavisd.conf showkeys</span><br><span class="line"><span class="comment">#输出去掉括号和引号</span></span><br><span class="line">v=DKIM1; p=MIGfMA0GCSqsdfdsfQEBAQUAA4GNADCBiQKBgQdsfdsfIydbCBnARzt0m8yVQwpQIJUebYk09TvDu56kAQEXuVNDS5G8DjvvCUslq/1+/EKcafvVh82of3rONn0wPhRpBm2CfDTD8pEWHmT6BRa+su9zJ02iomgHYl14sfxxfsdf</span><br></pre></td></tr></table></figure>

<p>如图：</p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f21d7ce3e9ae4b26bacd953b641f28ad~tplv-k3u1fbpfcp-zoom-1.image"></p>
<h5 id="3-3-设置DMARC"><a href="#3-3-设置DMARC" class="headerlink" title="3.3 设置DMARC"></a>3.3 设置DMARC</h5><blockquote>
<p>DMARC协议是有效解决信头From伪造而诞生的一种新的邮件来源验证手段，为邮件发件人地址提供强大保护，并在邮件收发双方之间建立起一个数据反馈机制。</p>
</blockquote>
<p>如图：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a560ec9b22a84028a4106f8f6d554301~tplv-k3u1fbpfcp-zoom-1.image"></p>
<h5 id="3-4-PTR"><a href="#3-4-PTR" class="headerlink" title="3.4 PTR"></a>3.4 PTR</h5><blockquote>
<p>PTR记录也就是IP反向解析，我们常见的解析都是将域名A记录解析到IP，PTR则是将IP反向解析到对应的域名，通过设置PTR可以提高发信方的信誉，从而提高到达率。</p>
</blockquote>
<p>AWS默认就做了PTR</p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/364babea950f433e90ec5940206e1b1d~tplv-k3u1fbpfcp-zoom-1.image"></p>
<pre><code>  但不是我们需要的反向解析，这里没做修改，如果需要修改则需要提工单改为mail.domain.com</code></pre>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6b5b7025337544ed94e7270af8dd147a~tplv-k3u1fbpfcp-zoom-1.image"></p>
<blockquote>
<p>附AWS申请更改PTR和取消邮件限制地址：<a href="https://aws.amazon.com/tw/blogs/aws/reverse-dns-for-ec2s-elastic-ip-addresses/%EF%BC%8C%E4%B8%80%E8%88%AC1-3%E5%A4%A9%E5%86%85%E4%BC%9A%E9%85%8D%E7%BD%AE%E5%A5%BD%EF%BC%8C%E5%B9%B6%E4%B8%94%E4%BC%9A%E9%82%AE%E4%BB%B6%E6%8F%90%E9%86%92%E4%BD%A0%E3%80%82">https://aws.amazon.com/tw/blogs/aws/reverse-dns-for-ec2s-elastic-ip-addresses/，一般1-3天内会配置好，并且会邮件提醒你。</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#反向解析测试</span></span><br><span class="line">dig -x ip +short3</span><br><span class="line">host ip</span><br></pre></td></tr></table></figure>



<h4 id="四-邮件记录示例"><a href="#四-邮件记录示例" class="headerlink" title="四 邮件记录示例"></a>四 邮件记录示例</h4><table>
<thead>
<tr>
<th align="left">主机记录</th>
<th>记录类型</th>
<th>记录值</th>
</tr>
</thead>
<tbody><tr>
<td align="left">mail</td>
<td>A</td>
<td>44.xx.xx.xx</td>
</tr>
<tr>
<td align="left">@</td>
<td>MX</td>
<td>mail.domain.net （优先级10）</td>
</tr>
<tr>
<td align="left">@</td>
<td>TXT</td>
<td>v=spf1 a mx -all</td>
</tr>
<tr>
<td align="left">_dmarc</td>
<td>TXT</td>
<td>v=DMARC1;p=reject;rua=postmaster@domain.net</td>
</tr>
<tr>
<td align="left">dkim._domainkey</td>
<td>TXT</td>
<td>v=DKIM1; p=MIGdsfdtgSqGSIb3DQEBAQUAA4GNADCBiQdfdgd3sTQzCYISM8i1qIChZjgYNwgZGy5XcJQvoApzd1UJbaMVIhJ2Zae2Rc15SFKQgwuxO6bch0coe/IS/wvRuruZ6BDCwjgoVrxY+OsAOpdsfddUD12LVMmG2jDkZ0UJ4XSxx1+RVwIDAQAB</td>
</tr>
</tbody></table>
<h4 id="五-备注"><a href="#五-备注" class="headerlink" title="五 备注"></a>五 备注</h4><ol>
<li><p>postfix日志路径：/var/log/maillog</p>
</li>
<li><p>mariadb默认数据库目录存放在/var/lib/mysql，安装完成后需要停掉切换到/data/mysql下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#关闭并全备mariadb</span></span><br><span class="line">systemctl stop mariadb</span><br><span class="line">nestat -ntlp|grep mysql</span><br><span class="line">cp -a /var/lib/mysql /data/</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改下配置文件指定mariadb datadir</span></span><br><span class="line">vim /etc/my.cnf</span><br><span class="line">datadir=/data/mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动</span></span><br><span class="line">systemctl start mariadb</span><br></pre></td></tr></table></figure>
</li>
<li><p>默认后台管理地址：<a href="https://mail.domain.com/iredadmin/">https://mail.domain.com/iredadmin/</a>  账号：<a href="mailto:&#x70;&#x6f;&#x73;&#x74;&#x6d;&#97;&#115;&#x74;&#x65;&#114;&#x40;&#100;&#111;&#x6d;&#97;&#x69;&#x6e;&#46;&#x63;&#111;&#109;">&#x70;&#x6f;&#x73;&#x74;&#x6d;&#97;&#115;&#x74;&#x65;&#114;&#x40;&#100;&#111;&#x6d;&#97;&#x69;&#x6e;&#46;&#x63;&#111;&#109;</a> 密码：安装时指定</p>
</li>
<li><p>web mail地址：<a href="https://mail.domain.com/mail/">https://mail.domain.com/mail/</a>  账号：<a href="mailto:&#x70;&#x6f;&#115;&#116;&#109;&#97;&#115;&#116;&#x65;&#114;&#64;&#x64;&#x6f;&#109;&#97;&#105;&#110;&#46;&#x63;&#x6f;&#109;">&#x70;&#x6f;&#115;&#116;&#109;&#97;&#115;&#116;&#x65;&#114;&#64;&#x64;&#x6f;&#109;&#97;&#105;&#110;&#46;&#x63;&#x6f;&#109;</a> 密码：安装时指定</p>
</li>
<li><pre><code class="bash">#各服务默认端口
POP3 service: port 110 over TLS (recommended), or port 995 with SSL.
IMAP service: port 143 over TLS (recommended), or port 993 with SSL.
SMTP service: port 587 over TLS.
CalDAV and CardDAV server addresses: https://&lt;server&gt;/SOGo/dav/&lt;full email address&gt;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">6. 默认邮件存放路径：&#x2F;data&#x2F;vmail&#x2F;  (安装时指定)</span><br><span class="line"></span><br><span class="line">7. 修改邮件附件大小限制：https:&#x2F;&#x2F;docs.iredmail.org&#x2F;change.mail.attachment.size-zh_CN.html</span><br><span class="line"></span><br><span class="line">   &#96;&#96;&#96;bash</span><br><span class="line">   209715200 #200M</span><br><span class="line">   postconf -e message_size_limit&#x3D;&#39;209715200&#39;</span><br><span class="line">   </span><br><span class="line">   postconf -e mailbox_size_limit&#x3D;&#39;209715200&#39;</span><br><span class="line">   </span><br><span class="line">   #后续步骤省略，请看官方文档</span><br></pre></td></tr></table></figure>


</code></pre>
</li>
</ol>
<h4 id="六-客户端配置"><a href="#六-客户端配置" class="headerlink" title="六 客户端配置"></a>六 客户端配置</h4><h5 id="6-1-Foxmail配置"><a href="#6-1-Foxmail配置" class="headerlink" title="6.1 Foxmail配置"></a>6.1 Foxmail配置</h5><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/487dcfa582bd4466a503fdffc7bfbdaa~tplv-k3u1fbpfcp-zoom-1.image"></p>
<h4 id="七-优化检测"><a href="#七-优化检测" class="headerlink" title="七 优化检测"></a>七 优化检测</h4><h5 id="7-1-通过http-www-mail-tester-com-测试邮件服务器"><a href="#7-1-通过http-www-mail-tester-com-测试邮件服务器" class="headerlink" title="7.1 通过http://www.mail-tester.com/ 测试邮件服务器"></a>7.1 通过<a href="http://www.mail-tester.com/">http://www.mail-tester.com/</a> 测试邮件服务器</h5><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0c469eff8d9d41a8a0adcad7216ac3ca~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p>通过邮件账号发送一封邮件 到上面的邮箱，查看邮件得分，它会提醒还有哪些不足,假如邮件服务器，原本就在黑名单内，那么该ip之前使用者存在滥用导致，只有一个办法，更换ip来解决。</p>
<h5 id="7-2-QQ邮箱优化"><a href="#7-2-QQ邮箱优化" class="headerlink" title="7.2 QQ邮箱优化"></a>7.2 QQ邮箱优化</h5><ul>
<li><p>注册合作伙伴（国内大部分邮箱都是qq邮箱）</p>
<p>通过openmail.qq.com来提高qq邮箱发件成功率，截止我配置邮件服务器，该地址功能目前处于维护状态，不知何时好。</p>
</li>
</ul>
<h5 id="7-3-设置grey-list-解决收件延迟问题"><a href="#7-3-设置grey-list-解决收件延迟问题" class="headerlink" title="7.3 设置grey list,解决收件延迟问题"></a>7.3 设置grey list,解决收件延迟问题</h5><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba8aa6034975481f9c36c15edc376572~tplv-k3u1fbpfcp-zoom-1.image"></p>
]]></content>
      <categories>
        <category>Linux基础服务</category>
      </categories>
      <tags>
        <tag>iredmail</tag>
      </tags>
  </entry>
  <entry>
    <title>mysqldump</title>
    <url>/df2ed841.html</url>
    <content><![CDATA[<h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><ul>
<li><p>-A/–all-databases 备份所有数据库</p>
</li>
<li><p>-B/–databases 备份多个库</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqldump -uxx -pxxx -B 库名1 库名2 &gt;xxx.sql</span><br></pre></td></tr></table></figure>
</li>
<li><p>–single-transaction 只用于innodb引擎，用于保证备份数据时的一致性</p>
</li>
<li><p>–master-data=1/2</p>
<p>  该选项将二进制日志的位置和文件名写入到输出中。该选项要求有RELOAD权限，并且必须启用二进制日志。如果该选项值等于1，位置和文件名被写入CHANGE MASTER语句形式的转储输出，如果你使用该SQL转储主服务器以设置从服务器，从服务器从主服务器二进制日志的正确位置开始。如果选项值等于2，CHANGE MASTER语句被写成SQL注释。</p>
</li>
</ul>
<a id="more"></a>

<ul>
<li>–dump-slave=1/2 该参数用在从库端备份数据，在线搭建新的从库使用</li>
<li>–no-data/-d 只备份表结构，不备份数据</li>
<li>–complete-insert/-c 使用完整的插入语句，可以提高插入效率</li>
<li>-t 只导出insert语句</li>
<li>–where=/w 导出条件</li>
<li>–default-character-set 设置字符集</li>
<li>-F/–flush-logs 刷新2进制日志</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysqldump</tag>
      </tags>
  </entry>
  <entry>
    <title>mysqlhotcopy</title>
    <url>/14f2069a.html</url>
    <content><![CDATA[<blockquote>
<p>mysqlhotcopy的使用，只能备份MYISAM引擎数据库</p>
</blockquote>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y perl perl-DBI perl-DBD-MySQL</span><br></pre></td></tr></table></figure>

<p>需要创建一个专门用来备份的账户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grant select,reload,lock tables on *.* to &#39;hotcopyer&#39;@&#39;localhost&#39; identified by &#39;123456&#39;;</span><br></pre></td></tr></table></figure>

<h3 id="常用选项和示例"><a href="#常用选项和示例" class="headerlink" title="常用选项和示例"></a>常用选项和示例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqlhotcopy -u ... -p password -S /tmp/...sock  库名(多库名空格隔开) 备份的目录</span><br><span class="line"><span class="comment"># -u -p 后面必须有空格 可以加一个--flushlog 刷新2进制文件</span></span><br><span class="line">mysqlhotcopy -u ... -p ... -S ...  原库名 新库名  <span class="comment">#会在mysql datadir下产生一个新库目录</span></span><br></pre></td></tr></table></figure>

<ul>
<li>-q 安静模式 </li>
<li>–flushlog 刷新2进制日志</li>
</ul>
<a id="more"></a>

<h3 id="恢复数据"><a href="#恢复数据" class="headerlink" title="恢复数据"></a>恢复数据</h3><ul>
<li>关闭数据库</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqladmin -uroot -p -S /mysql/data/mysql.sock shutdown</span><br></pre></td></tr></table></figure>

<ul>
<li>删除datadir或者移走</li>
</ul>
<p>把原数据移走，然后直接把备份的数据文件解压并且放回到datadir下，并且修改所属用户和组为mysql</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp -a 备份文件 datadir</span><br><span class="line">chown mysql.mysql datadir</span><br></pre></td></tr></table></figure>

<ul>
<li>再启动数据库</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service mysqld start</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysqlhotcopy</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql表修复</title>
    <url>/a7aeafa4.html</url>
    <content><![CDATA[<h2 id="mysqlcheck"><a href="#mysqlcheck" class="headerlink" title="mysqlcheck"></a>mysqlcheck</h2><blockquote>
<ol>
<li><p>mysqlcheck客户端可以检查和修复MyISAM表。它还可以优化和分析表。mysqlcheck的功能类似myisamchk，但其工作不同。</p>
</li>
<li><p>主要差别是当mysqld服务器在运行时必须使用mysqlcheck，而myisamchk应用于服务器没有运行时。使用mysqlcheck的好处是不需要停止服务器来检查或修复表。</p>
</li>
<li><p>mysqlcheck为用户提供了一种方便的使用SQL语句CHECK TABLE、REPAIR TABLE、ANALYZE TABLE和OPTIMIZE TABLE的方式。它确定在要执行的操作中使用使用哪个语句，然后将语句发送到要执行的服务器上。</p>
</li>
</ol>
</blockquote>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqlcheck -B 指定数据库 -r -S /data/mysql2/mysql2.sock -u root -p<span class="string">&#x27;test&#x27;</span> &gt;&gt; /var/<span class="built_in">log</span>/mysqlcheck.log</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h3><ul>
<li><p>–optimize，-o  优化表</p>
</li>
<li><p>-h 主机地 </p>
</li>
<li><p>-P 端口号</p>
</li>
<li><p>-F 只检查没有正确关闭的表</p>
</li>
<li><p>-r 执行可以修复大部分问题的修复，只是唯一值不唯一时不能修复。</p>
</li>
<li><p>-a 分析表</p>
</li>
<li><p>-c 检查表，默认选项</p>
</li>
<li><p>-m 中等的检查</p>
</li>
<li><p>-e 完全检查，很慢</p>
</li>
<li><p>–database，-B 指定库 如果没指定，表示全部库</p>
</li>
<li><p>–all–database，-A  所有库</p>
</li>
<li><p>–fast，-F    只检查没有正确关闭的表。</p>
</li>
<li><p>–quick，-q    如果你正使用该选项在检查表，它防止扫描行以检查错误链接的检查。这是最快的检查方法。    如果你正使用该选项在修复表，它尝试只修复索引树。这是最快的修复方法。</p>
</li>
<li><p>–silent，-s    沉默模式。只打印错误消息</p>
</li>
<li><p>–tables    覆盖—database或-B选项。选项后面的所有参量被视为表名。</p>
</li>
<li><p>–socket=/-S   指定套接字</p>
</li>
</ul>
<h2 id="myisamchk"><a href="#myisamchk" class="headerlink" title="myisamchk"></a>myisamchk</h2><blockquote>
<p>myisamchk，只适用于myisam引擎，使用时需要关闭数据库</p>
</blockquote>
<h3 id="myisamchk表损坏原因"><a href="#myisamchk表损坏原因" class="headerlink" title="myisamchk表损坏原因"></a>myisamchk表损坏原因</h3><ol>
<li><p>服务器突然断电导致数据文件损坏;强制关机,没有先关闭mysql 服务;mysqld 进程在写表时被杀掉。因为此时mysql可能正在刷新索引。             </p>
</li>
<li><p>磁盘损坏。             </p>
</li>
<li><p>服务器死机。             </p>
</li>
<li><p>mysql 本身的bug 。             </p>
</li>
</ol>
<h3 id="MySQL中MyISAM表损坏的症状"><a href="#MySQL中MyISAM表损坏的症状" class="headerlink" title="MySQL中MyISAM表损坏的症状"></a>MySQL中MyISAM表损坏的症状</h3><ol>
<li><p>查询数据时报出错误：Incorrect key file for table: ‘…’. Try to repair it </p>
</li>
<li><p>查询不能在表中找到行或返回不完全的数据。             </p>
</li>
<li><p>Error: Table ‘…’ is marked as crashed and should be repaired 。             </p>
</li>
<li><p>打开表失败： Can’t open file: ‘×××.MYI’ (errno: 145) 。</p>
</li>
</ol>
<h3 id="常见选项"><a href="#常见选项" class="headerlink" title="常见选项"></a>常见选项</h3><ul>
<li>-q 快速修复，一般和-r一起使用，快速修复</li>
<li>-r  修复模式</li>
<li>-o 能修复-r不能修复的问题。一般会有提示使用-o</li>
<li>-i 打印被检测表的信息</li>
<li>-m 中等的检查</li>
<li>-e 最彻底的检查</li>
<li>-a 分析表</li>
<li>-s 安静的</li>
<li>-B 将.MYD文件备份为file_name-time.BAK</li>
<li>–sort-index, -S 以从高到低的顺序排序索引树块。这将优化搜寻并且将使按键值的表扫描更快。</li>
<li>-f  强制修复，一般不使用，可能会有数据丢失</li>
<li>myisamchk默认只用3M的内存来修复，如果要修复大表的话，显然速度会巨慢，我们可以通过为myisamchk设置更多的内存，来使其运行的更快，<br>myisamchk –sort_buffer_size=16M –key_buffer_size=16M –read_buffer_size=1M –write_buffer_size=1M<br>一般sort_buffer_size的大小16m就足够用了。</li>
<li>myisamchk默认使用选项“–tmpdir”作为临时文件的，如果tmpdir指定内存的话，恢复的表比较大，很容易报内存的错误，所以我们可以用tmpdir指定一个比较大的文件系统<br>myisamchk –sort_buffer_size=16m –key_buffer_size=16m  –read_buffer_size=2m –write_buffer_size=1m –tmpdir=/tmp</li>
</ul>
<p>执行myisam表的恢复只要是修复表的三个文件，最常发生问题的文件是数据文件和索引文件</p>
<p>tbl_name.frm：定义(格式)文件<br>tbl_name.MYD：数据文件<br>tbl_name.MYI：索引文件</p>
<h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><blockquote>
<p>首先进入到对应的数据库下：cd /data/mysql/game | 也可以直接指定表的路径，从而不用进入目录</p>
</blockquote>
<h4 id="检查表"><a href="#检查表" class="headerlink" title="检查表"></a>检查表</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#快速的检查</span></span><br><span class="line">myisamchk -im /usr/<span class="built_in">local</span>/mysql/data/testx/t2</span><br><span class="line"><span class="comment">#只检查没有正常关闭的表</span></span><br><span class="line">myisamchk -iFm /usr/<span class="built_in">local</span>/mysql/data/testx/t2</span><br><span class="line"><span class="comment">#仅显示表的最重要的信息</span></span><br><span class="line">myisamchk -eim /usr/<span class="built_in">local</span>/mysql/data/testx/t2</span><br></pre></td></tr></table></figure>

<h4 id="修复表"><a href="#修复表" class="headerlink" title="修复表"></a>修复表</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#常用的修复命令</span></span><br><span class="line">myisamchk -rq tbl_name <span class="comment">#快速修复表,只修复索引</span></span><br><span class="line">myisamchk -Br tbl_name  <span class="comment">#备份并修复表</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>openssl升级</title>
    <url>/ceb34f9a.html</url>
    <content><![CDATA[<h3 id="1-查看原版本"><a href="#1-查看原版本" class="headerlink" title="1.查看原版本"></a>1.查看原版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl version -a </span><br></pre></td></tr></table></figure>
<h3 id="2-下载openssl对应版本"><a href="#2-下载openssl对应版本" class="headerlink" title="2.下载openssl对应版本"></a>2.下载openssl对应版本</h3><p>PASS</p>
<h3 id="3-更新zlib"><a href="#3-更新zlib" class="headerlink" title="3.更新zlib"></a>3.更新zlib</h3><h4 id="zlib简介"><a href="#zlib简介" class="headerlink" title="zlib简介"></a>zlib简介</h4><blockquote>
<p>zlib是一个很好的压缩解压缩库.</p>
</blockquote>
<p>yum安装 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install zlib -y</span><br></pre></td></tr></table></figure>
<p>源码安装:<br>查看本机是否安装好zlib<br> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">whereis zlib</span><br></pre></td></tr></table></figure><br>如果安装好会输出路径，这样直接跳过前两步安装步骤：    </p>
<ul>
<li>下载源码包        </li>
<li>解压，编辑安装</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure  </span><br><span class="line"> make </span><br><span class="line"> sudo make install</span><br></pre></td></tr></table></figure>
<p>如果在安装时设定了路径则需要:<br>如./configure –prefix=/usr/zlib   </p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/ld.so.conf.d/zlib.conf</span><br><span class="line">/usr/zlib/bin  <span class="comment">#在其中添加刚才的路径  </span></span><br><span class="line">ldconfig <span class="comment">#加载安装的库文件	</span></span><br></pre></td></tr></table></figure>
<h3 id="4-解压安装openssl"><a href="#4-解压安装openssl" class="headerlink" title="4.解压安装openssl"></a>4.解压安装openssl</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar xzvf openssl-1.0.2h.tar.gz  </span><br><span class="line"><span class="built_in">cd</span> openssl-1.0.2h  </span><br><span class="line">./config shared zlib  </span><br><span class="line">make  </span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<p>替换旧版openssl</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv /usr/bin/openssl /usr/bin/openssl.bak  </span><br><span class="line">mv /usr/include/openssl /usr/include/openssl.bak	</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/ssl/bin/openssl /usr/bin/openssl  	</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/ssl/include/openssl /usr/include/openssl</span><br></pre></td></tr></table></figure>
<p>配置库文件路径：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;/usr/local/ssl/lib&quot;</span> &gt;&gt;/etc/ld.so.conf</span><br><span class="line">ldconfig -v</span><br></pre></td></tr></table></figure>
<h3 id="5-查看是否升级成功"><a href="#5-查看是否升级成功" class="headerlink" title="5.查看是否升级成功"></a>5.查看是否升级成功</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl version -a</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux基础服务</category>
      </categories>
      <tags>
        <tag>openssl</tag>
      </tags>
  </entry>
  <entry>
    <title>vps编译php报错[ext/fileinfo/libmagic/apprentice.lo]</title>
    <url>/fd6f40e2.html</url>
    <content><![CDATA[<p>php编译安装执行make时报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/sh /root/php-5.6.31/libtool --silent --preserve-dup-deps --mode=compile cc -I/root/php-5.6.31/ext/fileinfo/libmagic -Iext/fileinfo/ -I/root/php-5.6.31/ext/fileinfo/ -DPHP_ATOM_INC -I/root/php-5.6.31/include -I/root/php-5.6.31/main -I/root/php-5.6.31 -I/root/php-5.6.31/ext/date/lib -I/root/php-5.6.31/ext/ereg/regex -I/usr/include/libxml2 -I/usr/include/freetype2 -I/root/php-5.6.31/ext/mbstring/oniguruma -I/root/php-5.6.31/ext/mbstring/libmbfl -I/root/php-5.6.31/ext/mbstring/libmbfl/mbfl -I/root/php-5.6.31/ext/sqlite3/libsqlite -I/root/php-5.6.31/TSRM -I/root/php-5.6.31/Zend    -I/usr/include -g -O2 -fvisibility=hidden  -c /root/php-5.6.31/ext/fileinfo/libmagic/apprentice.c -o ext/fileinfo/libmagic/apprentice.lo</span><br><span class="line">cc: Internal error: Killed (program cc1)</span><br><span class="line">Please submit a full bug report.</span><br><span class="line">See &lt;http://bugzilla.redhat.com/bugzilla&gt; <span class="keyword">for</span> instructions.</span><br><span class="line">make: *** [ext/fileinfo/libmagic/apprentice.lo] Error 1</span><br></pre></td></tr></table></figure>
<p>这是因为个人vps内存太小没到1G引起的，在./configure时加–disable-fileinfo成功解决</p>
]]></content>
      <categories>
        <category>故障记录</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>企业级私有镜像仓库Harbor</title>
    <url>/932165fe.html</url>
    <content><![CDATA[<blockquote>
<p>Harbor是vmware开源的一个私有镜像仓库软件，其提供了一个网页管理界面。<br> Harbor的安装需要先安装docker，docker-compose</p>
</blockquote>
<h4 id="Docker安装："><a href="#Docker安装：" class="headerlink" title="Docker安装："></a>Docker安装：</h4><p>docker安装官方文档：<a href="https://docs.docker.com/install/linux/docker-ce/centos/#install-using-the-repository">https://docs.docker.com/install/linux/docker-ce/centos/#install-using-the-repository</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2 <span class="comment">#安装必要的软件</span></span><br><span class="line">yum-config-manager --add-repo  <span class="comment">#添加docker官方源 </span></span><br><span class="line">yum install docker-ce <span class="comment">#安装docker社区版</span></span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>
<p>附一个更改国内镜像源的方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vi /etc/docker/daemon.json</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;registry-mirrors&quot;</span>: [ <span class="string">&quot;https://registry.docker-cn.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#改完后重启docker</span></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="docker-compose安装"><a href="#docker-compose安装" class="headerlink" title="docker-compose安装"></a>docker-compose安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#下载2进制包直接解压安装即可</span></span><br><span class="line">unzip docker-compose-linux-x86_64.zip</span><br><span class="line">chmod  +x docker-compose</span><br><span class="line">mv docker-compose /usr/bin</span><br></pre></td></tr></table></figure>
<h4 id="Harbor安装"><a href="#Harbor安装" class="headerlink" title="Harbor安装"></a>Harbor安装</h4><blockquote>
<p>官网github地址：https:github.com/vmware/harbor</p>
</blockquote>
<blockquote>
<p>自签证书文档地址：<a href="https://github.com/vmware/harbor/blob/master/docs/configure_https.md">https://github.com/vmware/harbor/blob/master/docs/configure_https.md</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#下载安装包并解压：</span></span><br><span class="line">tar xf harbor-offline-installer-v1.4.0.tgz</span><br><span class="line"><span class="built_in">cd</span> harbor</span><br><span class="line">mkdir ssl</span><br><span class="line"><span class="built_in">cd</span> ssl</span><br><span class="line"><span class="comment">#生成ca证书：</span></span><br><span class="line">openssl req \</span><br><span class="line">    -newkey rsa:4096 -nodes -sha256 -keyout ca.key \</span><br><span class="line">-x509 -days 365 -out ca.crt</span><br><span class="line"> </span><br><span class="line"><span class="comment">#这一步中hostname要输入域名：如reg.vaedit.com</span></span><br><span class="line">openssl req \</span><br><span class="line">    -newkey rsa:4096 -nodes -sha256 -keyout reg.vaedit.com.key \</span><br><span class="line">    -out reg.vaedit.com.csr</span><br><span class="line"> </span><br><span class="line">openssl x509 -req -days 365 -<span class="keyword">in</span> reg.vaedit.com.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out reg.vaedit.com.crt</span><br></pre></td></tr></table></figure>
<p>修改harbor配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#vim harbor.cfg</span></span><br><span class="line">hostname = reg.vaedit.com</span><br><span class="line">ui_url_protocol = https <span class="comment">#https认证</span></span><br><span class="line">ssl_cert = ./ssl/reg.vaedit.com.crt <span class="comment">#生成的证书路径</span></span><br><span class="line">ssl_cert_key = ./ssl/reg.vaedit.com.key</span><br><span class="line">harbor_admin_password = 12345 <span class="comment">#设置密码</span></span><br><span class="line">./prepare</span><br><span class="line">./install.sh</span><br><span class="line">docker-compose ps <span class="comment">#查看docker-compose 启动的服务</span></span><br></pre></td></tr></table></figure>

<p>然后在本地电脑进行本地解析：</p>
<p><a href="https://reg.vaedit.com/">https://reg.vaedit.com</a> 访问</p>
<p>默认账号密码：</p>
<p>admin 12345</p>
<p>然后就可以创建项目：共有和私有(共有不需要认证，只能下载，不能上传，私有需要认证，可以通过定义不同的角色来控制权限如管理员，开发人员，访客。)</p>
<p>创建用户然后分配给项目</p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/29b1fa7f720e40809953c3d836ff2e1e~tplv-k3u1fbpfcp-zoom-1.image"></p>
<h4 id="客户端使用harbor仓库"><a href="#客户端使用harbor仓库" class="headerlink" title="客户端使用harbor仓库"></a>客户端使用harbor仓库</h4><ol>
<li><p>还是得本地域名解析</p>
<p>在/etc/hosts中添加：</p>
<p>192.168.0.16 reg.vaedit.com</p>
</li>
<li><p>把域名证书拷贝到客户端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /etc/docker/certs.d/reg.vaedit.com -p</span><br></pre></td></tr></table></figure>
<p>然后把证书的crt拷贝到该目录下</p>
</li>
<li><p>登录认证： </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker login reg.vaedit.com --username=vaedit --password=xxxx</span><br></pre></td></tr></table></figure>
<p>上传先打tag再push, 格式为 reg.vaedit.com/项目名(test)/nginx:v1</p>
</li>
</ol>
]]></content>
      <categories>
        <category>k8s生态圈</category>
      </categories>
      <tags>
        <tag>Harbor</tag>
      </tags>
  </entry>
  <entry>
    <title>记录一次因服务器阵列卡坏掉而导致的回档操作</title>
    <url>/7f79a41.html</url>
    <content><![CDATA[<h4 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h4><ol>
<li>周一上午刚到公司便接到策划同事发来的消息，公司某老项目游戏有玩家报登录不上。</li>
<li>于是便登录相关项目服务器，执行脚本，结果如下图：</li>
</ol>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/299a8d666a544ca9b9691af88fb7aa06~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p>当时返回无返回结果，及红色框内无返回值。第一直觉便觉得是不是对应服务器网络有问题。</p>
<a id="more"></a>

<h4 id="处理过程"><a href="#处理过程" class="headerlink" title="处理过程"></a>处理过程</h4><ol>
<li><p>ping了对应服务器，结果响应正常，尝试登录服务器结果登录不上，再使用telnet 命令测试对应端口正常。初步怀疑是否是sshd程序卡死，但由于正常玩家都无法登录游戏，所以排除单单sshd程序故障。</p>
</li>
<li><p>由于是物理机，就及时联系机房管理员，重启下服务器。等待约半个小时还没好，就再次询问机房人员，对方回复，由于阵列卡故障，导致磁盘文件系统损坏，经修复无果，无法正常启动服务器，为尽快恢复业务。提出新找一台服务器，安装相同版本系统，相同分区，然后把故障服务器上的磁盘挂载到新服务器上，拷贝出原磁盘上的数据到新服务器磁盘上，进行恢复业务（再三确认原盘数据是否会有风险，机房给的答复是没有风险，于是便开始动手干）。</p>
</li>
<li><p>通过拷贝原盘数据到新盘，快速部署好业务环境后，启动mysql，nginx，php-fpm等进程，恢复业务（在这过程中发现原盘根目录下etc目录下所有文件都丢失，本地数据库备份目录下文件也都丢失，隐隐不好的感觉，好在其他目录下文件结构都完整，数据库目录结构也完整），结果后续陆续有玩家上报角色丢失。</p>
</li>
<li><p>立马创建实例，把前一天远程备份恢复到该实例下。通过两个库中角色信息对比，发现是有数据记录丢失。</p>
</li>
<li><p>尝试通过把缺失玩家信息记录复制到现在外网数据库中来实现恢复玩家角色，经过尝试，不可行。</p>
</li>
<li><p>于是只能尽快进行回档操作，由于远程备份是每天凌晨4点，服务器硬件故障经客服统计玩家反馈为2点左右出现，所以用昨天凌晨4的远程备份来进行回档操作。</p>
</li>
<li><p>通过回档，玩家角色数据恢复</p>
</li>
</ol>
]]></content>
      <categories>
        <category>故障记录</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>rsync服务搭建</title>
    <url>/12f6eaa3.html</url>
    <content><![CDATA[<h4 id="server端搭建"><a href="#server端搭建" class="headerlink" title="server端搭建"></a>server端搭建</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget  http://rsync.samba.org/ftp/rsync/src/rsync-3.0.7.tar.gz</span><br><span class="line">tar xf rsync-3.0.7.tar.gz</span><br><span class="line"><span class="built_in">cd</span> rsync-3.0.7</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/rsync</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h5 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/rsyncd.conf</span><br><span class="line"><span class="comment">#全局设置</span></span><br><span class="line">uid = root <span class="comment">#守护进程所属的uid，默认是nobody，可能会碰到文件或目录权限问题，可以用root</span></span><br><span class="line">gid = root</span><br><span class="line">port = 873 <span class="comment">#指定监听端口，默认是873，可以自己指定</span></span><br><span class="line">use chroot = no</span><br><span class="line">max connections = 30</span><br><span class="line">pid file = /var/run/rsyncd.pid</span><br><span class="line">lock file = /var/run/rsyncd.lock 设置rsync运行时lock文件的位置</span><br><span class="line"><span class="built_in">log</span> file = /var/<span class="built_in">log</span>/rsyncd.log <span class="comment">#记录传输文件的日志</span></span><br><span class="line">transfer logging = yes <span class="comment">#记录传输文件的日志</span></span><br><span class="line"><span class="built_in">log</span> format = %t%a%m%f%b <span class="comment">#日志格式</span></span><br><span class="line">syslog facility = local3 <span class="comment">#日志级别</span></span><br><span class="line">timeout = 300</span><br><span class="line">ignore errors = yes <span class="comment">#是否忽略错误</span></span><br><span class="line">list = no <span class="comment">#当查看服务器上提供了哪些目录时是否列出来，no比较安全</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#模块定义</span></span><br><span class="line"><span class="comment">#主要是定义服务器哪个目录要被同步。</span></span><br><span class="line"><span class="comment">#每个模块都要以[name]形式。这个名字就是在 rsync 客户端看到的名字。</span></span><br><span class="line"><span class="comment">#但是服务器真正同步的数据是通过 path 指定的。可以依次创建多个模块。</span></span><br><span class="line"><span class="comment">#每个模块要指定认证用户、密码文件，但排除并不是必须的。</span></span><br><span class="line">[script]</span><br><span class="line"><span class="built_in">read</span> only = yes  <span class="comment">#只读，也就是客户端只能下载，不能上传</span></span><br><span class="line"><span class="comment">#write only = yes #只写选择，只让客户端到服务器上写入</span></span><br><span class="line">path = /root/script <span class="comment">#需要同步的路径</span></span><br><span class="line">comment = script <span class="comment">#本模块注释，可选</span></span><br><span class="line">auth users = <span class="built_in">test</span>  <span class="comment">#认证的用户</span></span><br><span class="line">secrets file = /etc/rsync.pas  <span class="comment">#密码文件路径</span></span><br><span class="line">hosts allow = 172.96.248.250  <span class="comment">#允许访问的IP，可以指定单个IP，也可以指定整个网段，能提高安全性。格式是 ip 与 ip 之间、ip 和网段之间、网段和网段之间要用空格隔开；</span></span><br><span class="line">exclude = error_log httpd.pid <span class="comment">#忽略的文件或目录</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[web]</span><br><span class="line"><span class="built_in">read</span> only = yes</span><br><span class="line">path = /data/www</span><br><span class="line">comment = web</span><br><span class="line">auth users = <span class="built_in">test</span></span><br><span class="line">secrets file = /etc/rsync.pas</span><br><span class="line">hosts allow = 172.96.248.250 <span class="comment">#白名单</span></span><br><span class="line">hosts deny = ipaddress/netmask   <span class="comment">#黑名单</span></span><br><span class="line"></span><br><span class="line">此处需要注意：</span><br><span class="line">（1）默认规则为允许访问，二者都不出现时</span><br><span class="line">（2）只出现hosts allow：定义白名单；但没有被匹配到的由默认规则处理，即为允许</span><br><span class="line">（3）只出现hosts deny：定义黑名单；出现在名单中的都被拒绝</span><br><span class="line">（4）二者同时出现，先检查hosts allow,如果匹配就allow，否则，检查hosts deny 如果匹配则拒绝，如二者均无匹配，则使用默认的，即允许</span><br><span class="line"></span><br><span class="line">vim /etc/rsync.pas</span><br><span class="line"><span class="built_in">test</span>:12345 <span class="comment">#账号密码</span></span><br><span class="line"> </span><br><span class="line">chmod 600 /etc/rsync.pas</span><br></pre></td></tr></table></figure>

<h5 id="启动服务端rsync"><a href="#启动服务端rsync" class="headerlink" title="启动服务端rsync"></a>启动服务端rsync</h5><ol>
<li>/usr/local/rsync/bin/rsync  –daemon –config=/etc/rsyncd.conf 默认监听873端口</li>
<li>xinet方式启动</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1).修改 &#x2F;etc&#x2F;services，加入以下内容，如果已经有可以不加，如果端口改了，需要改掉 873 端口为指定端口</span><br><span class="line"></span><br><span class="line">rsync　　873&#x2F;tcp　　# rsync </span><br><span class="line">rsync　　873&#x2F;udp　　# rsync</span><br><span class="line"></span><br><span class="line">2).修改 &#x2F;etc&#x2F;xinetd.d&#x2F;rsync，主要是要打开rsync這個daemon, 一旦有rsync client要连接時, xinetd会把它转介給 rsyncd(port 873)。</span><br><span class="line">service rsync</span><br><span class="line">&#123;</span><br><span class="line">    disable &#x3D; no</span><br><span class="line">    socket_type     &#x3D; stream</span><br><span class="line">    wait            &#x3D; no</span><br><span class="line">    user            &#x3D; root</span><br><span class="line">    server          &#x3D; &#x2F;usr&#x2F;bin&#x2F;rsync</span><br><span class="line">    server_args     &#x3D; --daemon --config&#x3D;&#x2F;etc&#x2F;rsynd.conf</span><br><span class="line">    log_on_failure  +&#x3D; USERID</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">3).重启 xinetd</span><br><span class="line">service xinetd restart</span><br></pre></td></tr></table></figure>

<h4 id="client端安装配置"><a href="#client端安装配置" class="headerlink" title="client端安装配置"></a>client端安装配置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install rsync -y #如果yum安装的版本不行，则用源码安装并配置环境变量即可</span><br><span class="line">vim &#x2F;etc&#x2F;rsync.pas</span><br><span class="line">123456 #密码</span><br><span class="line">chmod 600 &#x2F;etc&#x2F;rsync.pas</span><br><span class="line">rsync -aP --delete &#x2F;root&#x2F;script test@172.96.205.214::script --password-file&#x3D;&#x2F;etc&#x2F;rsync.pas</span><br></pre></td></tr></table></figure>

<h4 id="rsync-选项"><a href="#rsync-选项" class="headerlink" title="rsync 选项"></a>rsync 选项</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-n：测试，在不确定命令是否能按照意愿执行时，务必要实现测试</span><br><span class="line">-q：--quiet，静默模式</span><br><span class="line">-P |--partial 保留那些因故没有完全传输的文件，以是加快随后的再次传输。</span><br><span class="line">-a, --archive 归档模式，表示以递归方式传输文件，并保持所有文件属性，等于-rlptgoD。</span><br><span class="line">-z, --compress 对备份的文件在传输时进行压缩处理。</span><br><span class="line">-v, --verbose 详细模式输出。</span><br><span class="line">-q, --quiet 精简输出模式。</span><br><span class="line">-r, --recursive 对子目录以递归模式处理。</span><br><span class="line">-l, --links 保留软链结。</span><br><span class="line">-p, --perms 保持文件权限。</span><br><span class="line">-o, --owner 保持文件属主信息。</span><br><span class="line">-g, --group 保持文件属组信息。</span><br><span class="line">-t, --times 保持文件时间信息。</span><br><span class="line">-D, --devices 保持设备文件信息。</span><br><span class="line">-e, --rsh&#x3D;command 指定使用rsh、ssh方式进行数据同步。</span><br><span class="line">--rsync-path&#x3D;PATH 指定远程服务器上的rsync命令所在路径信息。</span><br><span class="line">--delete 删除那些接收端还有而发送端已经不存在的文件。</span><br><span class="line">-R, --relative 使用相对路径信息。</span><br><span class="line">-c, --checksum 打开校验开关，强制对文件传输进行校验。</span><br><span class="line">-u, --update 仅仅进行更新，也就是跳过所有已经存在于DST，并且文件时间晚于要备份的文件，不覆盖更新的文件。</span><br><span class="line">--address 绑定到特定的地址。</span><br><span class="line">--config&#x3D;FILE 指定其他的配置文件，不使用默认的rsyncd.conf文件。</span><br><span class="line">--port&#x3D;PORT 指定其他的rsync服务端口。</span><br><span class="line">--progress：显示进度条</span><br></pre></td></tr></table></figure>


<h4 id="rsync基于ssh同步"><a href="#rsync基于ssh同步" class="headerlink" title="rsync基于ssh同步"></a>rsync基于ssh同步</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rsync  -aP  --delete  root@192.168.0.10:/data/www/webapps  /data/www/webapps</span><br><span class="line"><span class="comment">#如果想每次同步不输入密码，需要做Linux主机之间免密码登录。</span></span><br><span class="line"><span class="comment">#如果ssh端口不是22,则需要使用如下方式执行</span></span><br><span class="line">rsync -aP -e <span class="string">&#x27;ssh -p 27209&#x27;</span> root@172.96.205.214:/root/script  /root/script3</span><br></pre></td></tr></table></figure>

<p><strong>如果遇到该报错</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash: rsync: command not found</span><br><span class="line">rsync: connection unexpectedly closed (0 bytes received so far) [receiver]</span><br><span class="line">rsync error: error in rsync protocol data stream (code 12) at io.c(600) [receiver&#x3D;3.0.6]</span><br></pre></td></tr></table></figure>

<p><strong>请在两台服务器上都执行yum install rsync -y,或者源码安装完后，做一个软连接，让rsync命令能在PATH路径中找到</strong></p>
<h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><p>1、如果使用命令时只指定源而不指定目标，仅会将源以列表的形式显示而不同步</p>
<p>2、rsync命令使用中，如果源参数的末尾有斜线，只会复制指定目录的内容，而不复制目录本身，没有斜线，则会复制目录本身，包括目录</p>
<h4 id="rsync实时同步配置"><a href="#rsync实时同步配置" class="headerlink" title="rsync实时同步配置"></a>rsync实时同步配置</h4><h5 id="rsync-inotify"><a href="#rsync-inotify" class="headerlink" title="rsync+inotify"></a>rsync+inotify</h5><p>Rsync安装完毕后，需要安装inotify文件检查软件。同时为了同步的时候不需要输入密码，这样可以使用ssh免密钥方式进行同步。</p>
<ul>
<li><h5 id="inotify安装"><a href="#inotify安装" class="headerlink" title="inotify安装"></a>inotify安装</h5></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;github.com&#x2F;downloads&#x2F;rvoicilas&#x2F;inotify-tools&#x2F;inotify-tools-3.14.tar.gz</span><br><span class="line">tar xf inotify-tools-3.14.tar.gz</span><br><span class="line">cd inotify-tools-3.14</span><br><span class="line">.&#x2F;configure</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<ul>
<li><h4 id="监控脚本"><a href="#监控脚本" class="headerlink" title="监控脚本"></a>监控脚本</h4></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#写一个脚本时刻监控同步目录的变化：</span></span><br><span class="line">vim auto_inotify.sh</span><br><span class="line"><span class="meta">#!/bin/sh  </span></span><br><span class="line">src=/data/webapps/www/</span><br><span class="line">des=/var/www/html/</span><br><span class="line">ip=192.168.0.11</span><br><span class="line">inotifywait -mrq --timefmt <span class="string">&#x27;%d/%m/%y-%H:%M&#x27;</span> --format <span class="string">&#x27;%T %w%f&#x27;</span> -e modify,delete,create,attrib <span class="variable">$&#123;src&#125;</span> | <span class="keyword">while</span> <span class="built_in">read</span> file  </span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  rsync -aP --delete <span class="variable">$src</span> root@<span class="variable">$ip</span>:<span class="variable">$des</span>    </span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#后台一直执行</span></span><br><span class="line">nohup sh auto_inotify.sh &amp;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux基础服务</category>
      </categories>
      <tags>
        <tag>rsync</tag>
      </tags>
  </entry>
  <entry>
    <title>contextmanager</title>
    <url>/b4fb896d.html</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用contextmanager，设置上下文</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DBTools_V2</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, host=<span class="string">&#x27;192.168.0.188&#x27;</span>, port=<span class="number">3306</span>, db=<span class="string">&#x27;xx&#x27;</span>, user=<span class="string">&#x27;xx&#x27;</span>, passwd=<span class="string">&#x27;xx?&#x27;</span>, charset=<span class="string">&#x27;utf8&#x27;</span></span>):</span></span><br><span class="line">        <span class="comment"># 建立连接</span></span><br><span class="line">        self.conn = pymysql.connect(host=host, port=port, db=db, user=user, passwd=passwd, charset=charset)</span><br><span class="line">        <span class="comment"># 创建游标，操作设置为字典类型</span></span><br><span class="line">        self.cur = self.conn.cursor(cursor=pymysql.cursors.DictCursor)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">select_by_parameters</span>(<span class="params">self, sql, params=None</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.cur.execute(sql, params)</span><br><span class="line">            result = self.cur.fetchall()</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_by_parameters</span>(<span class="params">self, sql, params=None</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            count = self.cur.execute(sql, params)</span><br><span class="line">            <span class="keyword">return</span> count</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_mysql_connect</span>(<span class="params">host=<span class="string">&#x27;192.168.0.188&#x27;</span>, port=<span class="number">3306</span>, db=<span class="string">&#x27;xx&#x27;</span>, user=<span class="string">&#x27;xx&#x27;</span>, passwd=<span class="string">&#x27;xx?&#x27;</span>, charset=<span class="string">&#x27;utf8&#x27;</span></span>):</span></span><br><span class="line">    <span class="comment"># with 执行部分</span></span><br><span class="line">    print(<span class="string">&quot;开始执行&quot;</span>)</span><br><span class="line">    db = DBTools_V2(host=host, port=port, db=db, user=user, passwd=passwd, charset=charset)</span><br><span class="line">    <span class="comment"># as 赋值</span></span><br><span class="line">    <span class="keyword">yield</span> db</span><br><span class="line">    <span class="comment"># 执行完代码后的处理</span></span><br><span class="line">    db.conn.commit()</span><br><span class="line">    db.cur.close()</span><br><span class="line">    db.conn.close()</span><br></pre></td></tr></table></figure>

<a id="more"></a>]]></content>
      <categories>
        <category>python运维</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>迁移记录</title>
    <url>/7a001119.html</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;今日把博客文章迁移到hexo，仅此作为记录&quot;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>日志记录</category>
      </categories>
      <tags>
        <tag>个人记录</tag>
      </tags>
  </entry>
  <entry>
    <title>curl报错记录</title>
    <url>/3a6ce56f.html</url>
    <content><![CDATA[<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>线上服务器使用curl访问苹果接口，访问报错如图</p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/805d5abfb29a4c8581515a547e367dda~tplv-k3u1fbpfcp-watermark.webp"></p>
<p>无论用ip访问还是域名访问都报错，本地访问接口地址正常，ping也正常，只有线上服务器访问报错</p>
<h4 id="排查解决"><a href="#排查解决" class="headerlink" title="排查解决"></a>排查解决</h4><p>由于没有遇到过类似情，同地域其他服务器都能正常访问，只有一个项目服务器不能访问，初步怀疑DNS问题，通过切换DNS发现还是没能解决，排除DNS问题。</p>
<p>通过curl -v 更详细的看下报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X GET https://appleid.apple.com/auth/keys -v</span><br></pre></td></tr></table></figure>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ade06a24cbdf4f1b8f7dd5553fede616~tplv-k3u1fbpfcp-watermark.webp"></p>
<p>从上图发现报错和NSS有关，查阅资料发现可能是nss需要升级，所以找测试环境的同类型服务器测试升级</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install nss libcurl -y;yum update nss libcurl -y</span><br></pre></td></tr></table></figure>
<p>恢复正常<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bcb8cecad5dd4002821ac38110c7d9ae~tplv-k3u1fbpfcp-watermark.webp"></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><blockquote>
<p>该问题是由于生产环境使用centos6.x版本的curl及nss版本过低引起，升级版本后可以正常访问</p>
</blockquote>
]]></content>
      <categories>
        <category>故障记录</category>
      </categories>
      <tags>
        <tag>curl</tag>
      </tags>
  </entry>
  <entry>
    <title>Django学习1</title>
    <url>/b8ae5402.html</url>
    <content><![CDATA[<h4 id="安装Django"><a href="#安装Django" class="headerlink" title="安装Django"></a>安装Django</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install django==2.2.0</span><br><span class="line"><span class="meta">#</span><span class="bash">pip install djangorestframework</span></span><br></pre></td></tr></table></figure>



<h4 id="基础函数视图"><a href="#基础函数视图" class="headerlink" title="基础函数视图"></a>基础函数视图</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env/python</span></span><br><span class="line"><span class="comment"># --*-- coding:utf-8 --*--</span></span><br><span class="line"><span class="comment"># Author: Vaedit</span></span><br><span class="line"><span class="comment"># @Time: </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse,Http404</span><br><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_exempt <span class="comment"># 解决跨域</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@csrf_exempt </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">TestView</span>(<span class="params">request, *args, **kwargs</span>):</span></span><br><span class="line">    <span class="comment">#return HttpResponse(&quot;ok&quot;)</span></span><br><span class="line">    print(request.method)</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;GET&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;POST&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;PUT&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;PUT&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;DELETE&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;DELETE&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> Http404()</span><br></pre></td></tr></table></figure>



<h4 id="类视图继承View"><a href="#类视图继承View" class="headerlink" title="类视图继承View"></a>类视图继承View</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestViewV2</span>(<span class="params">View</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self,request,*args,**kwargs</span>):</span></span><br><span class="line">        print(request.GET)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;GET view V2&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="comment"># print(request.body)</span></span><br><span class="line">        print(request.POST)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;POST view v2&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;PUT view v2&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;DELETE view v2&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse,Http404</span><br><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_exempt <span class="comment"># 解决跨域</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> TestData</span><br><span class="line">retdata = &#123;</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;data&quot;</span>: <span class="literal">None</span>,</span><br><span class="line">    <span class="string">&quot;message&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestViewV3</span>(<span class="params">View</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_object</span>(<span class="params">self, pk</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            obj = TestData.objects.get(pk=pk) <span class="comment"># 获取单条数据对象</span></span><br><span class="line">        <span class="keyword">except</span> Publisher.DoesNotExist <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">raise</span> Http404()</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="comment"># 如果有pk，则返回单条数据详情</span></span><br><span class="line">        pk = kwargs.get(<span class="string">&#x27;pk&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> pk:</span><br><span class="line">            obj = self.get_object(pk)</span><br><span class="line">            _data_dict = &#123;</span><br><span class="line">                <span class="string">&quot;pk&quot;</span>: obj.pk,</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: obj.name,</span><br><span class="line">                <span class="string">&quot;address&quot;</span>: obj.address,</span><br><span class="line">            &#125;</span><br><span class="line">            retdata[<span class="string">&#x27;data&#x27;</span>] = _data_dict</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(retdata)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 返回数据列表，所有数据</span></span><br><span class="line">            objs = TestData.objects.all()</span><br><span class="line">            _data_list = []</span><br><span class="line">            <span class="keyword">for</span> obj <span class="keyword">in</span> objs:</span><br><span class="line">                _data_list.append(&#123;</span><br><span class="line">                    <span class="string">&quot;pk&quot;</span>: obj.pk,</span><br><span class="line">                    <span class="string">&quot;name&quot;</span>: obj.name,</span><br><span class="line">                    <span class="string">&quot;address&quot;</span>: obj.address,</span><br><span class="line">                &#125;)</span><br><span class="line">            retdata[<span class="string">&quot;data&quot;</span>] = _data_list</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(retdata, safe=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> request.content_type == <span class="string">&#x27;application/json&#x27;</span>: </span><br><span class="line">            data = request.body <span class="comment"># 获取post请求内容</span></span><br><span class="line">            print(data)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                data = json.loads(data)</span><br><span class="line">                print(data)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                retdata[<span class="string">&#x27;code&#x27;</span>] = <span class="number">-1</span></span><br><span class="line">                retdata[<span class="string">&#x27;message&#x27;</span>] = e</span><br><span class="line">                <span class="keyword">return</span> JsonResponse(retdata)</span><br><span class="line">        <span class="keyword">elif</span> request.content_type == <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>:</span><br><span class="line">            data = request.POST.dict()</span><br><span class="line">            print(request.POST)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            retdata[<span class="string">&#x27;code&#x27;</span>] = <span class="number">-1</span></span><br><span class="line">            retdata[<span class="string">&#x27;data&#x27;</span>] = <span class="string">&quot;&quot;</span></span><br><span class="line">            retdata[<span class="string">&#x27;message&#x27;</span>] = <span class="string">&quot;Content-Type不支持当前&quot;</span></span><br><span class="line">            <span class="keyword">return</span> JsonResponse(retdata)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            p = TestData.objects.create(**data) <span class="comment"># 创建数据</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            retdata[<span class="string">&#x27;code&#x27;</span>] = <span class="number">-1</span></span><br><span class="line">            retdata[<span class="string">&#x27;message&#x27;</span>] = <span class="string">&quot;TestData create err &#123;&#125;&quot;</span>.format(e)</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(retdata)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            data[<span class="string">&#x27;pk&#x27;</span>] = p.pk</span><br><span class="line">            retdata[<span class="string">&quot;data&quot;</span>] = data</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(retdata)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        pk = kwargs.get(<span class="string">&#x27;pk&#x27;</span>)</span><br><span class="line">        self.get_object(pk)</span><br><span class="line">        <span class="keyword">if</span> request.content_type == <span class="string">&#x27;application/json&#x27;</span>:</span><br><span class="line">            data = request.body</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                data = json.loads(data)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                retdata[<span class="string">&#x27;code&#x27;</span>] = <span class="number">-1</span></span><br><span class="line">                retdata[<span class="string">&#x27;message&#x27;</span>] = e</span><br><span class="line">                <span class="keyword">return</span> JsonResponse(retdata)</span><br><span class="line">        <span class="keyword">elif</span> request.content_type == <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>:</span><br><span class="line">            data = request.POST.dict()</span><br><span class="line">            print(data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            retdata[<span class="string">&#x27;code&#x27;</span>] = <span class="number">-1</span></span><br><span class="line">            retdata[<span class="string">&#x27;message&#x27;</span>] = <span class="string">&quot;Content-Type不支持当前&quot;</span></span><br><span class="line">            <span class="keyword">return</span> JsonResponse(retdata)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            TestData.objects.filter(pk=pk).update(**data) <span class="comment"># 更新内容</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            retdata[<span class="string">&#x27;code&#x27;</span>] = <span class="number">-1</span></span><br><span class="line">            retdata[<span class="string">&#x27;message&#x27;</span>] = <span class="string">&#x27;Update pk &#123;&#125; err &#123;&#125;.&#x27;</span>.format(pk, e)</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(retdata)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(retdata)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        pk = kwargs.get(<span class="string">&#x27;pk&#x27;</span>)</span><br><span class="line">        self.get_object(pk)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            TestData.objects.get(pk=pk).delete() 删除数据</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            retdata[<span class="string">&#x27;code&#x27;</span>] = <span class="number">-1</span></span><br><span class="line">            retdata[<span class="string">&#x27;message&#x27;</span>] = <span class="string">&#x27;Delete pk &#123;&#125; err &#123;&#125;.&#x27;</span>.format(pk, e)</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(retdata)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(retdata)</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>python,Django</tag>
      </tags>
  </entry>
  <entry>
    <title>CentosYUM源报错</title>
    <url>/a151d928.html</url>
    <content><![CDATA[<h4 id="记录线上Centos6系统服务器，yum报错问题"><a href="#记录线上Centos6系统服务器，yum报错问题" class="headerlink" title="记录线上Centos6系统服务器，yum报错问题"></a>记录线上Centos6系统服务器，yum报错问题</h4><h5 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h5><ul>
<li>线上6版本服务器突发yum执行报错,“Invalid release/repo/arch combination/”</li>
</ul>
<p><img src="https://vaedit-images.oss-cn-beijing.aliyuncs.com/img/image-20201225151919549.png" alt="image-20201225151919549"></p>
<h5 id="处理过程"><a href="#处理过程" class="headerlink" title="处理过程:"></a>处理过程:</h5><p>由于Centos6已于今年11月停止支持,这是官方源站下的readme</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">This directory (and version of CentOS) is deprecated. Please see this FAQ</span><br><span class="line">concerning the CentOS release scheme:</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;wiki.centos.org&#x2F;FAQ&#x2F;General</span><br><span class="line"></span><br><span class="line">Please keep in mind that 6.0, 6.1, 6.2, 6.3, 6.4 , 6.5, 6.6, 6.7, 6.8 , 6.9 and 6.10 no longer get any updates, nor</span><br><span class="line">any security fix&#39;s.</span><br><span class="line">The whole CentOS 6 is *dead* and *shouldn&#39;t* be used anywhere at *all*</span><br></pre></td></tr></table></figure>

<p>由于centos6停止支持，官方把源移到了<a href="https://vault.centos.org/6.8/">https://vault.centos.org/6.8/</a> 下,所以会报错。</p>
<a id="more"></a>

<h5 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h5><p>原repo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[base]</span><br><span class="line">name=CentOS-<span class="variable">$releasever</span> - Base</span><br><span class="line">mirrorlist=http://mirrorlist.centos.org/?release=<span class="variable">$releasever</span>&amp;arch=<span class="variable">$basearch</span>&amp;repo=os&amp;infra=<span class="variable">$infra</span></span><br><span class="line"><span class="comment">#baseurl=http://mirrorlist.centos.org/centos/$releasever/os/$basearch/</span></span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6</span><br></pre></td></tr></table></figure>

<p>更改后：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[base]</span><br><span class="line">name=CentOS-<span class="variable">$releasever</span> - Base</span><br><span class="line"><span class="comment">#mirrorlist=http://vault.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=os&amp;infra=$infra</span></span><br><span class="line">baseurl=http://vault.centos.org/centos/<span class="variable">$releasever</span>/os/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="附repo配置"><a href="#附repo配置" class="headerlink" title="附repo配置"></a>附repo配置</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /etc/yum.repos.d/CentOS-Base.repo</span></span><br><span class="line">[base]</span><br><span class="line">name=CentOS-<span class="variable">$releasever</span> - Base</span><br><span class="line"><span class="comment">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=os&amp;infra=$infra</span></span><br><span class="line"><span class="comment">#baseurl=http://mirror.centos.org/centos/$releasever/os/$basearch/</span></span><br><span class="line">baseurl=http://vault.centos.org/centos/<span class="variable">$releasever</span>/os/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6</span><br><span class="line"></span><br><span class="line"><span class="comment">#released updates </span></span><br><span class="line">[updates]</span><br><span class="line">name=CentOS-<span class="variable">$releasever</span> - Updates</span><br><span class="line"><span class="comment">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=updates&amp;infra=$infra</span></span><br><span class="line"><span class="comment">#baseurl=http://mirror.centos.org/centos/$releasever/updates/$basearch/</span></span><br><span class="line">baseurl=http://vault.centos.org/centos/<span class="variable">$releasever</span>/updates/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6</span><br><span class="line"></span><br><span class="line"><span class="comment">#additional packages that may be useful</span></span><br><span class="line">[extras]</span><br><span class="line">name=CentOS-<span class="variable">$releasever</span> - Extras</span><br><span class="line"><span class="comment">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=extras&amp;infra=$infra</span></span><br><span class="line"><span class="comment">#baseurl=http://mirror.centos.org/centos/$releasever/extras/$basearch/</span></span><br><span class="line">baseurl=http://vault.centos.org/centos/<span class="variable">$releasever</span>/extras/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6</span><br><span class="line"></span><br><span class="line"><span class="comment">#additional packages that extend functionality of existing packages</span></span><br><span class="line">[centosplus]</span><br><span class="line">name=CentOS-<span class="variable">$releasever</span> - Plus</span><br><span class="line">mirrorlist=http://mirrorlist.centos.org/?release=<span class="variable">$releasever</span>&amp;arch=<span class="variable">$basearch</span>&amp;repo=centosplus&amp;infra=<span class="variable">$infra</span></span><br><span class="line"><span class="comment">#baseurl=http://mirror.centos.org/centos/$releasever/centosplus/$basearch/</span></span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6</span><br><span class="line"></span><br><span class="line"><span class="comment">#contrib - packages by Centos Users</span></span><br><span class="line">[contrib]</span><br><span class="line">name=CentOS-<span class="variable">$releasever</span> - Contrib</span><br><span class="line">mirrorlist=http://mirrorlist.centos.org/?release=<span class="variable">$releasever</span>&amp;arch=<span class="variable">$basearch</span>&amp;repo=contrib&amp;infra=<span class="variable">$infra</span></span><br><span class="line"><span class="comment">#baseurl=http://mirror.centos.org/centos/$releasever/contrib/$basearch/</span></span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># vim /etc/yum.repos.d/epel.repo</span></span><br><span class="line">[epel]</span><br><span class="line">name=Extra Packages <span class="keyword">for</span> Enterprise Linux 6 - <span class="variable">$basearch</span></span><br><span class="line">baseurl=http://archives.fedoraproject.org/pub/archive/epel/6.2017-11-07/<span class="variable">$basearch</span></span><br><span class="line"><span class="comment">#mirrorlist=https://mirrors.fedoraproject.org/metalink?repo=epel-6&amp;arch=$basearch</span></span><br><span class="line">failovermethod=priority</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-EPEL-6</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>由于后续centos会变为redhat的上游版本，后续可以支持Rocky Linux</p>
]]></content>
      <categories>
        <category>Linux基础服务</category>
      </categories>
      <tags>
        <tag>Linux,YUM</tag>
      </tags>
  </entry>
  <entry>
    <title>django接收并保存前端el-upload传递的文件</title>
    <url>/7ed37b22.html</url>
    <content><![CDATA[<h4 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;el-upload</span><br><span class="line">  class&#x3D;&quot;upload-demo&quot;</span><br><span class="line">  ref&#x3D;&quot;upload&quot;</span><br><span class="line">  action&#x3D;&quot;&#x2F;api&#x2F;v1&#x2F;yw-sql&quot;  &#x2F;&#x2F; 接口地址</span><br><span class="line">  multiple</span><br><span class="line">  :headers&#x3D;&quot;importHeaders&quot; &#x2F;&#x2F; 添加请求头token</span><br><span class="line">  :on-preview&#x3D;&quot;handlePreview&quot; &#x2F;&#x2F; 点击已上传的文件链接时的钩子, 可以通过 file.response 拿到服务端返回数据</span><br><span class="line">  :on-remove&#x3D;&quot;handleRemove&quot; &#x2F;&#x2F; 删除时的钩子</span><br><span class="line">  :file-list&#x3D;&quot;fileList&quot;</span><br><span class="line">  :auto-upload&#x3D;&quot;false&quot;&gt;  &#x2F;&#x2F; 是否自动上传</span><br><span class="line">  &lt;el-button slot&#x3D;&quot;trigger&quot; size&#x3D;&quot;small&quot; type&#x3D;&quot;primary&quot;&gt;选取文件&lt;&#x2F;el-button&gt;</span><br><span class="line">  &lt;el-button style&#x3D;&quot;margin-left: 10px;&quot; size&#x3D;&quot;small&quot; type&#x3D;&quot;success&quot; @click&#x3D;&quot;submitUpload&quot;&gt;上传到服务器&lt;&#x2F;el-button&gt;</span><br><span class="line">  &lt;div slot&#x3D;&quot;tip&quot; class&#x3D;&quot;el-upload__tip&quot;&gt;只能上传SQL文件，且不超过100M&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;el-upload&gt;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, request</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;接收文件&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        files = request.FILES.getlist(<span class="string">&quot;file&quot;</span>,<span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            sql_path = <span class="string">f&quot;<span class="subst">&#123;os.getcwd()&#125;</span>/sql/<span class="subst">&#123;file.name&#125;</span>&quot;</span></span><br><span class="line">            <span class="comment"># 写入文件</span></span><br><span class="line">            <span class="keyword">with</span> open(sql_path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                <span class="keyword">for</span> content <span class="keyword">in</span> file.chunks():</span><br><span class="line">                    print(content)</span><br><span class="line">                    f.write(content)</span><br><span class="line">        <span class="keyword">return</span> JSONApiResponse()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> JSONApiResponse(code=<span class="number">401</span>, msg=str(e))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Fabric远程后台执行脚本</title>
    <url>/34fbb0ff.html</url>
    <content><![CDATA[<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ul>
<li>工作中遇到项目启动，分为5个jar，项目有启动和关闭都有顺序要求，在使用fabric直接执行nohup stop.sh &amp;的时候，发现并没有执行成功过了，只会在远程机器上短时间看到该命令进程存在，然后退出，没有执行成功。</li>
</ul>
<h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><ol>
<li>使用已经存在daemon技术，如init、supervisord、upstart、systemd等</li>
<li>使用screen、tmux、dtach等工具来从当前shell中detach进程，注意关闭pty</li>
<li>使用nohup</li>
</ol>
<a id="more"></a>

<h5 id="nohup方式（比较麻烦，不推荐）"><a href="#nohup方式（比较麻烦，不推荐）" class="headerlink" title="nohup方式（比较麻烦，不推荐）"></a>nohup方式（比较麻烦，不推荐）</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(nohup sh stop.sh &gt;&amp; /dev/null &lt; /dev/null &amp;) &amp;&amp; sleep <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面这个没有尝试</span></span><br><span class="line">nohup sh -c <span class="string">&quot;( ( sh stop.sh &amp;&gt;/dev/null ) &amp; )</span></span><br></pre></td></tr></table></figure>

<p>如果脚本中含有nohup启动，记得也要按上述方式</p>
<h5 id="dtach方式"><a href="#dtach方式" class="headerlink" title="dtach方式"></a>dtach方式</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line"><span class="comment"># yum install dtach -y</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fabric <span class="keyword">import</span> Connection, Config</span><br><span class="line">config = Config(overrides=&#123;<span class="string">&#x27;load_ssh_configs&#x27;</span>:<span class="literal">False</span>,<span class="string">&quot;run.pty&quot;</span>: <span class="literal">False</span></span><br><span class="line">cmd=<span class="string">&#x27;cd /root/server &amp;&amp; sh start.sh&#x27;</span></span><br><span class="line">re = Connection(host=host, connect_timeout=<span class="number">2</span>, config=config).run(<span class="string">&#x27;dtach -n `mktemp -u /tmp/%s.XXXX` %s&#x27;</span>  % (<span class="string">&#x27;startGs&#x27;</span>,cmd))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="screen-推荐"><a href="#screen-推荐" class="headerlink" title="screen(推荐)"></a>screen(推荐)</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line"><span class="comment"># yum install screen -y</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fabric <span class="keyword">import</span> Connection, Config</span><br><span class="line">config = Config(overrides=&#123;<span class="string">&#x27;load_ssh_configs&#x27;</span>:<span class="literal">False</span>,<span class="string">&quot;run.pty&quot;</span>: <span class="literal">False</span>&#125;)</span><br><span class="line"></span><br><span class="line">Connection(host=host, connect_timeout=<span class="number">2</span>, config=config).run(<span class="string">&quot;screen -dmS test1 bash -c &#x27;source /etc/profile &amp;&amp; cd /root/server &amp;&amp; sh start.sh &amp;&amp; sleep 360&#x27;&quot;</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python运维</category>
      </categories>
      <tags>
        <tag>fabric</tag>
      </tags>
  </entry>
  <entry>
    <title>AWS-EC2遗失秘钥或密码如何重置密码或秘钥</title>
    <url>/319af7fb.html</url>
    <content><![CDATA[<blockquote>
<p>如果EC2实例忘记了密码或秘钥，该如何重置密码和秘钥呢？</p>
</blockquote>
<h5 id="方法1：输入用户信息"><a href="#方法1：输入用户信息" class="headerlink" title="方法1：输入用户信息"></a>方法1：输入用户信息</h5><p><strong>警告：</strong>在开始执行此过程之前，请注意以下事项：</p>
<ul>
<li>此过程需要停止和启动您的 EC2 实例。请注意，实例存储卷中的数据将丢失。有关更多信息，请参阅<a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/RootDeviceStorage.html#display-instance-root-device-type">确定实例的根设备类型</a>。请务必<a href="https://aws.amazon.com/premiumsupport/knowledge-center/back-up-instance-store-ebs/">备份您想保存在实例存储卷上的所有数据</a>。</li>
<li>停止并重新启动实例会更改实例的公有 IP 地址。在将外部流量路由到您的实例时，最佳做法是使用<a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">弹性 IP 地址</a>而不是公有 IP 地址。</li>
</ul>
<ol>
<li><p>创建<a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html#having-ec2-create-your-key-pair">新的密钥对</a>。</p>
</li>
<li><p>如果您在 Amazon EC2 控制台中创建私有密钥，<a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html#retrieving-the-public-key">请检索密钥对中的公钥</a>。</p>
</li>
<li><p>打开 <a href="https://console.aws.amazon.com/ec2/">Amazon EC2 控制台</a>。</p>
</li>
<li><p><a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html#starting-stopping-instances">停止您的实例</a>。</p>
</li>
<li><p>依次选择<strong>操作</strong>、<strong>实例设置</strong>和<strong>查看/更改用户数据</strong>。</p>
</li>
<li><p>将以下脚本复制到<strong>查看/更改用户数据</strong>对话框中：</p>
<a id="more"></a>

</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Content-Type: multipart/mixed; boundary=&quot;//&quot;</span><br><span class="line">MIME-Version: 1.0</span><br><span class="line"></span><br><span class="line">--//</span><br><span class="line">Content-Type: text/cloud-config; charset=&quot;us-ascii&quot;</span><br><span class="line">MIME-Version: 1.0</span><br><span class="line">Content-Transfer-Encoding: 7bit</span><br><span class="line">Content-Disposition: attachment; filename=&quot;cloud-config.txt&quot;</span><br><span class="line"></span><br><span class="line">#cloud-config</span><br><span class="line">cloud_final_modules:</span><br><span class="line">- [users-groups, once]</span><br><span class="line">users:</span><br><span class="line">  - name: username (用户名root/centos/ec2-user根据自己情况来)</span><br><span class="line">    ssh-authorized-keys: </span><br><span class="line">    - PublicKeypair(注意这里是直接填写完整的rsa-开头的公钥)</span><br></pre></td></tr></table></figure>

<p>将 <strong>username</strong> 替换为您的用户名，如 <strong>ec2-user</strong>。您可以输入默认用户名，或者如果先前已为该实例设置了自定义用户名，则输入此用户名。有关默认用户名的列表，请参阅<a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/connection-prereqs.html">连接到实例的一般先决条件</a>。</p>
<p>将 <strong>PublicKeypair</strong> 替换为第 2 步中检索到的公钥。确保输入以 <strong>ssh-rsa</strong> 开头的完整公钥。</p>
<ol start="7">
<li><p>选择<strong>保存</strong>。</p>
</li>
<li><p><a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html#starting-stopping-instances">启动您的实例</a>。</p>
</li>
<li><p>cloud-init 阶段完成后，请验证<a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html#retrieving-the-public-key">公钥是否已被替换</a>。</p>
</li>
</ol>
<p>​     <strong>重要提示：</strong>由于脚本包含密钥对，请删除<strong>用户数据</strong>字段中的脚本。</p>
<ol start="10">
<li><p><a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html#starting-stopping-instances">停止您的实例</a>。</p>
</li>
<li><p>依次选择<strong>操作</strong>、<strong>实例设置</strong>和<strong>查看/更改用户数据</strong>。</p>
</li>
<li><p>删除<strong>查看/更改用户数据</strong>对话框中的所有文本，然后选择<strong>保存</strong>。</p>
</li>
<li><p><a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html#starting-stopping-instances">启动您的实例</a>。</p>
</li>
</ol>
<p>​      <strong>注意：</strong>如果您的实例为 Amazon Linux 2 2.0.20190618 或更高版本，则可以使用 <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-connect-methods.html">EC2 Instance Connect</a> 连接到该实例。</p>
<h5 id="方法-2：使用-AWS-Systems-Manager"><a href="#方法-2：使用-AWS-Systems-Manager" class="headerlink" title="方法 2：使用 AWS Systems Manager"></a>方法 2：使用 AWS Systems Manager</h5><p>如果您无法访问的实例在 AWS Systems Manager 中被列为<a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/managed_instances.html">托管实例</a>，则可以使用<a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/automation-ec2reset.html"> AWSSupport-ResetAccess 文档</a>从丢失密钥对的场景中恢复。该自动化文档在指定的 EC2 实例上使用<a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Linux-Server-EC2Rescue.html">适用于 Linux 的 EC2Rescue</a> 工具来自动生成并添加新的 SSH（公有/私有）密钥对。</p>
<p>您的实例的新 SSH 私钥已加密并保存在 <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-parameter-store.html">AWS Systems Manager Parameter Store</a> 中。参数名称为 <strong>/ec2rl/openssh/instance_id/key</strong>。使用此参数的值作为内容创建一个新的 <strong>.pem</strong> 文件，并将其用于连接您无法访问的实例。</p>
<p><strong>注意：</strong>自动化工作流程会创建一个备份且启用密码的 Amazon 系统映像 (AMI)。新的 AMI 不会自动删除，而是保留在您的账户中。</p>
<p>要找到这些 AMI：</p>
<ol>
<li><p>打开 <a href="https://console.aws.amazon.com/ec2/">Amazon EC2 控制台</a>，然后选择 <strong>AMI</strong>。</p>
</li>
<li><p>在搜索字段中输入自动化执行 ID。</p>
</li>
</ol>
<blockquote>
<p>以上两个方法方法一尝试了好几次，没有成功，方法2由于实例并不是托管实例，无法使用</p>
<p>以上文档源文地址：<a href="https://aws.amazon.com/cn/premiumsupport/knowledge-center/user-data-replace-key-pair-ec2/">https://aws.amazon.com/cn/premiumsupport/knowledge-center/user-data-replace-key-pair-ec2/</a></p>
</blockquote>
<h5 id="方法三-磁盘转移大法（我使用该方法成功-终极方法，iptables不小心墙掉ssh端口也可以用该方法解决哦）"><a href="#方法三-磁盘转移大法（我使用该方法成功-终极方法，iptables不小心墙掉ssh端口也可以用该方法解决哦）" class="headerlink" title="方法三 磁盘转移大法（我使用该方法成功,终极方法，iptables不小心墙掉ssh端口也可以用该方法解决哦）"></a>方法三 磁盘转移大法（我使用该方法成功,终极方法，iptables不小心墙掉ssh端口也可以用该方法解决哦）</h5><ol>
<li>由于生产环境都是系统盘和数据盘区分，数据都是存储在数据盘上，这里就有可操作性空间</li>
<li>把数据卷断开源实例连接（这里也可以做快照）</li>
<li>新建一个和源实例一个镜像的新实例（包括地域，安全组，vpc子网，密钥对尽量保持一致，省的后面改）</li>
<li>把断开的数据卷关联到新实例上</li>
<li>登录新实例系统，挂载卷，能查看到mysql，nginx等数据就完美</li>
<li>安装需要的程序软件，尽量和源实例上版本保持一致，恢复环境后，从新把源实例上的弹性IP绑定到新实例上</li>
</ol>
]]></content>
      <categories>
        <category>AWS服务</category>
      </categories>
      <tags>
        <tag>AWS</tag>
      </tags>
  </entry>
  <entry>
    <title>Django分页</title>
    <url>/52969d8b.html</url>
    <content><![CDATA[<h4 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    authentication_classes = [SessionAuthentication, JSONWebTokenAuthentication]</span><br><span class="line">    permission_classes = [IsAuthenticated]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        result = &#123;</span><br><span class="line">            <span class="string">&quot;code&quot;</span>: <span class="number">200</span>,</span><br><span class="line">            <span class="string">&quot;message&quot;</span>: <span class="string">&quot;成功&quot;</span>,</span><br><span class="line">            <span class="string">&quot;data&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        page = int(request.GET.get(<span class="string">&quot;page&quot;</span>, <span class="number">1</span>))  <span class="comment"># 页码</span></span><br><span class="line">        limit = int(request.GET.get(<span class="string">&quot;limit&quot;</span>, <span class="number">10</span>))  <span class="comment"># 每页展示数量</span></span><br><span class="line">        name = request.GET.get(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;&quot;</span>)  <span class="comment"># 搜索</span></span><br><span class="line">        <span class="keyword">if</span> name == <span class="string">&quot;&quot;</span>:</span><br><span class="line">            value_list = list(</span><br><span class="line">                models.Test.objects.all().order_by(<span class="string">&quot;-id&quot;</span>).values()[(page - <span class="number">1</span>) * <span class="number">10</span>: limit * page])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            value_list = list(</span><br><span class="line">                models.Test.objects.filter(name__icontains=name).order_by(<span class="string">&quot;-id&quot;</span>).values()[</span><br><span class="line">                (page - <span class="number">1</span>) * <span class="number">10</span>: limit * page])</span><br><span class="line"></span><br><span class="line">        res = &#123;</span><br><span class="line">            <span class="string">&quot;list&quot;</span>: value_list,</span><br><span class="line">            <span class="string">&quot;total&quot;</span>: models.Test.objects.count()</span><br><span class="line">        &#125;</span><br><span class="line">        result[<span class="string">&quot;data&quot;</span>] = res</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(result)</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestViewSet</span>(<span class="params">ModelViewSet</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            &quot;code&quot;: &quot;200&quot;,</span></span><br><span class="line"><span class="string">            &quot;msg&quot;: &quot;succss&quot;,</span></span><br><span class="line"><span class="string">            &quot;data&quot;: []</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    authentication_classes = [JSONWebTokenAuthentication]  <span class="comment"># JWT验证</span></span><br><span class="line">    permission_classes = [IsCasbinVerify]</span><br><span class="line"></span><br><span class="line">    queryset = models.Test.objects.all()</span><br><span class="line">    serializer_class = Test1Serializer</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">list</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        res = &#123;</span><br><span class="line">            <span class="string">&quot;code&quot;</span>: <span class="number">200</span>,</span><br><span class="line">            <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">            <span class="string">&quot;data&quot;</span>: []</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            queryset = models.Test.objects.filter(name__icontains=request.GET.get(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line"></span><br><span class="line">            page = self.paginate_queryset(queryset)</span><br><span class="line">            <span class="keyword">if</span> page <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                serializer = self.get_serializer(page, many=<span class="literal">True</span>)</span><br><span class="line">                <span class="keyword">return</span> self.get_paginated_response(serializer.data)</span><br><span class="line"></span><br><span class="line">            serializer = self.get_serializer(queryset, many=<span class="literal">True</span>)</span><br><span class="line">            res[<span class="string">&quot;data&quot;</span>] = serializer.data</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            res[<span class="string">&quot;code&quot;</span>] = <span class="number">-1</span></span><br><span class="line">            res[<span class="string">&quot;msg&quot;</span>] = e.args[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JsonResponse(res)</span><br></pre></td></tr></table></figure>

<h4 id="方法3"><a href="#方法3" class="headerlink" title="方法3"></a>方法3</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestViewSet</span>(<span class="params">ModelViewSet</span>):</span></span><br><span class="line">    authentication_classes = [JSONWebTokenAuthentication]  <span class="comment"># JWT验证</span></span><br><span class="line">    permission_classes = [IsCasbinVerify]</span><br><span class="line">    queryset = models.Test.objects.all()</span><br><span class="line">    serializer_class = TestSerializer</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">list</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        res = &#123;</span><br><span class="line">            <span class="string">&quot;code&quot;</span>: <span class="number">200</span>,</span><br><span class="line">            <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">            <span class="string">&quot;data&quot;</span>: []</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">            contact_list = list(models.Test.objects.filter(name__contains=request.GET.get(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;&quot;</span>)).order_by(<span class="string">&quot;-id&quot;</span>).values(<span class="string">&quot;id&quot;</span>,<span class="string">&quot;name&quot;</span>))</span><br><span class="line">            paginator = Paginator(contact_list, <span class="number">20</span>)  <span class="comment"># 默认每页显示20条,也可用前端传递size来自定义默认每页数据量</span></span><br><span class="line"></span><br><span class="line">            page = request.GET.get(<span class="string">&#x27;page&#x27;</span>)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                contacts = paginator.page(page)</span><br><span class="line">            <span class="keyword">except</span> PageNotAnInteger:</span><br><span class="line">                <span class="comment"># 如果请求的页数不是整数，返回第一页。</span></span><br><span class="line">                contacts = paginator.page(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">except</span> EmptyPage:</span><br><span class="line">                <span class="comment"># 如果请求的页数不在合法的页数范围内，返回结果的最后一页。</span></span><br><span class="line">                contacts = paginator.page(paginator.num_pages)</span><br><span class="line"></span><br><span class="line">            res[<span class="string">&quot;data&quot;</span>] = &#123;</span><br><span class="line">                <span class="string">&quot;total&quot;</span>: paginator.count,</span><br><span class="line">                <span class="string">&quot;list&quot;</span>: contacts.object_list,</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment"># return JsonResponse(res)</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            res[<span class="string">&quot;code&quot;</span>] = <span class="number">-1</span></span><br><span class="line">            res[<span class="string">&quot;msg&quot;</span>] = e.args[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(res)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python运维</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>批处理工具fabric教程</title>
    <url>/85caec3f.html</url>
    <content><![CDATA[<h1 id="Python-批处理工具Fabric教程"><a href="#Python-批处理工具Fabric教程" class="headerlink" title="Python 批处理工具Fabric教程"></a>Python 批处理工具Fabric教程</h1><blockquote>
<p>Author： Vaedit</p>
<p>Time：二〇二一年二月二十日 11:03:52</p>
</blockquote>
<h4 id="1-Fabric安装"><a href="#1-Fabric安装" class="headerlink" title="1 Fabric安装"></a>1 Fabric安装</h4><h5 id="1-1-环境要求"><a href="#1-1-环境要求" class="headerlink" title="1.1 环境要求"></a>1.1 环境要求</h5><p>python == 3.6</p>
<p>系统：Centos 等Linux发行版</p>
<h5 id="1-2-官网"><a href="#1-2-官网" class="headerlink" title="1.2 官网"></a>1.2 官网</h5><p><a href="http://www.fabfile.org/">http://www.fabfile.org/</a></p>
<h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install fabric==2.5</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="2-基础使用"><a href="#2-基础使用" class="headerlink" title="2 基础使用"></a>2 基础使用</h4><h5 id="2-1-示例1"><a href="#2-1-示例1" class="headerlink" title="2.1 示例1"></a>2.1 示例1</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fabric <span class="keyword">import</span> Connection</span><br><span class="line"><span class="keyword">from</span> invoke.exceptions <span class="keyword">import</span> UnexpectedExit</span><br><span class="line">ne = Connection(<span class="string">&#x27;127.0.0.1&#x27;</span>)</span><br><span class="line"><span class="comment"># 执行命令</span></span><br><span class="line">ne.run(<span class="string">&#x27;uname -r&#x27;</span>)                                                      </span><br><span class="line"><span class="number">3.10</span><span class="number">.0</span><span class="number">-957.</span>el7.x86_64</span><br><span class="line">&lt;Result cmd=<span class="string">&#x27;uname -r&#x27;</span> exited=<span class="number">0</span>&gt;</span><br><span class="line"><span class="comment"># 执行命令不输出</span></span><br><span class="line">ne.run(<span class="string">&#x27;uname -r&#x27;</span>,hide=<span class="literal">True</span>)                                            </span><br><span class="line">&lt;Result cmd=<span class="string">&#x27;uname -r&#x27;</span> exited=<span class="number">0</span>&gt;</span><br><span class="line"></span><br><span class="line">re=ne.run(<span class="string">&#x27;uname -r&#x27;</span>,hide=<span class="literal">True</span>)  </span><br><span class="line"><span class="comment"># 查看退出状态码</span></span><br><span class="line">re.exited                                                               </span><br><span class="line">Out[<span class="number">6</span>]: <span class="number">0</span></span><br><span class="line"><span class="comment"># 是否执行成功</span></span><br><span class="line">re.ok                                                                   </span><br><span class="line">Out[<span class="number">9</span>]: <span class="literal">True</span></span><br><span class="line"><span class="comment"># 是否执行失败</span></span><br><span class="line">re.failed                                                              </span><br><span class="line">Out[<span class="number">10</span>]: <span class="literal">False</span></span><br><span class="line"><span class="comment"># 标准输出</span></span><br><span class="line">re.stdout                                                              </span><br><span class="line">Out[<span class="number">11</span>]: <span class="string">&#x27;3.10.0-957.el7.x86_64\n&#x27;</span></span><br><span class="line"><span class="comment"># 错误输出</span></span><br><span class="line">re.stderr                                                              </span><br><span class="line">Out[<span class="number">12</span>]: <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 执行的命令</span></span><br><span class="line">re.command                                                             </span><br><span class="line">Out[<span class="number">16</span>]: <span class="string">&#x27;uname -r&#x27;</span></span><br><span class="line">re.connection                                                          </span><br><span class="line">Out[<span class="number">17</span>]: &lt;Connection host=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>&gt;</span><br><span class="line"><span class="comment"># 连接的主机信息</span></span><br><span class="line">re.connection.host                                                     </span><br><span class="line">Out[<span class="number">18</span>]: <span class="string">&#x27;127.0.0.1&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 其他主机连接用法</span></span><br><span class="line">Connection(host=<span class="string">&#x27;web1&#x27;</span>, user=<span class="string">&#x27;deploy&#x27;</span>, port=<span class="number">2202</span>)</span><br><span class="line">Connection(<span class="string">&#x27;deploy@web1:2202&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h5 id="2-2-示例2"><a href="#2-2-示例2" class="headerlink" title="2.2 示例2"></a>2.2 示例2</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 推送文件到目标主机，可以结合模板批量生成和推送配置文件</span></span><br><span class="line">ne.put(‘./xxx.txt’,<span class="string">&#x27;/tmp&#x27;</span>)</span><br><span class="line"><span class="comment"># 从目标主机下载文件到本地</span></span><br><span class="line">ne.get(<span class="string">&#x27;/tmp/xxx.txt&#x27;</span>,<span class="string">&#x27;./&#x27;</span>)</span><br><span class="line"><span class="comment"># 本地执行命令</span></span><br><span class="line">ne.local()</span><br><span class="line"><span class="comment"># 如果执行的命令有可能报错，例如创建用户时已存在或者不关心命令执行的结果，可以用warn=True防止异常自动停止执行任务</span></span><br><span class="line">ne.run(<span class="string">&#x27;adduser vaedit&#x27;</span>,warn=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>



<h5 id="2-3-示例3"><a href="#2-3-示例3" class="headerlink" title="2.3 示例3"></a>2.3 示例3</h5><p>主机组的使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fabric <span class="keyword">import</span> ThreadingGroup <span class="keyword">as</span> tGroup <span class="comment"># 并发执行</span></span><br><span class="line"><span class="keyword">from</span> fabric <span class="keyword">import</span> SerialGroup <span class="keyword">as</span> sGroup <span class="comment"># 顺序执行</span></span><br><span class="line"><span class="keyword">from</span> fabric <span class="keyword">import</span> exceptions</span><br><span class="line"></span><br><span class="line">gne = sGroup(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="string">&#x27;127.0.0.1&#x27;</span>)</span><br><span class="line">gne1 = tGroup(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="string">&#x27;127.0.0.1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span>(<span class="params">g</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 主机组暂时没有put和get的功能，如果要使用，则 for ne in gne: ne.put/ne.get </span></span><br><span class="line">        result = g.run(<span class="string">&#x27;sh start.sh&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> con,result <span class="keyword">in</span> result.items():</span><br><span class="line">            print(con,con.host,result.stdout,result.stderr ,result.ok,result.failed，result.exited)</span><br><span class="line">            print(result.succeeded) <span class="comment"># 返回成功的 ,可以继续遍历，for con,result in result.succeeded</span></span><br><span class="line">            print(result.failed) <span class="comment"># 返回失败的 for con,result in result.failed （如果warn=True，则不管任务成功与否，都全部在result.succeeded，result.failed为空）</span></span><br><span class="line">    <span class="keyword">except</span> exceptions.GroupException <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python运维</category>
      </categories>
      <tags>
        <tag>Fabric</tag>
      </tags>
  </entry>
  <entry>
    <title>DOCKER的学习记录-安装与实践</title>
    <url>/534ced63.html</url>
    <content><![CDATA[<h1 id="DOCKER-安装与实践"><a href="#DOCKER-安装与实践" class="headerlink" title="DOCKER 安装与实践"></a><center>DOCKER 安装与实践</center></h1><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><h3 id="CentOS上安装Docker"><a href="#CentOS上安装Docker" class="headerlink" title="CentOS上安装Docker"></a>CentOS上安装Docker</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#如果有旧版本卸载旧版本</span></span><br><span class="line">yum remove docker docker-common docker-selinux docker-engine</span><br><span class="line"><span class="comment">#安装依赖</span></span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"><span class="comment">#添加官方docker稳定版yum源</span></span><br><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"><span class="comment">#国内推荐用国内源</span></span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看docker版本</span></span><br><span class="line">yum list docker-ce --showduplicates | sort -r</span><br><span class="line"></span><br><span class="line">yum makecache fast</span><br><span class="line"><span class="comment">#安装docker社区版</span></span><br><span class="line">yum install docker-ce-18.09.8 -y <span class="comment">#安装指定版本</span></span><br><span class="line">yum install docker-ce <span class="comment">#默认最新</span></span><br><span class="line"><span class="comment">#设置docker开机自启和启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="comment">#查看docker版本信息</span></span><br><span class="line">docker info</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="镜像加速器"><a href="#镜像加速器" class="headerlink" title="镜像加速器"></a>镜像加速器</h3><p>CentOS修改/etc/docker/daemon.json中写入如下内容（如果文件不存在则新建该文件）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> &#123; </span><br><span class="line">    <span class="string">&quot;registry-mirrors&quot;</span>: [ </span><br><span class="line">        <span class="string">&quot;https://registry.docker-cn.com&quot;</span> </span><br><span class="line">    ] </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#或者直接执行脚本</span></span><br><span class="line">curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://f1361db2.m.daocloud.io</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#阿里云镜像加速</span></span><br><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://b9pmyelo.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p> 重启服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload </span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>



<h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><h3 id="管理镜像常用命令"><a href="#管理镜像常用命令" class="headerlink" title="管理镜像常用命令"></a>管理镜像常用命令</h3><table>
<thead>
<tr>
<th align="left">指令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ls</td>
<td>列出镜像</td>
</tr>
<tr>
<td align="left">build</td>
<td>构建镜像来自Dockerfile</td>
</tr>
<tr>
<td align="left">history</td>
<td>显示历史镜像</td>
</tr>
<tr>
<td align="left">inspect</td>
<td>显示一个或多个镜像详细信息</td>
</tr>
<tr>
<td align="left">pull</td>
<td>从镜像仓库拉取镜像</td>
</tr>
<tr>
<td align="left">rm</td>
<td>删除镜像</td>
</tr>
<tr>
<td align="left">prune</td>
<td>移除未使用的镜像。没有被标记或被任何容器引用</td>
</tr>
<tr>
<td align="left">tag</td>
<td>创建标记</td>
</tr>
<tr>
<td align="left">export</td>
<td>导出容器文件系统到tar归档文件</td>
</tr>
<tr>
<td align="left">import</td>
<td>导入容器文件系统到tar归档文件创建镜像</td>
</tr>
<tr>
<td align="left">save</td>
<td>保存一个或多个镜像到tar归档文件</td>
</tr>
<tr>
<td align="left">load</td>
<td>加载镜像来自tar归档或者标准输入</td>
</tr>
</tbody></table>
<h3 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull [选项] [Docker Registry地址]&lt;仓库名&gt;:&lt;标签&gt;</span><br></pre></td></tr></table></figure>

<p>默认如果没有给出registry地址,就从Docker Hub 获取镜像</p>
<h3 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull ubuntu:14.04</span><br><span class="line">docker run -it --rm ubuntu:14.04 bash</span><br></pre></td></tr></table></figure>

<ul>
<li>-it ：这是两个参数，一个是 -i ：交互式操作，一个是 -t 终端。我们这里打算进入 bash 执行一些命令并查看返回结果，因此我们需要交互式终端。 </li>
<li>–rm ：这个参数是说容器退出后随之将其删除。默认情况下，为了排障需求，退出的容 器并不会立即删除，除非手动 docker rm 。我们这里只是随便执行个命令，看看结果， 不需要排障和保留结果，因此使用 –rm 可以避免浪费空间</li>
<li>ubuntu:14.04 ：这是指用 ubuntu:14.04 镜像为基础来启动容器。 </li>
<li>bash ：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 bash 。 </li>
</ul>
<h3 id="列出镜像"><a href="#列出镜像" class="headerlink" title="列出镜像"></a>列出镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images <span class="comment">#列出本地镜像</span></span><br><span class="line">docker image ls <span class="comment">#新版本命令</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>列表包含了仓库名、标签、镜像 ID、创建时间以及所占用的空间。 </p>
</blockquote>
<p>其中仓库名、标签在之前的基础概念章节已经介绍过了。镜像 <strong>ID</strong> 则是镜像的唯一标识，一个 </p>
<p>镜像可以对应多个标签。因此，在上面的例子中，我们可以看到 ubuntu:16.04 和 </p>
<p>ubuntu:latest 拥有相同的 ID，因为它们对应的是同一个镜像。 </p>
<p><strong>列出部分镜像</strong></p>
<blockquote>
<p>不加任何参数的情况下， docker images 会列出所有顶级镜像</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#根据仓库名列出镜像</span></span><br><span class="line">docker images ubuntu</span><br><span class="line">docker image ls ubuntu <span class="comment">#新版</span></span><br><span class="line"><span class="comment">#列出特定的某个镜像，也就是说指定仓库名和标签</span></span><br><span class="line">docker images ubuntu:16.04</span><br></pre></td></tr></table></figure>

<p>除此以外， docker images 还支持强大的过滤器参数 –filter ，或者简写 -f 。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看在 mongo:3.2 之后建立的镜像</span></span><br><span class="line">docker images -f since=mongo:3.2</span><br><span class="line">docker image ls -f since=mongo:3.2</span><br><span class="line"><span class="comment">#查看某个镜像之前建立的镜像只需要把since改为before即可</span></span><br></pre></td></tr></table></figure>

<p><strong>以特定格式显示</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images -q <span class="comment">#只显示镜像id</span></span><br><span class="line">docker image ls -q</span><br><span class="line"><span class="comment">#使用go的模板语法自定义列出镜像结果</span></span><br><span class="line"><span class="comment">#只包含镜像ID和仓库名</span></span><br><span class="line">docker images --format <span class="string">&quot;&#123;&#123;.ID&#125;&#125;: &#123;&#123;.Repository&#125;&#125;&quot;</span></span><br><span class="line">docker images ls --format <span class="string">&quot;&#123;&#123;.ID&#125;&#125;: &#123;&#123;.Repository&#125;&#125;&quot;</span></span><br><span class="line"><span class="comment">#以表格等距显示，并且有标题行，和默认一样，不过自己定义列</span></span><br><span class="line">docker images --format <span class="string">&quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Repository&#125;&#125;\t&#123;&#123;.Tag&#125;&#125;&quot;</span></span><br></pre></td></tr></table></figure>



<h3 id="镜像体积"><a href="#镜像体积" class="headerlink" title="镜像体积"></a>镜像体积</h3><p>如果仔细观察，会注意到，这里标识的所占用空间和在 Docker Hub 上看到的镜像大小不同。 </p>
<p>比如， ubuntu:16.04 镜像大小，在这里是 127 MB ，但是在 Docker Hub 显示的却是 50 </p>
<p>MB 。这是因为 Docker Hub 中显示的体积是压缩后的体积。在镜像下载和上传过程中镜像是 </p>
<p>保持着压缩状态的，因此 Docker Hub 所显示的大小是网络传输中更关心的流量大小。而 </p>
<p>docker images 显示的是镜像下载到本地后，展开的大小，准确说，是展开后的各层所占空 </p>
<p>间的总和，因为镜像到本地后，查看空间的时候，更关心的是本地磁盘空间占用的大小。 </p>
<p>另外一个需要注意的问题是， docker images 列表中的镜像体积总和并非是所有镜像实际硬 </p>
<p>盘消耗。由于 Docker 镜像是多层存储结构，并且可以继承、复用，因此不同镜像可能会因为 </p>
<p>使用相同的基础镜像，从而拥有共同的层。由于 Docker 使用 Union FS，相同的层只需要保 </p>
<p>存一份即可，因此实际镜像硬盘占用空间很可能要比这个列表镜像大小的总和要小的多。 </p>
<p>你可以通过以下命令来便捷的查看镜像、容器、数据卷所占用的空间。 </p>
<h3 id="虚悬镜像"><a href="#虚悬镜像" class="headerlink" title="虚悬镜像"></a>虚悬镜像</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;none&gt; &lt;none&gt; 00285df0df87 5 days ago 342 M B</span><br></pre></td></tr></table></figure>

<p>这个镜像原本是有镜像名和标签的，原来为 mongo:3.2 ，随着官方镜像维护，发布了新版本 </p>
<p>后，重新 docker pull mongo:3.2 时， mongo:3.2 这个镜像名被转移到了新下载的镜像身 </p>
<p>上，而旧的镜像上的这个名称则被取消，从而成为了 <none> 。除了 docker pull 可能导致 </p>
<p>这种情况， docker build 也同样可以导致这种现象。由于新旧镜像同名，旧镜像名称被取 </p>
<p>消，从而出现仓库名、标签均为 <none> 的镜像。这类无标签镜像也被称为 虚悬镜像 </p>
<p><strong>(dangling image)</strong> ，可以用下面的命令专门显示这类镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images -f dangling=<span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>一般来说这些虚悬镜像已经没用可以用以下命令删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker image prune</span><br></pre></td></tr></table></figure>

<h3 id="中间层镜像"><a href="#中间层镜像" class="headerlink" title="中间层镜像"></a>中间层镜像</h3><p>为了加速镜像构建、重复利用资源，Docker 会利用 中间层镜像。所以在使用一段时间后，可 </p>
<p>能会看到一些依赖的中间层镜像。默认的 docker images 列表中只会显示顶层镜像，如果希 </p>
<p>望显示包括中间层镜像在内的所有镜像的话，需要加 -a 参数。 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images -a </span><br><span class="line">docker image ls -a <span class="comment">#新版</span></span><br></pre></td></tr></table></figure>

<p>这样会看到很多无标签的镜像，与之前的虚悬镜像不同，这些无标签的镜像很多都是中间层 </p>
<p>镜像，是其它镜像所依赖的镜像。这些无标签镜像不应该删除，否则会导致上层镜像因为依 </p>
<p>赖丢失而出错。实际上，这些镜像也没必要删除，因为之前说过，相同的层只会存一遍，而 </p>
<p>这些镜像是别的镜像的依赖，因此并不会因为它们被列出来而多存了一份，无论如何你也会 </p>
<p>需要它们。只要删除那些依赖它们的镜像后，这些依赖的中间层镜像也会被连带删除。 </p>
<h3 id="docker-commit"><a href="#docker-commit" class="headerlink" title="docker commit"></a>docker commit</h3><blockquote>
<p>docker commit 命令除了学习之外，还有一些特殊的应用场合，比如被入侵后保存现场等。但是，不要使用 docker commit 定制镜像，定制镜像应该使用 Dockerfile 来完成。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#把容器webserver提交成nginx:2镜像</span></span><br><span class="line">docker commit --author <span class="string">&quot;Tao Wang &lt;twang2218@gmail.com&gt;&quot;</span> --message <span class="string">&quot;修改了默认网页&quot;</span> webserver nginx:v2</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker image save fce289e99eb9 -o hello.tar <span class="comment">#导出镜像</span></span><br><span class="line"></span><br><span class="line">docker image load  &lt; hello.tar <span class="comment">#导入镜像</span></span><br></pre></td></tr></table></figure>

<h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><h3 id="创建容器常用选项"><a href="#创建容器常用选项" class="headerlink" title="创建容器常用选项"></a>创建容器常用选项</h3><table>
<thead>
<tr>
<th>选项</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>-i,–interactive</td>
<td>交互式</td>
</tr>
<tr>
<td>-t,–tty</td>
<td>分配一个伪终端</td>
</tr>
<tr>
<td>-d,–detach</td>
<td>后台运行容器</td>
</tr>
<tr>
<td>-e,–env</td>
<td>设置环境变量</td>
</tr>
<tr>
<td>-p,–publish list</td>
<td>发布端口到宿主机</td>
</tr>
<tr>
<td>-P,–publish-all</td>
<td>发布容器所有EXPOSE的端口到宿主机的随机端口</td>
</tr>
<tr>
<td>-name string</td>
<td>指定容器名</td>
</tr>
<tr>
<td>-h,–hostname</td>
<td>设置容器主机名</td>
</tr>
<tr>
<td>–ip string</td>
<td>指定容器ip，只能用于自定义网络</td>
</tr>
<tr>
<td>–network</td>
<td>连接到一个网络</td>
</tr>
<tr>
<td>–mount mount</td>
<td>将文件系统附加到容器</td>
</tr>
<tr>
<td>-v,–volume list</td>
<td>绑定挂载一个卷</td>
</tr>
<tr>
<td>–restart string</td>
<td>容器退出时重启策略，默认no，可选值：【always|on-failure】</td>
</tr>
</tbody></table>
<h3 id="容器资源限制"><a href="#容器资源限制" class="headerlink" title="容器资源限制"></a>容器资源限制</h3><table>
<thead>
<tr>
<th>选项</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>-m,–memory</td>
<td>容器可以使用的最大内存量</td>
</tr>
<tr>
<td>–memory-swap</td>
<td>允许使用swap的最大量</td>
</tr>
<tr>
<td>–memory-swappiness=&lt;0-100&gt;</td>
<td>容器使用swap交换分区的百分比（0-100,默认为-1）</td>
</tr>
<tr>
<td>–oom-kill-disable</td>
<td>禁用OOM Killer</td>
</tr>
<tr>
<td>–cpus</td>
<td>可以使用的cpu数量</td>
</tr>
<tr>
<td>–cpuset-cpus</td>
<td>限制容器使用特定的cpu核心，如（0-3,0,1）</td>
</tr>
<tr>
<td>–cpu-shares</td>
<td>cpu共享（相对权重）</td>
</tr>
</tbody></table>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><h5 id="内存限制"><a href="#内存限制" class="headerlink" title="内存限制"></a>内存限制</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#允许容器最多使用500M内存和100M的Swap，并禁用OOM Killer：</span></span><br><span class="line">docker run -d --name nginx03 --memory=<span class="string">&quot;500m&quot;</span> --memory-swap=<span class="string">&quot;600m&quot;</span> --oom-kill-disable nginx</span><br></pre></td></tr></table></figure>

<h5 id="CPU限制"><a href="#CPU限制" class="headerlink" title="CPU限制"></a>CPU限制</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#允许容器最多使用一个半的CPU：</span></span><br><span class="line">docker run -d --name nginx04 --cpus=<span class="string">&quot;1.5&quot;</span> nginx</span><br><span class="line"><span class="comment">#允许容器最多使用50%的CPU：</span></span><br><span class="line">docker run -d --name nginx05 --cpus=<span class="string">&quot;.5&quot;</span> nginx</span><br></pre></td></tr></table></figure>

<h3 id="管理容器常用选项"><a href="#管理容器常用选项" class="headerlink" title="管理容器常用选项"></a>管理容器常用选项</h3><table>
<thead>
<tr>
<th>选项</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>ls</td>
<td>列出容器</td>
</tr>
<tr>
<td>inspect</td>
<td>查看一个或多个容器详细信息</td>
</tr>
<tr>
<td>exec</td>
<td>在运行的容器中执行命令</td>
</tr>
<tr>
<td>commit</td>
<td>创建一个新镜像来自容器</td>
</tr>
<tr>
<td>cp</td>
<td>拷贝文件/文件夹到容器</td>
</tr>
<tr>
<td>logs</td>
<td>获取容器日志</td>
</tr>
<tr>
<td>port</td>
<td>列出或指定容器端口映射</td>
</tr>
<tr>
<td>top</td>
<td>显示一个容器运行的进程</td>
</tr>
<tr>
<td>stats</td>
<td>显示容器资源使用统计</td>
</tr>
<tr>
<td>stop/start</td>
<td>停止/启动一个或多个容器</td>
</tr>
<tr>
<td>rm</td>
<td>删除一个或多个容器</td>
</tr>
</tbody></table>
<h2 id="管理容器数据"><a href="#管理容器数据" class="headerlink" title="管理容器数据"></a>管理容器数据</h2><p>Docker提供三种方式将数据从宿主机挂载到容器中：</p>
<ul>
<li><p>volumes：Docker管理宿主机文件系统的一部分（/var/lib/docker/volumes）。保存数据的最佳方式。</p>
</li>
<li><p>bind mounts：将宿主机上的任意位置的文件或者目录挂载到容器中。</p>
</li>
<li><p>tmpfs：挂载存储在主机系统的内存中，而不会写入主机的文件系统。如果不希望将数据持久存储在任何位置，可以使用tmpfs，同时避免写入容器可写层提高性能。</p>
</li>
</ul>
<h3 id="Volume"><a href="#Volume" class="headerlink" title="Volume"></a>Volume</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#管理卷： </span></span><br><span class="line">docker volume create nginx-vol</span><br><span class="line">docker volume ls</span><br><span class="line">docker volume inspect nginx-vol</span><br><span class="line"><span class="comment">#用卷创建一个容器: </span></span><br><span class="line">docker run -d --name=nginx-test --mount src=nginx-vol,dst=/usr/share/nginx/html nginx</span><br><span class="line">docker run -d --name=nginx-test -v nginx-vol:/usr/share/nginx/html nginx</span><br><span class="line"><span class="comment">#清理： </span></span><br><span class="line">docker stop nginx-test</span><br><span class="line">docker rm nginx-test </span><br><span class="line">docker volume rm nginx-vol</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：<br>1.如果没有指定卷，自动创建。<br>2.建议使用–mount，更通用</p>
</blockquote>
<h3 id="Bind-Mount"><a href="#Bind-Mount" class="headerlink" title="Bind Mount"></a>Bind Mount</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#用卷创建一个容器：</span></span><br><span class="line">docker run -d -it --name=nginx-test --mount <span class="built_in">type</span>=<span class="built_in">bind</span>,src=/app/wwwroot,dst=/usr/share/nginx/html nginx</span><br><span class="line">docker run -d -it --name=nginx-test -v /app/wwwroot:/usr/share/nginx/html nginx</span><br><span class="line"><span class="comment">#验证绑定：</span></span><br><span class="line">docker inspect nginx-test</span><br><span class="line"><span class="comment">#清理：</span></span><br><span class="line">docker stop nginx-test</span><br><span class="line">docker rm nginx-test </span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
<p>1.如果源文件/目录没有存在，不会自动创建，会抛出一个错误。</p>
<p>2.如果挂载目标在容器中非空目录，则该目录现有内容将被隐藏</p>
</blockquote>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>Volume特点：</p>
<ul>
<li><p>多个运行容器之间共享数据。</p>
</li>
<li><p>当容器停止或被移除时，该卷依然存在。</p>
</li>
<li><p>多个容器可以同时挂载相同的卷。</p>
</li>
<li><p>当明确删除卷时，卷才会被删除。</p>
</li>
<li><p>将容器的数据存储在远程主机或其他存储上</p>
</li>
<li><p>将数据从一台Docker主机迁移到另一台时，先停止容器，然后备份卷的目录（/var/lib/docker/volumes/）</p>
</li>
</ul>
<p>Bind Mounts特点：</p>
<ul>
<li><p>从主机共享配置文件到容器。默认情况下，挂载主机/etc/resolv.conf到每个容器，提供DNS解析。</p>
</li>
<li><p>在Docker主机上的开发环境和容器之间共享源代码。例如，可以将Maven target目录挂载到容器中，每次在Docker主机上构建Maven项目时，容器都可以访问构建的项目包。</p>
</li>
<li><p>当Docker主机的文件或目录结构保证与容器所需的绑定挂载一致时</p>
</li>
</ul>
<h2 id="容器网络"><a href="#容器网络" class="headerlink" title="容器网络"></a>容器网络</h2><h3 id="网络模式"><a href="#网络模式" class="headerlink" title="网络模式"></a>网络模式</h3><ul>
<li><p><strong>bridge</strong></p>
<p>–net=bridge 默认网络，Docker启动后创建一个docker0网桥，默认创建的容器也是添加到这个网桥中</p>
</li>
<li><p><strong>host</strong></p>
</li>
</ul>
<p>​      –net=host容器不会获得一个独立的network namespace，而是与宿主机共用一个。这就意味着容器不会有自己的网卡信息，而是使用宿主机的。容器除了网络，其他都是隔离的。</p>
<ul>
<li><strong>none</strong></li>
</ul>
<p>​      –net=none 获取独立的network namespace，但不为容器进行任何网络配置，需要我们手动配置</p>
<ul>
<li><strong>container</strong></li>
</ul>
<p>​      –net=container:Name/ID与指定的容器使用同一个network namespace，具有同样的网络配置信息，两个容器除了网络，其他都还是隔离的。</p>
<ul>
<li><strong>自定义网络</strong></li>
</ul>
<p>​      与默认的bridge原理一样，但自定义网络具备内部DNS发现，可以通过容器名或者主机名容器之间网络通信</p>
<h3 id="网络原理"><a href="#网络原理" class="headerlink" title="网络原理"></a>网络原理</h3><p><img src="https://vaedit-images.oss-cn-beijing.aliyuncs.com/img/image-20210220125246952.png" alt="image-20210220125246952"></p>
<h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><h3 id="Dockerfile指令"><a href="#Dockerfile指令" class="headerlink" title="Dockerfile指令"></a>Dockerfile指令</h3><table>
<thead>
<tr>
<th>指令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>FROM</td>
<td>构建新镜像是基于哪个镜像</td>
</tr>
<tr>
<td>MAINTAINER</td>
<td>镜像维护者姓名或邮箱地址</td>
</tr>
<tr>
<td>RUN</td>
<td>构建镜像时运行的shell命令</td>
</tr>
<tr>
<td>COPY</td>
<td>拷贝文件或目录到镜像中</td>
</tr>
<tr>
<td>ENV</td>
<td>设置环境变量</td>
</tr>
<tr>
<td>USER</td>
<td>为RUN，CMD和ENTRYPOINT执行命令指定运行用户</td>
</tr>
<tr>
<td>EXPOSE</td>
<td>声明容器运行的服务端口</td>
</tr>
<tr>
<td>HEALTHCHECK</td>
<td>容器中服务健康检查</td>
</tr>
<tr>
<td>WORKDIR</td>
<td>为RUN，CMD，ENTRYPOINT，COPY和ADD设置工作目录</td>
</tr>
<tr>
<td>ENTRYPOINT</td>
<td>运行容器时执行，如果有多个ENTRYPOINT指令，最后一个生效</td>
</tr>
<tr>
<td>CMD</td>
<td>运行容器时执行，如果有多个CMD指令，最后一个生效</td>
</tr>
</tbody></table>
<h3 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h3><h4 id="构建镜像指令"><a href="#构建镜像指令" class="headerlink" title="构建镜像指令"></a>构建镜像指令</h4><p>Usage: docker build [OPTIONS] PATH | URL | -[flags]</p>
<p>Options:</p>
<p>-t, –tag list     # 镜像名称</p>
<p>-f, –file string  # 指定Dockerfile文件位置</p>
<p>docker build .</p>
<p>docker build -t shykes/myapp .</p>
<p>docker build -t shykes/myapp -f /path/Dockerfile /path</p>
<p>docker build -t shykes/myapp <a href="http://www.example.com/Dockerfile">http://www.example.com/Dockerfile</a></p>
<h4 id="构建基础镜像"><a href="#构建基础镜像" class="headerlink" title="构建基础镜像"></a>构建基础镜像</h4><h4 id="实例1-构建tomcat镜像"><a href="#实例1-构建tomcat镜像" class="headerlink" title="实例1.构建tomcat镜像"></a>实例1.构建tomcat镜像</h4><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> www.vaedit.com</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> VERSION=<span class="number">8.5</span>.<span class="number">47</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum install java-1.8.0-openjdk wget curl unzip iproute net-tools -y &amp;&amp; \</span></span><br><span class="line"><span class="bash">    yum clean all &amp;&amp; \</span></span><br><span class="line"><span class="bash">    rm -rf /var/cache/yum/*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> wget http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v<span class="variable">$&#123;VERSION&#125;</span>/bin/apache-tomcat-<span class="variable">$&#123;VERSION&#125;</span>.tar.gz &amp;&amp; \</span></span><br><span class="line"><span class="bash">    tar zxf apache-tomcat-<span class="variable">$&#123;VERSION&#125;</span>.tar.gz &amp;&amp; \</span></span><br><span class="line"><span class="bash">    mv apache-tomcat-<span class="variable">$&#123;VERSION&#125;</span> /usr/<span class="built_in">local</span>/tomcat &amp;&amp; \</span></span><br><span class="line"><span class="bash">    rm -rf apache-tomcat-<span class="variable">$&#123;VERSION&#125;</span>.tar.gz /usr/<span class="built_in">local</span>/tomcat/webapps/* &amp;&amp; \</span></span><br><span class="line"><span class="bash">    mkdir /usr/<span class="built_in">local</span>/tomcat/webapps/<span class="built_in">test</span> &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">&quot;ok&quot;</span> &gt; /usr/<span class="built_in">local</span>/tomcat/webapps/<span class="built_in">test</span>/status.html &amp;&amp; \</span></span><br><span class="line"><span class="bash">    sed -i <span class="string">&#x27;1a JAVA_OPTS=&quot;-Djava.security.egd=file:/dev/./urandom&quot;&#x27;</span> /usr/<span class="built_in">local</span>/tomcat/bin/catalina.sh &amp;&amp; \</span></span><br><span class="line"><span class="bash">    ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> PATH $PATH:/usr/local/tomcat/bin</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/<span class="built_in">local</span>/tomcat</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;catalina.sh&quot;</span>, <span class="string">&quot;run&quot;</span>]</span></span><br></pre></td></tr></table></figure>



<h2 id="企业级容器仓库Harbor"><a href="#企业级容器仓库Harbor" class="headerlink" title="企业级容器仓库Harbor"></a>企业级容器仓库Harbor</h2><p>Habor是由VMWare公司开源的容器镜像仓库。事实上，Habor是在Docker Registry上进行了相应的企业级扩展，从而获得了更加广泛的应用，这些新的企业级特性包括：管理用户界面，基于角色的访问控制，AD/LDAP集成以及审计日志等，足以满足基本企业需求。</p>
<h3 id="Harbor安装部署"><a href="#Harbor安装部署" class="headerlink" title="Harbor安装部署"></a>Harbor安装部署</h3><ol>
<li><p>下载harbor离线安装包：harbor-offline-installer-v1.6.1.tgz</p>
</li>
<li><p>解压并进入目录</p>
</li>
<li><p>修改配置文件harbor.cfg</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostname = reg.vaedit.com</span><br><span class="line">harbor_admin_password = Harbor12345</span><br></pre></td></tr></table></figure>
</li>
<li><p>./prepare</p>
</li>
<li><p>sh install.sh</p>
</li>
</ol>
<h3 id="使用私有仓库注意点"><a href="#使用私有仓库注意点" class="headerlink" title="使用私有仓库注意点"></a>使用私有仓库注意点</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">#需要在/etc/docker/daemon.json中添加私有仓库信任</span><br><span class="line">&#123;</span><br><span class="line">        <span class="attr">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;http://f1361db2.m.daocloud.io&quot;</span></span><br><span class="line">    ],</span><br><span class="line">        <span class="attr">&quot;insecure-registries&quot;</span>:[</span><br><span class="line">        <span class="string">&quot;192.168.0.6&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Jenkins和docker-CI-CD"><a href="#Jenkins和docker-CI-CD" class="headerlink" title="Jenkins和docker CI/CD"></a>Jenkins和docker CI/CD</h2><ul>
<li>持续集成（Continuous Integration，CI）：代码合并、构建、部署、测试都在一起，不断地执行这个过程，并对结果反馈。</li>
<li>持续部署（ContinuousDeployment，CD）：部署到测试环境、预生产环境、生产环境。</li>
<li>持续交付（ContinuousDelivery，CD）：将最终产品发布到生产环境，给用户使用。</li>
</ul>
<h3 id="pipeline示例"><a href="#pipeline示例" class="headerlink" title="pipeline示例"></a>pipeline示例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node &#123;   &#x2F;&#x2F; 指定Slave标签</span><br><span class="line">   &#x2F;&#x2F; 拉取代码</span><br><span class="line">   stage(&#39;Git Checkout&#39;) &#123; </span><br><span class="line">        checkout([$class: &#39;GitSCM&#39;, branches: [[name: &#39;$Branch&#39;]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: &#39;git@192.168.0.6:&#x2F;home&#x2F;git&#x2F;tomcat-java-demo.git&#39;]]])</span><br><span class="line">   &#125;</span><br><span class="line">   &#x2F;&#x2F; 代码编译</span><br><span class="line">   stage(&#39;Maven Build&#39;) &#123;</span><br><span class="line">        sh &#39;&#39;&#39;</span><br><span class="line">        export JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;jdk</span><br><span class="line">        &#x2F;usr&#x2F;local&#x2F;maven&#x2F;bin&#x2F;mvn clean package -Dmaven.test.skip&#x3D;true</span><br><span class="line">        &#39;&#39;&#39;</span><br><span class="line">   &#125;</span><br><span class="line">   &#x2F;&#x2F; 项目打包到镜像并推送到镜像仓库</span><br><span class="line">   stage(&#39;Build and Push Image&#39;) &#123;</span><br><span class="line">        sh &#39;&#39;&#39;</span><br><span class="line">        REPOSITORY&#x3D;192.168.0.6&#x2F;test&#x2F;java-demo:$&#123;Branch&#125;</span><br><span class="line">        echo &#39;</span><br><span class="line">        FROM 192.168.0.6&#x2F;test&#x2F;tomcat:v1</span><br><span class="line">        COPY target&#x2F;*.war &#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;webapps&#x2F;ROOT.war</span><br><span class="line">        &#39; &gt; Dockerfile</span><br><span class="line">        docker build -t $REPOSITORY .</span><br><span class="line">        docker login -u vaedit -p 1qaz@WSX 192.168.0.6</span><br><span class="line">        docker push $REPOSITORY</span><br><span class="line">        &#39;&#39;&#39;</span><br><span class="line">   &#125;</span><br><span class="line">   &#x2F;&#x2F; 部署到Docker主机</span><br><span class="line">   stage(&#39;Deploy to Docker&#39;) &#123;</span><br><span class="line">        sh &#39;&#39;&#39;</span><br><span class="line">        REPOSITORY&#x3D;192.168.0.6&#x2F;test&#x2F;java-demo:$&#123;Branch&#125;</span><br><span class="line">        docker rm -f java-demo |true</span><br><span class="line">        docker image rm $REPOSITORY |true</span><br><span class="line">        docker login -u vaedit -p 1qaz@WSX 192.168.0.6</span><br><span class="line">        docker run -d --name java-demo -p 88:8080 $REPOSITORY</span><br><span class="line">        &#39;&#39;&#39;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="jenkins安装插件报错"><a href="#jenkins安装插件报错" class="headerlink" title="jenkins安装插件报错"></a>jenkins安装插件报错</h3><blockquote>
<p>jenkins插件下载中心：<a href="http://updates.jenkins-ci.org/download/plugins/">http://updates.jenkins-ci.org/download/plugins/</a></p>
</blockquote>
<p><img src="https://vaedit-images.oss-cn-beijing.aliyuncs.com/img/image-20210220125314518.png" alt="image-20210220125314518"></p>
<p>报安装插件依赖错误，则需要手动从上面网址下载插件版本，并上传安装</p>
<h4 id="docker-常用命令"><a href="#docker-常用命令" class="headerlink" title="docker 常用命令"></a>docker 常用命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rm -f $(docker ps -qa) <span class="comment">#删除所有容器</span></span><br><span class="line"></span><br><span class="line">docker stats 容器id <span class="comment">#查看容器资源情况</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>k8s生态圈</category>
      </categories>
      <tags>
        <tag>docker,k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>AWS通过SDK搜集资源信息</title>
    <url>/44ed022d.html</url>
    <content><![CDATA[<h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install boto3</span><br></pre></td></tr></table></figure>

<p>Alternatively, you can create the credential file yourself. By default, its location is at <code>~/.aws/credentials</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[default]</span><br><span class="line">aws_access_key_id &#x3D; YOUR_ACCESS_KEY </span><br><span class="line">aws_secret_access_key &#x3D; YOUR_SECRET_KEY</span><br></pre></td></tr></table></figure>

<p>You may also want to set a default region. This can be done in the configuration file. By default, its location is at <code>~/.aws/config</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[default]</span><br><span class="line">region&#x3D;us-east-1</span><br></pre></td></tr></table></figure>

<p>除了以上配置以外，还可以用环境变量，参数指定等等方式来配置验证</p>
<a id="more"></a>

<h4 id="脚本实例"><a href="#脚本实例" class="headerlink" title="脚本实例"></a>脚本实例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="comment">#2021年2月22日09:47:13</span></span><br><span class="line"><span class="comment">#############################</span></span><br><span class="line"><span class="keyword">import</span> boto3</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> dateutil.parser</span><br><span class="line"><span class="keyword">import</span> decimal</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line">CONVERTERS = &#123;<span class="string">&#x27;datetime&#x27;</span>: dateutil.parser.parse, <span class="string">&#x27;decimal&#x27;</span>: decimal.Decimal&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyJSONEncoder1</span>(<span class="params">json.JSONEncoder</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">default</span>(<span class="params">self, obj</span>):</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(obj, (datetime.datetime,)):</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&quot;val&quot;</span>: obj.isoformat(), <span class="string">&quot;_spec_type&quot;</span>: <span class="string">&quot;datetime&quot;</span>&#125;</span><br><span class="line">        <span class="keyword">elif</span> isinstance(obj, (decimal.Decimal,)):</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&quot;val&quot;</span>: str(obj), <span class="string">&quot;_spec_type&quot;</span>: <span class="string">&quot;decimal&quot;</span>&#125;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> super().default(obj)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyJSONEncoder</span>(<span class="params">json.JSONEncoder</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">default</span>(<span class="params">self, obj</span>):</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(obj, (datetime.datetime,)):</span><br><span class="line">            <span class="keyword">return</span> obj.isoformat()</span><br><span class="line">        <span class="keyword">elif</span> isinstance(obj, (decimal.Decimal,)):</span><br><span class="line">            <span class="keyword">return</span> str(obj)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> super().default(obj)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">object_hook</span>(<span class="params">obj</span>):</span></span><br><span class="line">    _spec_type = obj.get(<span class="string">&#x27;_spec_type&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> _spec_type:</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line">                 </span><br><span class="line">    <span class="keyword">if</span> _spec_type <span class="keyword">in</span> CONVERTERS:</span><br><span class="line">        <span class="keyword">return</span> CONVERTERS[_spec_type](obj[<span class="string">&#x27;val&#x27;</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&#x27;Unknown &#123;&#125;&#x27;</span>.format(_spec_type))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计EC2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_ec2_info</span>():</span></span><br><span class="line">    ec2 = boto3.client(<span class="string">&#x27;ec2&#x27;</span>)</span><br><span class="line">    response = ec2.describe_instances()</span><br><span class="line">    instance_info_list=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> response[<span class="string">&#x27;Reservations&#x27;</span>]:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> i[<span class="string">&#x27;Instances&#x27;</span>]:</span><br><span class="line">            instance_info = &#123;&#125;</span><br><span class="line">            <span class="keyword">if</span> j[<span class="string">&#x27;State&#x27;</span>][<span class="string">&#x27;Name&#x27;</span>] == <span class="string">&#x27;stopping&#x27;</span> <span class="keyword">or</span> j[<span class="string">&#x27;State&#x27;</span>][<span class="string">&#x27;Name&#x27;</span>] == <span class="string">&#x27;stopped&#x27;</span> <span class="keyword">or</span> j[<span class="string">&#x27;State&#x27;</span>][<span class="string">&#x27;Name&#x27;</span>] == <span class="string">&#x27;shutting-down&#x27;</span> <span class="keyword">or</span> j[<span class="string">&#x27;State&#x27;</span>][<span class="string">&#x27;Name&#x27;</span>] == <span class="string">&#x27;terminated&#x27;</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            instance_info[<span class="string">&#x27;PublicDnsName&#x27;</span>] = j[<span class="string">&#x27;PublicDnsName&#x27;</span>] <span class="keyword">or</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">            instance_info[<span class="string">&#x27;State&#x27;</span>] = j[<span class="string">&#x27;State&#x27;</span>][<span class="string">&#x27;Name&#x27;</span>]</span><br><span class="line">            instance_info[<span class="string">&#x27;LaunchTime&#x27;</span>] = json.dumps(j[<span class="string">&#x27;LaunchTime&#x27;</span>],cls=MyJSONEncoder)</span><br><span class="line">            instance_info[<span class="string">&#x27;PublicIpAddress&#x27;</span>] = j[<span class="string">&#x27;PublicIpAddress&#x27;</span>] <span class="keyword">if</span> j.get(<span class="string">&#x27;PublicIpAddress&#x27;</span>) <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">            instance_info[<span class="string">&#x27;PrivateIpAddress&#x27;</span>] = j[<span class="string">&#x27;PrivateIpAddress&#x27;</span>] <span class="keyword">if</span> j.get(<span class="string">&#x27;PrivateIpAddress&#x27;</span>) <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">            instance_info[<span class="string">&#x27;VpcId&#x27;</span>] = j[<span class="string">&#x27;VpcId&#x27;</span>] <span class="keyword">if</span> j.get(<span class="string">&#x27;VpcId&#x27;</span>) <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">            instance_info[<span class="string">&#x27;InstanceId&#x27;</span>] = j[<span class="string">&#x27;InstanceId&#x27;</span>]</span><br><span class="line">            instance_info[<span class="string">&#x27;InstanceType&#x27;</span>] = j[<span class="string">&#x27;InstanceType&#x27;</span>]</span><br><span class="line">            instance_info[<span class="string">&#x27;AvailabilityZone&#x27;</span>] = j[<span class="string">&#x27;Placement&#x27;</span>][<span class="string">&#x27;AvailabilityZone&#x27;</span>]</span><br><span class="line">            instance_info_list.append(instance_info)</span><br><span class="line">    <span class="keyword">return</span> instance_info_list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计RDS</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_rds</span>():</span></span><br><span class="line">    rds = boto3.client(<span class="string">&#x27;rds&#x27;</span>)</span><br><span class="line">    rds_info_list = []</span><br><span class="line">    re =rds.describe_db_instances()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> re[<span class="string">&#x27;DBInstances&#x27;</span>]:</span><br><span class="line">        rds_info=&#123;&#125;</span><br><span class="line">        rds_info[<span class="string">&#x27;InstanceCreateTime&#x27;</span>]=i[<span class="string">&#x27;InstanceCreateTime&#x27;</span>]</span><br><span class="line">        rds_info[<span class="string">&#x27;Engine&#x27;</span>]=i[<span class="string">&#x27;Engine&#x27;</span>]</span><br><span class="line">        rds_info[<span class="string">&#x27;DBInstanceArn&#x27;</span>]=i[<span class="string">&#x27;DBInstanceArn&#x27;</span>] <span class="keyword">if</span> i.get(<span class="string">&#x27;DBInstanceArn&#x27;</span>) <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">        rds_info[<span class="string">&#x27;DBInstanceStatus&#x27;</span>]=i[<span class="string">&#x27;DBInstanceStatus&#x27;</span>]</span><br><span class="line">        rds_info[<span class="string">&#x27;Port&#x27;</span>]=i[<span class="string">&#x27;Endpoint&#x27;</span>][<span class="string">&#x27;Port&#x27;</span>]</span><br><span class="line">        rds_info[<span class="string">&#x27;Address&#x27;</span>]=i[<span class="string">&#x27;Endpoint&#x27;</span>][<span class="string">&#x27;Address&#x27;</span>]</span><br><span class="line">        rds_info[<span class="string">&#x27;DBInstanceIdentifier&#x27;</span>]=i[<span class="string">&#x27;DBInstanceIdentifier&#x27;</span>]</span><br><span class="line">        rds_info[<span class="string">&#x27;DBInstanceClass&#x27;</span>]=i[<span class="string">&#x27;DBInstanceClass&#x27;</span>]</span><br><span class="line">        rds_info[<span class="string">&#x27;AvailabilityZone&#x27;</span>]=i[<span class="string">&#x27;AvailabilityZone&#x27;</span>]</span><br><span class="line">        rds_info_list.append(rds_info)</span><br><span class="line">    <span class="keyword">if</span> re.get(<span class="string">&#x27;Marker&#x27;</span>):</span><br><span class="line">        mark=re.get(<span class="string">&#x27;Marker&#x27;</span>)</span><br><span class="line">        <span class="keyword">while</span> mark:</span><br><span class="line">            re1=rds.describe_db_instances(Marker=mark)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> re1[<span class="string">&#x27;DBInstances&#x27;</span>]:</span><br><span class="line">                rds_info=&#123;&#125;</span><br><span class="line">                rds_info[<span class="string">&#x27;InstanceCreateTime&#x27;</span>]=i[<span class="string">&#x27;InstanceCreateTime&#x27;</span>]</span><br><span class="line">                rds_info[<span class="string">&#x27;Engine&#x27;</span>]=i[<span class="string">&#x27;Engine&#x27;</span>]</span><br><span class="line">                rds_info[<span class="string">&#x27;DBInstanceArn&#x27;</span>]=i[<span class="string">&#x27;DBInstanceArn&#x27;</span>] <span class="keyword">if</span> i.get(<span class="string">&#x27;DBInstanceArn&#x27;</span>) <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">                rds_info[<span class="string">&#x27;DBInstanceStatus&#x27;</span>]=i[<span class="string">&#x27;DBInstanceStatus&#x27;</span>]</span><br><span class="line">                rds_info[<span class="string">&#x27;Port&#x27;</span>]=i[<span class="string">&#x27;Endpoint&#x27;</span>][<span class="string">&#x27;Port&#x27;</span>]</span><br><span class="line">                rds_info[<span class="string">&#x27;Address&#x27;</span>]=i[<span class="string">&#x27;Endpoint&#x27;</span>][<span class="string">&#x27;Address&#x27;</span>]</span><br><span class="line">                rds_info[<span class="string">&#x27;DBInstanceIdentifier&#x27;</span>]=i[<span class="string">&#x27;DBInstanceIdentifier&#x27;</span>]</span><br><span class="line">                rds_info[<span class="string">&#x27;DBInstanceClass&#x27;</span>]=i[<span class="string">&#x27;DBInstanceClass&#x27;</span>]</span><br><span class="line">                rds_info[<span class="string">&#x27;AvailabilityZone&#x27;</span>]=i[<span class="string">&#x27;AvailabilityZone&#x27;</span>]</span><br><span class="line">                rds_info_list.append(rds_info)</span><br><span class="line">            <span class="keyword">if</span> re1.get(<span class="string">&#x27;Marker&#x27;</span>):</span><br><span class="line">               mark=re.get(<span class="string">&#x27;Marker&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">               mark=<span class="literal">False</span></span><br><span class="line">               <span class="keyword">return</span> rds_info_list</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> rds_info_list</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(json.loads(response,object_hook=object_hook))</span></span><br><span class="line"><span class="comment">#print(json.dumps(response,cls=MyJSONEncoder))</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    ec2_dict = defaultdict(int)</span><br><span class="line">    ec2_list=get_ec2_info()</span><br><span class="line">    <span class="keyword">for</span> instance <span class="keyword">in</span> ec2_list:</span><br><span class="line">        ec2_dict[instance[<span class="string">&#x27;InstanceType&#x27;</span>]] +=<span class="number">1</span></span><br><span class="line">    print(<span class="string">&#x27;\033[1;32mEC2信息：\033[0m&#x27;</span>)</span><br><span class="line">    <span class="keyword">print</span> ec2_dict</span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> ec2_dict.items():</span><br><span class="line">        <span class="keyword">print</span> k,<span class="string">&quot;:&quot;</span>,v</span><br><span class="line"></span><br><span class="line">    dblist = get_rds()</span><br><span class="line">    rds_dict = defaultdict(int)</span><br><span class="line">    <span class="keyword">for</span> db <span class="keyword">in</span> dblist:</span><br><span class="line">        rds_dict[db[<span class="string">&#x27;DBInstanceClass&#x27;</span>]] +=<span class="number">1</span></span><br><span class="line">    print(<span class="string">&#x27;\033[1;32mRDS信息：\033[0m&#x27;</span>)</span><br><span class="line">    <span class="keyword">print</span> rds_dict</span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> rds_dict.items():</span><br><span class="line">        <span class="keyword">print</span> k,<span class="string">&quot;:&quot;</span>,v</span><br></pre></td></tr></table></figure>

<p>该脚本只需要把收集到的数据整理下，按自己需要的格式保存到CMDB中即可。</p>
]]></content>
      <categories>
        <category>AWS服务</category>
      </categories>
      <tags>
        <tag>boto3</tag>
      </tags>
  </entry>
</search>
