<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>mysql表修复</title>
    <url>/2020/09/22/mysql%E8%A1%A8%E4%BF%AE%E5%A4%8D/</url>
    <content><![CDATA[<h2 id="mysqlcheck"><a href="#mysqlcheck" class="headerlink" title="mysqlcheck"></a>mysqlcheck</h2><blockquote>
<ol>
<li><p>mysqlcheck客户端可以检查和修复MyISAM表。它还可以优化和分析表。mysqlcheck的功能类似myisamchk，但其工作不同。</p>
</li>
<li><p>主要差别是当mysqld服务器在运行时必须使用mysqlcheck，而myisamchk应用于服务器没有运行时。使用mysqlcheck的好处是不需要停止服务器来检查或修复表。</p>
</li>
<li><p>mysqlcheck为用户提供了一种方便的使用SQL语句CHECK TABLE、REPAIR TABLE、ANALYZE TABLE和OPTIMIZE TABLE的方式。它确定在要执行的操作中使用使用哪个语句，然后将语句发送到要执行的服务器上。</p>
</li>
</ol>
</blockquote>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqlcheck -B 指定数据库 -r -S /data/mysql2/mysql2.sock -u root -p<span class="string">&#x27;test&#x27;</span> &gt;&gt; /var/<span class="built_in">log</span>/mysqlcheck.log</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h3><ul>
<li><p>–optimize，-o  优化表</p>
</li>
<li><p>-h 主机地 </p>
</li>
<li><p>-P 端口号</p>
</li>
<li><p>-F 只检查没有正确关闭的表</p>
</li>
<li><p>-r 执行可以修复大部分问题的修复，只是唯一值不唯一时不能修复。</p>
</li>
<li><p>-a 分析表</p>
</li>
<li><p>-c 检查表，默认选项</p>
</li>
<li><p>-m 中等的检查</p>
</li>
<li><p>-e 完全检查，很慢</p>
</li>
<li><p>–database，-B 指定库 如果没指定，表示全部库</p>
</li>
<li><p>–all–database，-A  所有库</p>
</li>
<li><p>–fast，-F    只检查没有正确关闭的表。</p>
</li>
<li><p>–quick，-q    如果你正使用该选项在检查表，它防止扫描行以检查错误链接的检查。这是最快的检查方法。    如果你正使用该选项在修复表，它尝试只修复索引树。这是最快的修复方法。</p>
</li>
<li><p>–silent，-s    沉默模式。只打印错误消息</p>
</li>
<li><p>–tables    覆盖—database或-B选项。选项后面的所有参量被视为表名。</p>
</li>
<li><p>–socket=/-S   指定套接字</p>
</li>
</ul>
<h2 id="myisamchk"><a href="#myisamchk" class="headerlink" title="myisamchk"></a>myisamchk</h2><blockquote>
<p>myisamchk，只适用于myisam引擎，使用时需要关闭数据库</p>
</blockquote>
<h3 id="myisamchk表损坏原因"><a href="#myisamchk表损坏原因" class="headerlink" title="myisamchk表损坏原因"></a>myisamchk表损坏原因</h3><ol>
<li><p>服务器突然断电导致数据文件损坏;强制关机,没有先关闭mysql 服务;mysqld 进程在写表时被杀掉。因为此时mysql可能正在刷新索引。             </p>
</li>
<li><p>磁盘损坏。             </p>
</li>
<li><p>服务器死机。             </p>
</li>
<li><p>mysql 本身的bug 。             </p>
</li>
</ol>
<h3 id="MySQL中MyISAM表损坏的症状"><a href="#MySQL中MyISAM表损坏的症状" class="headerlink" title="MySQL中MyISAM表损坏的症状"></a>MySQL中MyISAM表损坏的症状</h3><ol>
<li><p>查询数据时报出错误：Incorrect key file for table: ‘…’. Try to repair it </p>
</li>
<li><p>查询不能在表中找到行或返回不完全的数据。             </p>
</li>
<li><p>Error: Table ‘…’ is marked as crashed and should be repaired 。             </p>
</li>
<li><p>打开表失败： Can’t open file: ‘×××.MYI’ (errno: 145) 。</p>
</li>
</ol>
<h3 id="常见选项"><a href="#常见选项" class="headerlink" title="常见选项"></a>常见选项</h3><ul>
<li>-q 快速修复，一般和-r一起使用，快速修复</li>
<li>-r  修复模式</li>
<li>-o 能修复-r不能修复的问题。一般会有提示使用-o</li>
<li>-i 打印被检测表的信息</li>
<li>-m 中等的检查</li>
<li>-e 最彻底的检查</li>
<li>-a 分析表</li>
<li>-s 安静的</li>
<li>-B 将.MYD文件备份为file_name-time.BAK</li>
<li>–sort-index, -S 以从高到低的顺序排序索引树块。这将优化搜寻并且将使按键值的表扫描更快。</li>
<li>-f  强制修复，一般不使用，可能会有数据丢失</li>
<li>myisamchk默认只用3M的内存来修复，如果要修复大表的话，显然速度会巨慢，我们可以通过为myisamchk设置更多的内存，来使其运行的更快，<br>myisamchk –sort_buffer_size=16M –key_buffer_size=16M –read_buffer_size=1M –write_buffer_size=1M<br>一般sort_buffer_size的大小16m就足够用了。</li>
<li>myisamchk默认使用选项“–tmpdir”作为临时文件的，如果tmpdir指定内存的话，恢复的表比较大，很容易报内存的错误，所以我们可以用tmpdir指定一个比较大的文件系统<br>myisamchk –sort_buffer_size=16m –key_buffer_size=16m  –read_buffer_size=2m –write_buffer_size=1m –tmpdir=/tmp</li>
</ul>
<p>执行myisam表的恢复只要是修复表的三个文件，最常发生问题的文件是数据文件和索引文件</p>
<p>tbl_name.frm：定义(格式)文件<br>tbl_name.MYD：数据文件<br>tbl_name.MYI：索引文件</p>
<h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><blockquote>
<p>首先进入到对应的数据库下：cd /data/mysql/game | 也可以直接指定表的路径，从而不用进入目录</p>
</blockquote>
<h4 id="检查表"><a href="#检查表" class="headerlink" title="检查表"></a>检查表</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#快速的检查</span></span><br><span class="line">myisamchk -im /usr/<span class="built_in">local</span>/mysql/data/testx/t2</span><br><span class="line"><span class="comment">#只检查没有正常关闭的表</span></span><br><span class="line">myisamchk -iFm /usr/<span class="built_in">local</span>/mysql/data/testx/t2</span><br><span class="line"><span class="comment">#仅显示表的最重要的信息</span></span><br><span class="line">myisamchk -eim /usr/<span class="built_in">local</span>/mysql/data/testx/t2</span><br></pre></td></tr></table></figure>

<h4 id="修复表"><a href="#修复表" class="headerlink" title="修复表"></a>修复表</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#常用的修复命令</span></span><br><span class="line">myisamchk -rq tbl_name <span class="comment">#快速修复表,只修复索引</span></span><br><span class="line">myisamchk -Br tbl_name  <span class="comment">#备份并修复表</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Xtrabackup</title>
    <url>/2020/09/22/Xtrabackup/</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote>
<p>官方文档地址：<a href="https://www.percona.com/doc/percona-xtrabackup/2.4/">https://www.percona.com/doc/percona-xtrabackup/2.4/</a></p>
</blockquote>
<h3 id="yum源安装"><a href="#yum源安装" class="headerlink" title="yum源安装"></a>yum源安装</h3><ol>
<li>安装Percona源</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install https://repo.percona.com/yum/percona-release-latest.noarch.rpm -y</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>安装包</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install epel-release -y</span><br><span class="line">yum install percona-xtrabackup-24 -y</span><br><span class="line">yum install qpress -y <span class="comment">#压缩备份需要</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="源码编译安装"><a href="#源码编译安装" class="headerlink" title="源码编译安装"></a>源码编译安装</h3><ol>
<li>从github获取源码</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/percona/percona-xtrabackup.git </span><br><span class="line"><span class="built_in">cd</span> percona-xtrabackup </span><br><span class="line">git checkout 2.4</span><br></pre></td></tr></table></figure>

<p>然后，您应该有一个以您分支的版本命名的目录，例如 <code>percona-xtrabackup</code>。</p>
<ol start="2">
<li>编译安装</li>
</ol>
<ul>
<li>先安装依赖</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install cmake gcc gcc-c++ libaio libaio-devel automake autoconf \ </span><br><span class="line">bison libtool ncurses-devel libgcrypt-devel libev-devel libcurl-devel \ </span><br><span class="line">vim-common</span><br></pre></td></tr></table></figure>

<ul>
<li>编译安装</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmake -DBUILD_CONFIG = xtrabackup_release -DWITH_MAN_PAGES=OFF &amp;&amp; make -j4</span><br><span class="line">make install <span class="comment">#默认安装/usr/local/xtrabackup</span></span><br></pre></td></tr></table></figure>

<h3 id="二进制包安装"><a href="#二进制包安装" class="headerlink" title="二进制包安装"></a>二进制包安装</h3><p>1.下载2进制包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://www.percona.com/downloads/Percona-XtraBackup-2.4/Percona-XtraBackup-2.4.9/binary/tarball/percona-xtrabackup-2.4.9-Linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure>

<p>2.安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install numactl -y</span><br><span class="line">tar xf percona-xtrabackup-2.4.9-Linux-x86_64.tar.gz -C /usr/<span class="built_in">local</span>/</span><br><span class="line">mv /usr/<span class="built_in">local</span>/percona-xtrabackup-2.4.9-Linux-x86_64/ /usr/<span class="built_in">local</span>/xtrabackup</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=$PATH:/usr/local/xtrabackup/bin&#x27;</span> &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>



<h2 id="创建备份用户"><a href="#创建备份用户" class="headerlink" title="创建备份用户"></a>创建备份用户</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create user &#39;bak&#39;@&#39;localhost&#39; identified by &#39;bak&#39;;</span><br><span class="line">grant reload,lock tables,replication client,process,super on *.* to &#39;bak&#39;@&#39;localhost&#39;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<h2 id="配置Xtrabackup"><a href="#配置Xtrabackup" class="headerlink" title="配置Xtrabackup"></a>配置Xtrabackup</h2><p>xtrabackup读取配置文件信息在my.cnf的[mysqld]和[xtrabackup]中，如果需要配置xtrabackup的配置只需要在</p>
<p>[xtrabackup]下配置，例如配置默认target_dir</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[xtrabackup]</span><br><span class="line">target_dir &#x3D; &#x2F;data&#x2F;backups&#x2F;mysql&#x2F;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="备份与恢复"><a href="#备份与恢复" class="headerlink" title="备份与恢复"></a>备份与恢复</h2><h3 id="完全备份"><a href="#完全备份" class="headerlink" title="完全备份"></a>完全备份</h3><h4 id="创建一次全备"><a href="#创建一次全备" class="headerlink" title="创建一次全备"></a>创建一次全备</h4><blockquote>
<p>2.4之后版本innobackpex将被弃用，所以后续都用xtrabackup</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup -H 127.0.0.1 -ubak -pbak -P 3306 --backup --target-dir=/data/backups/</span><br></pre></td></tr></table></figure>

<h4 id="准备备份文件"><a href="#准备备份文件" class="headerlink" title="准备备份文件"></a>准备备份文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup --prepare --target-dir=/data/backups/</span><br></pre></td></tr></table></figure>

<h4 id="恢复备份到datadir"><a href="#恢复备份到datadir" class="headerlink" title="恢复备份到datadir"></a>恢复备份到datadir</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup --copy-back --target-dir=/data/backups/</span><br></pre></td></tr></table></figure>

<p>如果你不想保存备份，可以使用–move-back</p>
<blockquote>
<p>在恢复备份之前，datadir必须为空。另外需要注意的是，在执行恢复之前需要关闭MySQL服务器。您无法还原到正在运行的mysqld实例的datadir（导入部分备份时除外）。</p>
</blockquote>
<p>还可以直接拷贝或者通过rsync来还原备份</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rsync -avrP /data/backup/ /var/lib/mysql/</span><br><span class="line">chown -R mysql:mysql /var/lib/mysql</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="增量备份"><a href="#增量备份" class="headerlink" title="增量备份"></a>增量备份</h3><h4 id="创建一次全备-1"><a href="#创建一次全备-1" class="headerlink" title="创建一次全备"></a>创建一次全备</h4><blockquote>
<p>备份目录上一级目录必须存在，佛则报错</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup -H 127.0.0.1 -ubak -pbak -P 3306 --backup --target-dir=/data/backups/base</span><br></pre></td></tr></table></figure>

<p>备份会在xtrabackup_checkpoints文件中记录LSN和备份方式信息</p>
<h4 id="基于全备的第一次增量备份"><a href="#基于全备的第一次增量备份" class="headerlink" title="基于全备的第一次增量备份"></a>基于全备的第一次增量备份</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup -H 127.0.0.1 -ubak -pbak -P 3306 --backup --target-dir=/data/backups/inc1 \</span><br><span class="line">--incremental-basedir=/data/backups/base</span><br></pre></td></tr></table></figure>

<h4 id="基于全备的第二次增量备份"><a href="#基于全备的第二次增量备份" class="headerlink" title="基于全备的第二次增量备份"></a>基于全备的第二次增量备份</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup -H 127.0.0.1 -ubak -pbak -P 3306 --backup --target-dir=/data/backups/inc2 \</span><br><span class="line">--incremental-basedir=/data/backups/inc1</span><br></pre></td></tr></table></figure>

<h4 id="准备备份文件-1"><a href="#准备备份文件-1" class="headerlink" title="准备备份文件"></a>准备备份文件</h4><ol>
<li>先对全备做只提交不回滚</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup --prepare --apply-log-only --target-dir=/data/backups/base</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>把第一次增量备份应用于全备</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup --prepare --apply-log-only --target-dir=/data/backups/base \</span><br><span class="line">--incremental-dir=/data/backups/inc1</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>把第二次增量备份应用于已修改的全备（包含第一次增量备份数据）</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup --prepare --target-dir=/data/backups/base \</span><br><span class="line">--incremental-dir=/data/backups/inc2</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：除了最后一次增量备份应用于全备的操作，其余都需要加–apply-log-only,只提交，不回滚。</p>
</blockquote>
<ol start="4">
<li>再对全备做一次–prepare</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup --prepare --target-dir=/data/backups/base</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>恢复全备</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup --copy-back --target-dir=/data/backups/base</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="压缩备份"><a href="#压缩备份" class="headerlink" title="压缩备份"></a>压缩备份</h3><blockquote>
<p>要进行压缩备份，您需要使用 选项：–compress</p>
</blockquote>
<h4 id="创建压缩备份"><a href="#创建压缩备份" class="headerlink" title="创建压缩备份"></a>创建压缩备份</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup -H 127.0.0.1 -ubak -pbak -P 3306 --backup --compress --target-dir=/data/compressed/</span><br></pre></td></tr></table></figure>

<p>采用并行压缩加速压缩备份,采用4个压缩线程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup -H 127.0.0.1 -ubak -pbak -P 3306 --backup --compress --compress-threads=4 \</span><br><span class="line">--target-dir=/data/compressed/</span><br></pre></td></tr></table></figure>

<h4 id="准备备份文件-2"><a href="#准备备份文件-2" class="headerlink" title="准备备份文件"></a>准备备份文件</h4><p>在准备备份之前，您需要解压缩所有文件。 <em>Percona XtraBackup</em>实现了可用于解压缩备份的选项。xtrabackup –decompress</p>
<blockquote>
<p><em>Percona XtraBackup</em>不会自动删除压缩文件。要清理备份目录，您应该使用 选项。即使它们没有被删除，如果使用–copy-back,–rmove-back，这些文件也不会被复制/移动到datadir 。 –remove-original</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup --decompress --target-dir=/data/compressed/</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在继续之前，您需要确保已安装<a href="http://www.quicklz.com/">qpress</a>。它可从 Percona Software存储库获得 yum install qpress -y</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup --prepare --target-dir=/data/compressed/</span><br></pre></td></tr></table></figure>

<h4 id="恢复备份"><a href="#恢复备份" class="headerlink" title="恢复备份"></a>恢复备份</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup --copy-back --target-dir=/data/compressed/</span><br><span class="line">chown -R mysql:mysql /var/lib/mysql</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="加密备份"><a href="#加密备份" class="headerlink" title="加密备份"></a>加密备份</h3><blockquote>
<p><em>Percona XtraBackup</em>已实现对加密备份的支持。它可用于使用<a href="https://www.percona.com/doc/percona-xtrabackup/2.4/glossary.html#term-xbstream">xbstream</a>选项加密/解密本地或流式备份（不支持流式tar备份），以便为备份添加另一层保护。加密是通过<code>libgcrypt</code>库完成的。</p>
</blockquote>
<p>要进行加密备份，需要指定选项（选项 并且 是互斥的，即只需要提供其中一个）： </p>
<p>–encrypt-key</p>
<p>–encrypt-key-file</p>
<blockquote>
<ul>
<li><code>--encrypt=ALGORITHM</code>-目前支持的算法是： <code>AES128</code>，<code>AES192</code>和<code>AES256</code></li>
<li><code>--encrypt-key=ENCRYPTION_KEY</code> - 使用适当长度的加密密钥。如果命令行无法控制访问机器，则不建议使用此选项，因此可以将密钥视为流程信息的一部分。</li>
<li><code>--encrypt-key-file=KEYFILE</code> - 可以读取适当长度的原始密钥的文件的名称。该文件必须是一个简单的二进制（或文本）文件，其中包含要使用的密钥。</li>
</ul>
</blockquote>
<p>这两个选项， 可用于指定加密密钥:</p>
<p> –encrypt-key</p>
<p> –encrypt-key-file</p>
<p>可以使用以下命令生成加密密钥：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl rand -base64 24</span><br></pre></td></tr></table></figure>

<p>该命令的示例输出应如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GCHFLrDFVx6UAsRb88uLVbAVWbK+Yzfs</span><br></pre></td></tr></table></figure>

<p>然后，该值可用作加密密钥</p>
<p><strong>使用–encrypt-key选项</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup -H 127.0.0.1 -ubak -pbak -P 3306 --backup --target-dir=/data/backups --encrypt=AES256 \</span><br><span class="line">--encrypt-key=<span class="string">&quot;GCHFLrDFVx6UAsRb88uLVbAVWbK+Yzfs&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>使用–encrypt-key-file选项</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup -H 127.0.0.1 -ubak -pbak -P 3306 --backup --target-dir=/data/backups/ --encrypt=AES256 \</span><br><span class="line">--encrypt-key-file=/data/backups/keyfile</span><br></pre></td></tr></table></figure>

<h4 id="优化加密备份"><a href="#优化加密备份" class="headerlink" title="优化加密备份"></a>优化加密备份</h4><p>加密备份引入了两个选项，可用于加速加密过程</p>
<p> –encrypt-threads 指定多个线程并行地用于加密</p>
<p> –encrypt-chunk-size  用于指定每个加密线程的工作加密缓冲区的大小（以字节为单位）（默认为64K）</p>
<h4 id="解密加密备份"><a href="#解密加密备份" class="headerlink" title="解密加密备份"></a>解密加密备份</h4><blockquote>
<p>可用于解密备份： –decrypt</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup --decrypt=AES256 --encrypt-key=<span class="string">&quot;GCHFLrDFVx6UAsRb88uLVbAVWbK+Yzfs&quot;</span> \</span><br><span class="line">--target-dir=/data/backups/</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup --decrypt=AES256 --encrypt-key=<span class="string">&quot;GCHFLrDFVx6UAsRb88uLVbAVWbK+Yzfs&quot;</span> \</span><br><span class="line">--target-dir=/data/backups/ --remove-original</span><br></pre></td></tr></table></figure>

<h4 id="准备加密备份"><a href="#准备加密备份" class="headerlink" title="准备加密备份"></a>准备加密备份</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup --prepare --target-dir=/data/backups/</span><br></pre></td></tr></table></figure>

<h4 id="恢复加密备份"><a href="#恢复加密备份" class="headerlink" title="恢复加密备份"></a>恢复加密备份</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup --copy-back --target-dir=/data/backups/</span><br></pre></td></tr></table></figure>

<h3 id="部分备份"><a href="#部分备份" class="headerlink" title="部分备份"></a>部分备份</h3><blockquote>
<p><strong>xtrabackup</strong>支持在启用独立表空间innodb_file_per_table选项时进行部分备份 ，有三种方法</p>
<ol>
<li>将表名与正则表达式匹配</li>
<li>提供文件中的表名列表</li>
<li>提供数据库列表</li>
<li>该表必须是在开启独立表空间后创建的</li>
</ol>
</blockquote>
<h4 id="–tables"><a href="#–tables" class="headerlink" title="–tables"></a>–tables</h4><p>正则匹配所有开头test的库下的所有表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup -H 127.0.0.1 -ubak -pbak -P 3306 --backup --datadir=/var/lib/mysql --target-dir=/data/backups/ --tables=<span class="string">&quot;^test[.].*&quot;</span></span><br></pre></td></tr></table></figure>

<p>正则匹配开头是test的库下的t1表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup -H 127.0.0.1 -ubak -pbak -P 3306 --backup --datadir=/var/lib/mysql --target-dir=/data/backups/ --tables=<span class="string">&quot;^test[.]t1&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="–tables-file"><a href="#–tables-file" class="headerlink" title="–tables-file"></a>–tables-file</h4><p>以库名.表名格式写入文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;mydatabase.mytable&quot;</span> &gt; /tmp/tables.txt</span><br><span class="line">xtrabackup -H 127.0.0.1 -ubak -pbak -P 3306 --backup --tables-file=/tmp/tables.txt</span><br></pre></td></tr></table></figure>

<h4 id="–databases"><a href="#–databases" class="headerlink" title="–databases"></a>–databases</h4><p>多个库空格分隔</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#多库备份中，最好同时备份mysql，sys库，这样方便恢复时用户账号信息也存在</span></span><br><span class="line">xtrabackup -H 127.0.0.1 -ubak -pbak -P 3306 --backup --databases=<span class="string">&#x27;mysql sys performance_schema ...&#x27;</span> --target-dir=/data/backups/</span><br></pre></td></tr></table></figure>

<h4 id="部分备份恢复"><a href="#部分备份恢复" class="headerlink" title="部分备份恢复"></a>部分备份恢复</h4><blockquote>
<p>部分备份有2种方式恢复</p>
<p>1 常规备份恢复</p>
<p>2 –export 单表恢复</p>
</blockquote>
<ol>
<li>常规恢复</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup --prepare --target-dir=/data/backups/</span><br></pre></td></tr></table></figure>

<p>关闭数据库,拷贝数据库目录或者对应的表文件到datadir对应的库或者表,如果直接恢复到一个新实例也可以直接用copy-back.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chown mysql.mysql datadir -R</span><br><span class="line">service mysqld start</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>–export 单表恢复</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xtrabackup --prepare --<span class="built_in">export</span> --target-dir=/data/backups/</span><br></pre></td></tr></table></figure>

<p>然后你能在备份目录中看到.exp文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find /data/backups/ -name export_test.*</span><br><span class="line">/data/backups/<span class="built_in">test</span>/export_test.exp </span><br><span class="line">/data/backups/<span class="built_in">test</span>/export_test.ibd </span><br><span class="line">/data/backups/<span class="built_in">test</span>/export_test.cfg</span><br></pre></td></tr></table></figure>

<blockquote>
<p>目标实例必须是mysql5.6版本以上才支持导入单表</p>
</blockquote>
<p>要将表导入其他服务器，首先要创建一个新表，其结构与将在该服务器上导入的表相同：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE mytable (...) ENGINE=InnoDB;</span><br></pre></td></tr></table></figure>

<p>然后丢弃它的表空间：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE mydatabase.mytable DISCARD TABLESPACE;</span><br></pre></td></tr></table></figure>

<p>复制<code>mytable.ibd</code>和<code>mytable.exp</code>文件到数据库的主页，并导入其表空间：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE mydatabase.mytable IMPORT TABLESPACE;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ANALYZE</span> <span class="keyword">TABLE</span> mydatabase.mytable;</span><br></pre></td></tr></table></figure>

<p>运行此命令后，导入表中的数据将可用。</p>
<h3 id="限制备份"><a href="#限制备份" class="headerlink" title="限制备份"></a>限制备份</h3><blockquote>
<p>虽然<strong>xtrabackup</strong>不会阻止数据库的操作，但任何备份都可<strong>以为</strong>正在备份的系统增加负载。在没有太多备用I / O容量的系统上，限制<strong>xtrabackup</strong>读取和写入数据的速率可能会有所帮助。您可以使用该 选项执行此操作。此选项限制每秒复制的块数。块大小为<em>10 MB</em>。</p>
</blockquote>
<p>–throttle=</p>
<p>默认情况下，没有限制，<strong>xtrabackup</strong>尽可能快地读取和写入数据。如果您对IOPS设置了太严格的限制，则备份可能会非常慢，以至于它永远无法跟上InnoDB正在编写的事务日志，因此备份可能永远不会完成。</p>
<h3 id="二进制日志"><a href="#二进制日志" class="headerlink" title="二进制日志"></a>二进制日志</h3><p>默认有两个文件会记录2进制日志信息</p>
<ol>
<li>在只使用XtraDB或InnoDB引擎的情况下，可以在xtrabackup_binlog_pos_innodb中查看</li>
<li>如果有包含其他存储引擎的库（MyisAM），则通过查看xtrabackup_binlog_info </li>
</ol>
<blockquote>
<p>通常情况下只有innodb两个文件2进制一样，如果有其他引擎，则通常xtrabackup_binlog_info 中所示的 position 应该会比 xtrabackup_binlog_pos_innodb 所示的数值大</p>
</blockquote>
<h2 id="常见选项"><a href="#常见选项" class="headerlink" title="常见选项"></a>常见选项</h2><ul>
<li><p>–apply-log-only</p>
<p>此选项仅在准备备份时执行重做阶段。这对增量备份非常重要。</p>
</li>
<li><p>–backup 进行备份并将其放入。</p>
</li>
<li><p>–compress </p>
<p>此选项告诉<strong>xtrabackup</strong>使用指定的压缩算法压缩所有输出数据，包括事务日志文件和元数据文件。目前唯一支持的算法是quicklz。生成的文件具有qpress存档格式，即*.qp，xtrabackup生成的每个文件本质上都是一个文件的qpress存档，可以通过qpress文件存档提取和解压缩。</p>
</li>
<li><p>–compress-chunk-size=# 压缩线程的工作缓冲区大小（以字节为单位）。默认值为64K。</p>
</li>
<li><p>–compress-threads=# </p>
<p>此选项指定<strong>xtrabackup</strong>用于并行数据压缩的工作线程数。此选项默认为<code>1</code>。并行压缩（：选项：xtrabackup -compress-threads）可以与并行文件复制（）一起使用。例如， 将创建4个I / O线程，这些线程将读取数据并将其传递给2个压缩线程。xtrabackup –parallel –parallel=4 –compress –compress-threads=2</p>
</li>
<li><p>–copy-back 将先前制作的备份中的所有文件从备份目录复制到其原始位置</p>
</li>
<li><p>–databases=#  此选项指定应备份的数据库和表的列表。该选项接受表单列表。`”databasename1[.table_name1] databasename2[.table_name2] . . .”</p>
</li>
<li><p>–datadir=DIRECTORY  备份的源目录。这应该与<em>MySQL</em>服务器的datadir相同，因此<code>my.cnf</code>如果存在则应该从中读取; 否则你必须在命令行上指定它</p>
</li>
<li><p>–decompress </p>
</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql备份</tag>
      </tags>
  </entry>
  <entry>
    <title>contextmanager</title>
    <url>/2020/09/22/%E4%BD%BF%E7%94%A8contextmanager%EF%BC%8C%E8%AE%BE%E7%BD%AE%E4%B8%8A%E4%B8%8B%E6%96%87/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用contextmanager，设置上下文</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DBTools_V2</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, host=<span class="string">&#x27;192.168.0.188&#x27;</span>, port=<span class="number">3306</span>, db=<span class="string">&#x27;xx&#x27;</span>, user=<span class="string">&#x27;xx&#x27;</span>, passwd=<span class="string">&#x27;xx?&#x27;</span>, charset=<span class="string">&#x27;utf8&#x27;</span></span>):</span></span><br><span class="line">        <span class="comment"># 建立连接</span></span><br><span class="line">        self.conn = pymysql.connect(host=host, port=port, db=db, user=user, passwd=passwd, charset=charset)</span><br><span class="line">        <span class="comment"># 创建游标，操作设置为字典类型</span></span><br><span class="line">        self.cur = self.conn.cursor(cursor=pymysql.cursors.DictCursor)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">select_by_parameters</span>(<span class="params">self, sql, params=None</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.cur.execute(sql, params)</span><br><span class="line">            result = self.cur.fetchall()</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_by_parameters</span>(<span class="params">self, sql, params=None</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            count = self.cur.execute(sql, params)</span><br><span class="line">            <span class="keyword">return</span> count</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_mysql_connect</span>(<span class="params">host=<span class="string">&#x27;192.168.0.188&#x27;</span>, port=<span class="number">3306</span>, db=<span class="string">&#x27;xx&#x27;</span>, user=<span class="string">&#x27;xx&#x27;</span>, passwd=<span class="string">&#x27;xx?&#x27;</span>, charset=<span class="string">&#x27;utf8&#x27;</span></span>):</span></span><br><span class="line">    <span class="comment"># with 执行部分</span></span><br><span class="line">    print(<span class="string">&quot;开始执行&quot;</span>)</span><br><span class="line">    db = DBTools_V2(host=host, port=port, db=db, user=user, passwd=passwd, charset=charset)</span><br><span class="line">    <span class="comment"># as 赋值</span></span><br><span class="line">    <span class="keyword">yield</span> db</span><br><span class="line">    <span class="comment"># 执行完代码后的处理</span></span><br><span class="line">    db.conn.commit()</span><br><span class="line">    db.cur.close()</span><br><span class="line">    db.conn.close()</span><br></pre></td></tr></table></figure>

<a id="more"></a>]]></content>
      <categories>
        <category>python运维</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>记录一次因服务器阵列卡坏掉而导致的回档操作</title>
    <url>/2020/09/22/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E5%9B%A0%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%98%B5%E5%88%97%E5%8D%A1%E5%9D%8F%E6%8E%89%E8%80%8C%E5%AF%BC%E8%87%B4%E7%9A%84%E5%9B%9E%E6%A1%A3%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h4 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h4><ol>
<li>周一上午刚到公司便接到策划同事发来的消息，公司某老项目游戏有玩家报登录不上。</li>
<li>于是便登录相关项目服务器，执行脚本，结果如下图：</li>
</ol>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/299a8d666a544ca9b9691af88fb7aa06~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p>当时返回无返回结果，及红色框内无返回值。第一直觉便觉得是不是对应服务器网络有问题。</p>
<a id="more"></a>

<h4 id="处理过程"><a href="#处理过程" class="headerlink" title="处理过程"></a>处理过程</h4><ol>
<li><p>ping了对应服务器，结果响应正常，尝试登录服务器结果登录不上，再使用telnet 命令测试对应端口正常。初步怀疑是否是sshd程序卡死，但由于正常玩家都无法登录游戏，所以排除单单sshd程序故障。</p>
</li>
<li><p>由于是物理机，就及时联系机房管理员，重启下服务器。等待约半个小时还没好，就再次询问机房人员，对方回复，由于阵列卡故障，导致磁盘文件系统损坏，经修复无果，无法正常启动服务器，为尽快恢复业务。提出新找一台服务器，安装相同版本系统，相同分区，然后把故障服务器上的磁盘挂载到新服务器上，拷贝出原磁盘上的数据到新服务器磁盘上，进行恢复业务（再三确认原盘数据是否会有风险，机房给的答复是没有风险，于是便开始动手干）。</p>
</li>
<li><p>通过拷贝原盘数据到新盘，快速部署好业务环境后，启动mysql，nginx，php-fpm等进程，恢复业务（在这过程中发现原盘根目录下etc目录下所有文件都丢失，本地数据库备份目录下文件也都丢失，隐隐不好的感觉，好在其他目录下文件结构都完整，数据库目录结构也完整），结果后续陆续有玩家上报角色丢失。</p>
</li>
<li><p>立马创建实例，把前一天远程备份恢复到该实例下。通过两个库中角色信息对比，发现是有数据记录丢失。</p>
</li>
<li><p>尝试通过把缺失玩家信息记录复制到现在外网数据库中来实现恢复玩家角色，经过尝试，不可行。</p>
</li>
<li><p>于是只能尽快进行回档操作，由于远程备份是每天凌晨4点，服务器硬件故障经客服统计玩家反馈为2点左右出现，所以用昨天凌晨4的远程备份来进行回档操作。</p>
</li>
<li><p>通过回档，玩家角色数据恢复</p>
</li>
</ol>
]]></content>
      <categories>
        <category>故障记录</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>rsync服务搭建</title>
    <url>/2020/09/22/rsync%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h4 id="server端搭建"><a href="#server端搭建" class="headerlink" title="server端搭建"></a>server端搭建</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget  http://rsync.samba.org/ftp/rsync/src/rsync-3.0.7.tar.gz</span><br><span class="line">tar xf rsync-3.0.7.tar.gz</span><br><span class="line"><span class="built_in">cd</span> rsync-3.0.7</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/rsync</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h5 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/rsyncd.conf</span><br><span class="line"><span class="comment">#全局设置</span></span><br><span class="line">uid = root <span class="comment">#守护进程所属的uid，默认是nobody，可能会碰到文件或目录权限问题，可以用root</span></span><br><span class="line">gid = root</span><br><span class="line">port = 873 <span class="comment">#指定监听端口，默认是873，可以自己指定</span></span><br><span class="line">use chroot = no</span><br><span class="line">max connections = 30</span><br><span class="line">pid file = /var/run/rsyncd.pid</span><br><span class="line">lock file = /var/run/rsyncd.lock 设置rsync运行时lock文件的位置</span><br><span class="line"><span class="built_in">log</span> file = /var/<span class="built_in">log</span>/rsyncd.log <span class="comment">#记录传输文件的日志</span></span><br><span class="line">transfer logging = yes <span class="comment">#记录传输文件的日志</span></span><br><span class="line"><span class="built_in">log</span> format = %t%a%m%f%b <span class="comment">#日志格式</span></span><br><span class="line">syslog facility = local3 <span class="comment">#日志级别</span></span><br><span class="line">timeout = 300</span><br><span class="line">ignore errors = yes <span class="comment">#是否忽略错误</span></span><br><span class="line">list = no <span class="comment">#当查看服务器上提供了哪些目录时是否列出来，no比较安全</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#模块定义</span></span><br><span class="line"><span class="comment">#主要是定义服务器哪个目录要被同步。</span></span><br><span class="line"><span class="comment">#每个模块都要以[name]形式。这个名字就是在 rsync 客户端看到的名字。</span></span><br><span class="line"><span class="comment">#但是服务器真正同步的数据是通过 path 指定的。可以依次创建多个模块。</span></span><br><span class="line"><span class="comment">#每个模块要指定认证用户、密码文件，但排除并不是必须的。</span></span><br><span class="line">[script]</span><br><span class="line"><span class="built_in">read</span> only = yes  <span class="comment">#只读，也就是客户端只能下载，不能上传</span></span><br><span class="line"><span class="comment">#write only = yes #只写选择，只让客户端到服务器上写入</span></span><br><span class="line">path = /root/script <span class="comment">#需要同步的路径</span></span><br><span class="line">comment = script <span class="comment">#本模块注释，可选</span></span><br><span class="line">auth users = <span class="built_in">test</span>  <span class="comment">#认证的用户</span></span><br><span class="line">secrets file = /etc/rsync.pas  <span class="comment">#密码文件路径</span></span><br><span class="line">hosts allow = 172.96.248.250  <span class="comment">#允许访问的IP，可以指定单个IP，也可以指定整个网段，能提高安全性。格式是 ip 与 ip 之间、ip 和网段之间、网段和网段之间要用空格隔开；</span></span><br><span class="line">exclude = error_log httpd.pid <span class="comment">#忽略的文件或目录</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[web]</span><br><span class="line"><span class="built_in">read</span> only = yes</span><br><span class="line">path = /data/www</span><br><span class="line">comment = web</span><br><span class="line">auth users = <span class="built_in">test</span></span><br><span class="line">secrets file = /etc/rsync.pas</span><br><span class="line">hosts allow = 172.96.248.250 <span class="comment">#白名单</span></span><br><span class="line">hosts deny = ipaddress/netmask   <span class="comment">#黑名单</span></span><br><span class="line"></span><br><span class="line">此处需要注意：</span><br><span class="line">（1）默认规则为允许访问，二者都不出现时</span><br><span class="line">（2）只出现hosts allow：定义白名单；但没有被匹配到的由默认规则处理，即为允许</span><br><span class="line">（3）只出现hosts deny：定义黑名单；出现在名单中的都被拒绝</span><br><span class="line">（4）二者同时出现，先检查hosts allow,如果匹配就allow，否则，检查hosts deny 如果匹配则拒绝，如二者均无匹配，则使用默认的，即允许</span><br><span class="line"></span><br><span class="line">vim /etc/rsync.pas</span><br><span class="line"><span class="built_in">test</span>:12345 <span class="comment">#账号密码</span></span><br><span class="line"> </span><br><span class="line">chmod 600 /etc/rsync.pas</span><br></pre></td></tr></table></figure>

<h5 id="启动服务端rsync"><a href="#启动服务端rsync" class="headerlink" title="启动服务端rsync"></a>启动服务端rsync</h5><ol>
<li>/usr/local/rsync/bin/rsync  –daemon –config=/etc/rsyncd.conf 默认监听873端口</li>
<li>xinet方式启动</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1).修改 &#x2F;etc&#x2F;services，加入以下内容，如果已经有可以不加，如果端口改了，需要改掉 873 端口为指定端口</span><br><span class="line"></span><br><span class="line">rsync　　873&#x2F;tcp　　# rsync </span><br><span class="line">rsync　　873&#x2F;udp　　# rsync</span><br><span class="line"></span><br><span class="line">2).修改 &#x2F;etc&#x2F;xinetd.d&#x2F;rsync，主要是要打开rsync這個daemon, 一旦有rsync client要连接時, xinetd会把它转介給 rsyncd(port 873)。</span><br><span class="line">service rsync</span><br><span class="line">&#123;</span><br><span class="line">    disable &#x3D; no</span><br><span class="line">    socket_type     &#x3D; stream</span><br><span class="line">    wait            &#x3D; no</span><br><span class="line">    user            &#x3D; root</span><br><span class="line">    server          &#x3D; &#x2F;usr&#x2F;bin&#x2F;rsync</span><br><span class="line">    server_args     &#x3D; --daemon --config&#x3D;&#x2F;etc&#x2F;rsynd.conf</span><br><span class="line">    log_on_failure  +&#x3D; USERID</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">3).重启 xinetd</span><br><span class="line">service xinetd restart</span><br></pre></td></tr></table></figure>

<h4 id="client端安装配置"><a href="#client端安装配置" class="headerlink" title="client端安装配置"></a>client端安装配置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install rsync -y #如果yum安装的版本不行，则用源码安装并配置环境变量即可</span><br><span class="line">vim &#x2F;etc&#x2F;rsync.pas</span><br><span class="line">123456 #密码</span><br><span class="line">chmod 600 &#x2F;etc&#x2F;rsync.pas</span><br><span class="line">rsync -aP --delete &#x2F;root&#x2F;script test@172.96.205.214::script --password-file&#x3D;&#x2F;etc&#x2F;rsync.pas</span><br></pre></td></tr></table></figure>

<h4 id="rsync-选项"><a href="#rsync-选项" class="headerlink" title="rsync 选项"></a>rsync 选项</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-n：测试，在不确定命令是否能按照意愿执行时，务必要实现测试</span><br><span class="line">-q：--quiet，静默模式</span><br><span class="line">-P |--partial 保留那些因故没有完全传输的文件，以是加快随后的再次传输。</span><br><span class="line">-a, --archive 归档模式，表示以递归方式传输文件，并保持所有文件属性，等于-rlptgoD。</span><br><span class="line">-z, --compress 对备份的文件在传输时进行压缩处理。</span><br><span class="line">-v, --verbose 详细模式输出。</span><br><span class="line">-q, --quiet 精简输出模式。</span><br><span class="line">-r, --recursive 对子目录以递归模式处理。</span><br><span class="line">-l, --links 保留软链结。</span><br><span class="line">-p, --perms 保持文件权限。</span><br><span class="line">-o, --owner 保持文件属主信息。</span><br><span class="line">-g, --group 保持文件属组信息。</span><br><span class="line">-t, --times 保持文件时间信息。</span><br><span class="line">-D, --devices 保持设备文件信息。</span><br><span class="line">-e, --rsh&#x3D;command 指定使用rsh、ssh方式进行数据同步。</span><br><span class="line">--rsync-path&#x3D;PATH 指定远程服务器上的rsync命令所在路径信息。</span><br><span class="line">--delete 删除那些接收端还有而发送端已经不存在的文件。</span><br><span class="line">-R, --relative 使用相对路径信息。</span><br><span class="line">-c, --checksum 打开校验开关，强制对文件传输进行校验。</span><br><span class="line">-u, --update 仅仅进行更新，也就是跳过所有已经存在于DST，并且文件时间晚于要备份的文件，不覆盖更新的文件。</span><br><span class="line">--address 绑定到特定的地址。</span><br><span class="line">--config&#x3D;FILE 指定其他的配置文件，不使用默认的rsyncd.conf文件。</span><br><span class="line">--port&#x3D;PORT 指定其他的rsync服务端口。</span><br><span class="line">--progress：显示进度条</span><br></pre></td></tr></table></figure>


<h4 id="rsync基于ssh同步"><a href="#rsync基于ssh同步" class="headerlink" title="rsync基于ssh同步"></a>rsync基于ssh同步</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rsync  -aP  --delete  root@192.168.0.10:/data/www/webapps  /data/www/webapps</span><br><span class="line"><span class="comment">#如果想每次同步不输入密码，需要做Linux主机之间免密码登录。</span></span><br><span class="line"><span class="comment">#如果ssh端口不是22,则需要使用如下方式执行</span></span><br><span class="line">rsync -aP -e <span class="string">&#x27;ssh -p 27209&#x27;</span> root@172.96.205.214:/root/script  /root/script3</span><br></pre></td></tr></table></figure>

<p><strong>如果遇到该报错</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash: rsync: command not found</span><br><span class="line">rsync: connection unexpectedly closed (0 bytes received so far) [receiver]</span><br><span class="line">rsync error: error in rsync protocol data stream (code 12) at io.c(600) [receiver&#x3D;3.0.6]</span><br></pre></td></tr></table></figure>

<p><strong>请在两台服务器上都执行yum install rsync -y,或者源码安装完后，做一个软连接，让rsync命令能在PATH路径中找到</strong></p>
<h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><p>1、如果使用命令时只指定源而不指定目标，仅会将源以列表的形式显示而不同步</p>
<p>2、rsync命令使用中，如果源参数的末尾有斜线，只会复制指定目录的内容，而不复制目录本身，没有斜线，则会复制目录本身，包括目录</p>
<h4 id="rsync实时同步配置"><a href="#rsync实时同步配置" class="headerlink" title="rsync实时同步配置"></a>rsync实时同步配置</h4><h5 id="rsync-inotify"><a href="#rsync-inotify" class="headerlink" title="rsync+inotify"></a>rsync+inotify</h5><p>Rsync安装完毕后，需要安装inotify文件检查软件。同时为了同步的时候不需要输入密码，这样可以使用ssh免密钥方式进行同步。</p>
<ul>
<li><h5 id="inotify安装"><a href="#inotify安装" class="headerlink" title="inotify安装"></a>inotify安装</h5></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;github.com&#x2F;downloads&#x2F;rvoicilas&#x2F;inotify-tools&#x2F;inotify-tools-3.14.tar.gz</span><br><span class="line">tar xf inotify-tools-3.14.tar.gz</span><br><span class="line">cd inotify-tools-3.14</span><br><span class="line">.&#x2F;configure</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>

<ul>
<li><h4 id="监控脚本"><a href="#监控脚本" class="headerlink" title="监控脚本"></a>监控脚本</h4></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#写一个脚本时刻监控同步目录的变化：</span></span><br><span class="line">vim auto_inotify.sh</span><br><span class="line"><span class="meta">#!/bin/sh  </span></span><br><span class="line">src=/data/webapps/www/</span><br><span class="line">des=/var/www/html/</span><br><span class="line">ip=192.168.0.11</span><br><span class="line">inotifywait -mrq --timefmt <span class="string">&#x27;%d/%m/%y-%H:%M&#x27;</span> --format <span class="string">&#x27;%T %w%f&#x27;</span> -e modify,delete,create,attrib <span class="variable">$&#123;src&#125;</span> | <span class="keyword">while</span> <span class="built_in">read</span> file  </span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  rsync -aP --delete <span class="variable">$src</span> root@<span class="variable">$ip</span>:<span class="variable">$des</span>    </span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#后台一直执行</span></span><br><span class="line">nohup sh auto_inotify.sh &amp;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux基础服务</category>
      </categories>
      <tags>
        <tag>rsync</tag>
      </tags>
  </entry>
  <entry>
    <title>NFS安装使用</title>
    <url>/2020/09/22/NFS%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h4 id="NFS安装"><a href="#NFS安装" class="headerlink" title="NFS安装"></a>NFS安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install nfs* rpcbind -y</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;/ssf *(rw,no_root_squash,no_all_squash,sync)&quot;</span> &gt;&gt;/etc/exports</span><br><span class="line">service rpcbind start</span><br><span class="line">service nfs start </span><br><span class="line">chmod 766 /ssf</span><br></pre></td></tr></table></figure>

<h4 id="配置文件详解"><a href="#配置文件详解" class="headerlink" title="配置文件详解"></a>配置文件详解</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;exports </span><br><span class="line">&#x2F;data&#x2F;lys 192.168.2.0&#x2F;24(rw,no_root_squash,no_all_squash,sync)</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h4 id="常见的参数"><a href="#常见的参数" class="headerlink" title="常见的参数"></a>常见的参数</h4><ul>
<li><p>rw/ro 权限是读写或只读 (read-only)，但最终能不能读写，还是与文件系统的 rwx 及身份有关。</p>
</li>
<li><p>sync/async sync代表数据会同步写入到内存与硬盘中，async 则代表数据会先暂存于内存当中，而非直接写入硬盘！</p>
</li>
<li><p>no_root_squash/root_squash 客户端使用 NFS 文件系统的账号若为 root 时，系统该如何判断这个账号的身份？预设的情况下，客户端 root 的身份会由 root_squash 的设定压缩成 nfsnobody， 如此对服务器的系统会较有保障。但如果你想要开放客户端使用 root 身份来操作服务器的文件系统，那么这里就得要开 no_root_squash 才行！</p>
</li>
<li><p>all_squash 不论登入 NFS 的使用者身份为何， 他的身份都会被压缩成为匿名用户，通常也就是 nobody(nfsnobody) 啦！</p>
</li>
<li><p>anonuid　anongid  anon 意指 anonymous (匿名者) 前面关于 *_squash 提到的匿名用户的 UID 设定值，通常为 nobody(nfsnobody)，但是你可以自行设定这个 UID 的值！当然，这个 UID 必需要存在于你的 /etc/passwd 当中！ anonuid 指的是 UID 而 anongid 则是群组的 GID 啰。</p>
</li>
</ul>
<h4 id="客户端使用"><a href="#客户端使用" class="headerlink" title="客户端使用"></a>客户端使用</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install nfs-utils -y</span><br><span class="line">showmount -e ip地址 查看server共享的目录</span><br><span class="line">mount -t nfs 192.168.246.130:/ssf /mnt <span class="comment">#挂载nfs存储</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux基础服务</category>
      </categories>
      <tags>
        <tag>NFS</tag>
      </tags>
  </entry>
  <entry>
    <title>iredmail邮件服务器部署</title>
    <url>/2020/09/22/iredmail%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<blockquote>
<p>作者：Vaedit</p>
</blockquote>
<h2 id="iredmail部署"><a href="#iredmail部署" class="headerlink" title="iredmail部署"></a>iredmail部署</h2><h4 id="一-服务器选型采购"><a href="#一-服务器选型采购" class="headerlink" title="一 服务器选型采购"></a>一 服务器选型采购</h4><p>由于国内云厂商默认都禁用smtp25端口，所以需要购买国外地区云服务器，低使用频率推荐至少内存2G以上。</p>
<table>
<thead>
<tr>
<th>云厂商</th>
<th>服务器型号</th>
<th>配置</th>
</tr>
</thead>
<tbody><tr>
<td>AWS</td>
<td>r4.large</td>
<td>2核16G</td>
</tr>
</tbody></table>
<h4 id="二-iredmail下载安装"><a href="#二-iredmail下载安装" class="headerlink" title="二 iredmail下载安装"></a>二 iredmail下载安装</h4><blockquote>
<p>该示例后续所有一级域名都需要按照实际使用域名来修改</p>
</blockquote>
<a id="more"></a>

<h5 id="2-1-初始化服务器"><a href="#2-1-初始化服务器" class="headerlink" title="2.1 初始化服务器"></a>2.1 初始化服务器</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#升级系统软件到最新，不然会有报错</span></span><br><span class="line">yum update -y</span><br><span class="line"><span class="comment">#修改主机名为mail.domain.com ,和邮件服务器地址一致</span></span><br><span class="line">hostname mail.domain.com</span><br><span class="line">/etc/hosts</span><br><span class="line">/etc/hostname</span><br><span class="line">hostname -f</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭selinux</span></span><br><span class="line">/etc/selinux/config</span><br><span class="line">setenforce 0</span><br><span class="line"><span class="comment">#下载最新稳定版，需要centos7版本</span></span><br><span class="line">wget -c https://codeload.github.com/iredmail/iRedMail/tar.gz/1.0</span><br><span class="line"><span class="comment">#解压安装</span></span><br><span class="line">tar xf iRedMail-1.0.tar.gz &amp;&amp; <span class="built_in">cd</span> iRedMail-1.0</span><br><span class="line">bash iRedMail.sh <span class="comment">#根据输出提示，输入mysql密码，管理员密码，域名，邮件存放地址等等信息完成配置文件生成，最后输入y确认安装,默认iredmail会配置mysql，iptables规则</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>官方安装文档：<a href="https://docs.iredmail.org/install.iredmail.on.rhel-zh_CN.html">https://docs.iredmail.org/install.iredmail.on.rhel-zh_CN.html</a></p>
</blockquote>
<h5 id="2-2-域名解析"><a href="#2-2-域名解析" class="headerlink" title="2.2 域名解析"></a>2.2 域名解析</h5><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2e22800a2a664b29bbca36b790618d0d~tplv-k3u1fbpfcp-zoom-1.image"></p>
<h5 id="2-3-安全组开放端口"><a href="#2-3-安全组开放端口" class="headerlink" title="2.3 安全组开放端口"></a>2.3 安全组开放端口</h5><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e27fc9e14f094502b2ed9f8f8c112573~tplv-k3u1fbpfcp-zoom-1.image"></p>
<h4 id="三-优化邮件服务器"><a href="#三-优化邮件服务器" class="headerlink" title="三 优化邮件服务器"></a>三 优化邮件服务器</h4><p>邮件服务器添加SPF，DKIM，DMARC，PTR,提高邮件送达率</p>
<h5 id="3-1-设置SPF"><a href="#3-1-设置SPF" class="headerlink" title="3.1 设置SPF"></a>3.1 设置SPF</h5><blockquote>
<p>SPF 记录是一种域名服务 (DNS) 记录，可确定允许哪些邮件服务器代表您的域来发送电子邮件。</p>
</blockquote>
<ol>
<li><p>a：所有该域名的A记录都为通过，a不指定的情况下为当前域名</p>
</li>
<li><p>ip4：指定通过的IP</p>
</li>
<li><p>mx：mx记录域名的A记录IP可以发邮件</p>
</li>
<li><p>all：结束标志，“-”表示只允许设置的记录为通过，“~”表示失败，通常用于测试，“+”表示忽略SPF</p>
<p>如图：<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bfc210908bb041349d3a4d5832392425~tplv-k3u1fbpfcp-zoom-1.image"></p>
</li>
</ol>
<h5 id="3-2-设置DKIM"><a href="#3-2-设置DKIM" class="headerlink" title="3.2 设置DKIM"></a>3.2 设置DKIM</h5><blockquote>
<p>DomainKeys Identified Mail的缩写，域名密钥识别邮件标准。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">amavisd showkeys <span class="comment">#如果报错制定配置文件</span></span><br><span class="line">amavisd -c /etc/amavisd/amavisd.conf showkeys</span><br><span class="line"><span class="comment">#输出去掉括号和引号</span></span><br><span class="line">v=DKIM1; p=MIGfMA0GCSqsdfdsfQEBAQUAA4GNADCBiQKBgQdsfdsfIydbCBnARzt0m8yVQwpQIJUebYk09TvDu56kAQEXuVNDS5G8DjvvCUslq/1+/EKcafvVh82of3rONn0wPhRpBm2CfDTD8pEWHmT6BRa+su9zJ02iomgHYl14sfxxfsdf</span><br></pre></td></tr></table></figure>

<p>如图：</p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f21d7ce3e9ae4b26bacd953b641f28ad~tplv-k3u1fbpfcp-zoom-1.image"></p>
<h5 id="3-3-设置DMARC"><a href="#3-3-设置DMARC" class="headerlink" title="3.3 设置DMARC"></a>3.3 设置DMARC</h5><blockquote>
<p>DMARC协议是有效解决信头From伪造而诞生的一种新的邮件来源验证手段，为邮件发件人地址提供强大保护，并在邮件收发双方之间建立起一个数据反馈机制。</p>
</blockquote>
<p>如图：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a560ec9b22a84028a4106f8f6d554301~tplv-k3u1fbpfcp-zoom-1.image"></p>
<h5 id="3-4-PTR"><a href="#3-4-PTR" class="headerlink" title="3.4 PTR"></a>3.4 PTR</h5><blockquote>
<p>PTR记录也就是IP反向解析，我们常见的解析都是将域名A记录解析到IP，PTR则是将IP反向解析到对应的域名，通过设置PTR可以提高发信方的信誉，从而提高到达率。</p>
</blockquote>
<p>AWS默认就做了PTR</p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/364babea950f433e90ec5940206e1b1d~tplv-k3u1fbpfcp-zoom-1.image"></p>
<pre><code>  但不是我们需要的反向解析，这里没做修改，如果需要修改则需要提工单改为mail.domain.com</code></pre>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6b5b7025337544ed94e7270af8dd147a~tplv-k3u1fbpfcp-zoom-1.image"></p>
<blockquote>
<p>附AWS申请更改PTR和取消邮件限制地址：<a href="https://aws.amazon.com/tw/blogs/aws/reverse-dns-for-ec2s-elastic-ip-addresses/%EF%BC%8C%E4%B8%80%E8%88%AC1-3%E5%A4%A9%E5%86%85%E4%BC%9A%E9%85%8D%E7%BD%AE%E5%A5%BD%EF%BC%8C%E5%B9%B6%E4%B8%94%E4%BC%9A%E9%82%AE%E4%BB%B6%E6%8F%90%E9%86%92%E4%BD%A0%E3%80%82">https://aws.amazon.com/tw/blogs/aws/reverse-dns-for-ec2s-elastic-ip-addresses/，一般1-3天内会配置好，并且会邮件提醒你。</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#反向解析测试</span></span><br><span class="line">dig -x ip +short3</span><br><span class="line">host ip</span><br></pre></td></tr></table></figure>



<h4 id="四-邮件记录示例"><a href="#四-邮件记录示例" class="headerlink" title="四 邮件记录示例"></a>四 邮件记录示例</h4><table>
<thead>
<tr>
<th align="left">主机记录</th>
<th>记录类型</th>
<th>记录值</th>
</tr>
</thead>
<tbody><tr>
<td align="left">mail</td>
<td>A</td>
<td>44.xx.xx.xx</td>
</tr>
<tr>
<td align="left">@</td>
<td>MX</td>
<td>mail.domain.net （优先级10）</td>
</tr>
<tr>
<td align="left">@</td>
<td>TXT</td>
<td>v=spf1 a mx -all</td>
</tr>
<tr>
<td align="left">_dmarc</td>
<td>TXT</td>
<td>v=DMARC1;p=reject;rua=postmaster@domain.net</td>
</tr>
<tr>
<td align="left">dkim._domainkey</td>
<td>TXT</td>
<td>v=DKIM1; p=MIGdsfdtgSqGSIb3DQEBAQUAA4GNADCBiQdfdgd3sTQzCYISM8i1qIChZjgYNwgZGy5XcJQvoApzd1UJbaMVIhJ2Zae2Rc15SFKQgwuxO6bch0coe/IS/wvRuruZ6BDCwjgoVrxY+OsAOpdsfddUD12LVMmG2jDkZ0UJ4XSxx1+RVwIDAQAB</td>
</tr>
</tbody></table>
<h4 id="五-备注"><a href="#五-备注" class="headerlink" title="五 备注"></a>五 备注</h4><ol>
<li><p>postfix日志路径：/var/log/maillog</p>
</li>
<li><p>mariadb默认数据库目录存放在/var/lib/mysql，安装完成后需要停掉切换到/data/mysql下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#关闭并全备mariadb</span></span><br><span class="line">systemctl stop mariadb</span><br><span class="line">nestat -ntlp|grep mysql</span><br><span class="line">cp -a /var/lib/mysql /data/</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改下配置文件指定mariadb datadir</span></span><br><span class="line">vim /etc/my.cnf</span><br><span class="line">datadir=/data/mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动</span></span><br><span class="line">systemctl start mariadb</span><br></pre></td></tr></table></figure>
</li>
<li><p>默认后台管理地址：<a href="https://mail.domain.com/iredadmin/">https://mail.domain.com/iredadmin/</a>  账号：<a href="mailto:&#x70;&#x6f;&#115;&#x74;&#109;&#97;&#115;&#116;&#x65;&#114;&#64;&#x64;&#111;&#109;&#x61;&#x69;&#x6e;&#x2e;&#99;&#x6f;&#109;">&#x70;&#x6f;&#115;&#x74;&#109;&#97;&#115;&#116;&#x65;&#114;&#64;&#x64;&#111;&#109;&#x61;&#x69;&#x6e;&#x2e;&#99;&#x6f;&#109;</a> 密码：安装时指定</p>
</li>
<li><p>web mail地址：<a href="https://mail.domain.com/mail/">https://mail.domain.com/mail/</a>  账号：<a href="mailto:&#x70;&#x6f;&#115;&#116;&#x6d;&#x61;&#x73;&#x74;&#101;&#114;&#64;&#x64;&#x6f;&#x6d;&#x61;&#105;&#110;&#x2e;&#x63;&#111;&#109;">&#x70;&#x6f;&#115;&#116;&#x6d;&#x61;&#x73;&#x74;&#101;&#114;&#64;&#x64;&#x6f;&#x6d;&#x61;&#105;&#110;&#x2e;&#x63;&#111;&#109;</a> 密码：安装时指定</p>
</li>
<li><pre><code class="bash">#各服务默认端口
POP3 service: port 110 over TLS (recommended), or port 995 with SSL.
IMAP service: port 143 over TLS (recommended), or port 993 with SSL.
SMTP service: port 587 over TLS.
CalDAV and CardDAV server addresses: https://&lt;server&gt;/SOGo/dav/&lt;full email address&gt;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">6. 默认邮件存放路径：&#x2F;data&#x2F;vmail&#x2F;  (安装时指定)</span><br><span class="line"></span><br><span class="line">7. 修改邮件附件大小限制：https:&#x2F;&#x2F;docs.iredmail.org&#x2F;change.mail.attachment.size-zh_CN.html</span><br><span class="line"></span><br><span class="line">   &#96;&#96;&#96;bash</span><br><span class="line">   209715200 #200M</span><br><span class="line">   postconf -e message_size_limit&#x3D;&#39;209715200&#39;</span><br><span class="line">   </span><br><span class="line">   postconf -e mailbox_size_limit&#x3D;&#39;209715200&#39;</span><br><span class="line">   </span><br><span class="line">   #后续步骤省略，请看官方文档</span><br></pre></td></tr></table></figure>


</code></pre>
</li>
</ol>
<h4 id="六-客户端配置"><a href="#六-客户端配置" class="headerlink" title="六 客户端配置"></a>六 客户端配置</h4><h5 id="6-1-Foxmail配置"><a href="#6-1-Foxmail配置" class="headerlink" title="6.1 Foxmail配置"></a>6.1 Foxmail配置</h5><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/487dcfa582bd4466a503fdffc7bfbdaa~tplv-k3u1fbpfcp-zoom-1.image"></p>
<h4 id="七-优化检测"><a href="#七-优化检测" class="headerlink" title="七 优化检测"></a>七 优化检测</h4><h5 id="7-1-通过http-www-mail-tester-com-测试邮件服务器"><a href="#7-1-通过http-www-mail-tester-com-测试邮件服务器" class="headerlink" title="7.1 通过http://www.mail-tester.com/ 测试邮件服务器"></a>7.1 通过<a href="http://www.mail-tester.com/">http://www.mail-tester.com/</a> 测试邮件服务器</h5><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0c469eff8d9d41a8a0adcad7216ac3ca~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p>通过邮件账号发送一封邮件 到上面的邮箱，查看邮件得分，它会提醒还有哪些不足,假如邮件服务器，原本就在黑名单内，那么该ip之前使用者存在滥用导致，只有一个办法，更换ip来解决。</p>
<h5 id="7-2-QQ邮箱优化"><a href="#7-2-QQ邮箱优化" class="headerlink" title="7.2 QQ邮箱优化"></a>7.2 QQ邮箱优化</h5><ul>
<li><p>注册合作伙伴（国内大部分邮箱都是qq邮箱）</p>
<p>通过openmail.qq.com来提高qq邮箱发件成功率，截止我配置邮件服务器，该地址功能目前处于维护状态，不知何时好。</p>
</li>
</ul>
<h5 id="7-3-设置grey-list-解决收件延迟问题"><a href="#7-3-设置grey-list-解决收件延迟问题" class="headerlink" title="7.3 设置grey list,解决收件延迟问题"></a>7.3 设置grey list,解决收件延迟问题</h5><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba8aa6034975481f9c36c15edc376572~tplv-k3u1fbpfcp-zoom-1.image"></p>
]]></content>
      <categories>
        <category>Linux基础服务</category>
      </categories>
      <tags>
        <tag>iredmail</tag>
      </tags>
  </entry>
</search>
